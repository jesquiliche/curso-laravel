"use strict";(self.webpackChunkeloquent=self.webpackChunkeloquent||[]).push([[4837],{3905:(e,a,n)=>{n.d(a,{Zo:()=>c,kt:()=>k});var o=n(7294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function l(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?l(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function r(e,a){if(null==e)return{};var n,o,t=function(e,a){if(null==e)return{};var n,o,t={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var s=o.createContext({}),p=function(e){var a=o.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},c=function(e){var a=p(e.components);return o.createElement(s.Provider,{value:a},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},m=o.forwardRef((function(e,a){var n=e.components,t=e.mdxType,l=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),d=p(n),m=t,k=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return n?o.createElement(k,i(i({ref:a},c),{},{components:n})):o.createElement(k,i({ref:a},c))}));function k(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var l=n.length,i=new Array(l);i[0]=m;var r={};for(var s in a)hasOwnProperty.call(a,s)&&(r[s]=a[s]);r.originalType=e,r[d]="string"==typeof e?e:t,i[1]=r;for(var p=2;p<l;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9272:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>r,toc:()=>p});var o=n(7462),t=(n(7294),n(3905));const l={sidebar_position:5},i="Creaci\xf3n y definici\xf3n de relaciones",r={unversionedId:"tutorial-basics/Modelos/modelos copy",id:"tutorial-basics/Modelos/modelos copy",title:"Creaci\xf3n y definici\xf3n de relaciones",description:"\xbfQu\xe9 es Elocuent?",source:"@site/docs/tutorial-basics/Modelos/modelos copy.mdx",sourceDirName:"tutorial-basics/Modelos",slug:"/tutorial-basics/Modelos/modelos copy",permalink:"/curso-laravel/docs/tutorial-basics/Modelos/modelos copy",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/Modelos/modelos copy.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Definici\xf3n, conceptos y propiedades",permalink:"/curso-laravel/docs/tutorial-basics/Modelos/modelos copy 2"},next:{title:"Rellenando la BB.DD",permalink:"/curso-laravel/docs/tutorial-basics/seeders"}},s={},p=[{value:"\xbfQu\xe9 es Elocuent?",id:"qu\xe9-es-elocuent",level:2},{value:"\xbfC\xf3mo crear un modelo?",id:"c\xf3mo-crear-un-modelo",level:2},{value:"Relaciones en Elocuent(Conceptos)",id:"relaciones-en-elocuentconceptos",level:2},{value:"Tinker",id:"tinker",level:2},{value:"Modelos",id:"modelos",level:2},{value:"Categor\xeda",id:"categor\xeda",level:3},{value:"Subcategor\xeda",id:"subcategor\xeda",level:3},{value:"Estado",id:"estado",level:3},{value:"Foto",id:"foto",level:3},{value:"Crear modelo",id:"crear-modelo",level:4},{value:"Campos de la tabla",id:"campos-de-la-tabla",level:4},{value:"Relaciones",id:"relaciones",level:4},{value:"Asignaci\xf3n masiva",id:"asignaci\xf3n-masiva",level:4},{value:"Provincia",id:"provincia",level:3},{value:"Crear modelo",id:"crear-modelo-1",level:4},{value:"Campos de la tabla",id:"campos-de-la-tabla-1",level:4},{value:"Asignaci\xf3n masiva",id:"asignaci\xf3n-masiva-1",level:4},{value:"Anuncio",id:"anuncio",level:3},{value:"Crear modelo",id:"crear-modelo-2",level:4},{value:"Campos de la tabla",id:"campos-de-la-tabla-2",level:4},{value:"Relaciones",id:"relaciones-1",level:4},{value:"Campos de la tabla",id:"campos-de-la-tabla-3",level:4},{value:"Relaciones",id:"relaciones-2",level:4},{value:"Tag",id:"tag",level:3},{value:"Crear modelo",id:"crear-modelo-3",level:4},{value:"Campos de la tabla",id:"campos-de-la-tabla-4",level:4},{value:"Relaciones",id:"relaciones-3",level:4}],c={toc:p},d="wrapper";function u(e){let{components:a,...n}=e;return(0,t.kt)(d,(0,o.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"creaci\xf3n-y-definici\xf3n-de-relaciones"},"Creaci\xf3n y definici\xf3n de relaciones"),(0,t.kt)("h2",{id:"qu\xe9-es-elocuent"},"\xbfQu\xe9 es Elocuent?"),(0,t.kt)("p",null,"Eloquent es el ORM (Object-Relational Mapping) integrado en Laravel, que permite trabajar con las bases de datos de manera objetual. Es decir, Eloquent permite interactuar con las tablas de la base de datos a trav\xe9s de modelos en lugar de escribir consultas SQL manualmente. Cada modelo de Eloquent representa una tabla de la base de datos y proporciona m\xe9todos para interactuar con la informaci\xf3n almacenada en la tabla. Con Eloquent, se pueden realizar operaciones comunes de CRUD (Crear, Leer, Actualizar y Borrar) de manera f\xe1cil y sencilla."),(0,t.kt)("admonition",{title:"CRUD con Eloquent",type:"tip"},(0,t.kt)("p",{parentName:"admonition"},'CRUD es un acr\xf3nimo que significa "Crear, Leer, Actualizar y Eliminar" (Create, Read, Update, Delete en ingl\xe9s) y se refiere a las cuatro operaciones b\xe1sicas que se realizan sobre los datos en una aplicaci\xf3n web.'),(0,t.kt)("p",{parentName:"admonition"},'Para implementar un CRUD utilizando Eloquent, primero debes definir el modelo correspondiente que represente la tabla de la base de datos que deseas manipular. Por ejemplo, si tienes una tabla de "Usuarios", debes crear un modelo "User" que represente a los registros de esa tabla.'),(0,t.kt)("p",{parentName:"admonition"},"Una vez que tengas tu modelo, puedes utilizar los m\xe9todos de Eloquent para realizar las operaciones CRUD sobre la tabla. A continuaci\xf3n te presento algunos ejemplos:"),(0,t.kt)("ol",{parentName:"admonition"},(0,t.kt)("li",{parentName:"ol"},"Crear un nuevo registro en la tabla:")),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre"},"$user = new User;\n$user->name = 'John Doe';\n$user->email = 'john@example.com';\n$user->save();\n")),(0,t.kt)("ol",{parentName:"admonition",start:2},(0,t.kt)("li",{parentName:"ol"},"Leer los registros de la tabla:")),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre"},"// Obtener todos los registros\n$users = User::all();\n\n// Obtener un registro por su id\n$user = User::find(1);\n")),(0,t.kt)("ol",{parentName:"admonition",start:3},(0,t.kt)("li",{parentName:"ol"},"Actualizar un registro existente en la tabla:")),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre"},"$user = User::find(1);\n$user->name = 'Jane Doe';\n$user->save();\n")),(0,t.kt)("ol",{parentName:"admonition",start:4},(0,t.kt)("li",{parentName:"ol"},"Eliminar un registro existente en la tabla:")),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre"},"$user = User::find(1);\n$user->delete();\n")),(0,t.kt)("p",{parentName:"admonition"},"Adem\xe1s de estos m\xe9todos b\xe1sicos, Eloquent proporciona otros m\xe9todos \xfatiles para realizar operaciones CRUD, como ",(0,t.kt)("inlineCode",{parentName:"p"},"create()"),", ",(0,t.kt)("inlineCode",{parentName:"p"},"update()"),", ",(0,t.kt)("inlineCode",{parentName:"p"},"where()"),", ",(0,t.kt)("inlineCode",{parentName:"p"},"orderBy()"),", ",(0,t.kt)("inlineCode",{parentName:"p"},"paginate()"),", entre otros. "),(0,t.kt)("p",{parentName:"admonition"},"Por ejemplo, el m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"create()")," te permite crear un nuevo registro en la tabla y guardarlo en una sola l\xednea de c\xf3digo:"),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre"},"$user = User::create([\n    'name' => 'John Doe',\n    'email' => 'john@example.com',\n]);\n"))),(0,t.kt)("p",null,"No se preocupe si de momento no entiende estos comandos los iremos viendo a medida que vallamos realizando este proyecto.\nPara m\xe1s informaci\xf3n consulte la ",(0,t.kt)("a",{parentName:"p",href:"https://laravel.com/docs/9.x/readme"},"documentaci\xf3n oficial")),(0,t.kt)("h2",{id:"c\xf3mo-crear-un-modelo"},"\xbfC\xf3mo crear un modelo?"),(0,t.kt)("p",null,"Para crear un modelo en Laravel, se puede utilizar el comando de Artisan en la terminal:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:model NombreDelModelo\n")),(0,t.kt)("p",null,"Este comando crear\xe1 un archivo en la carpeta app con el nombre especificado. A continuaci\xf3n, se puede agregar la l\xf3gica y atributos del modelo en este archivo."),(0,t.kt)("p",null,"Por ejemplo, si queremos crear un modelo para una tabla de productos, podemos ejecutar el siguiente comando:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:model Producto\n")),(0,t.kt)("p",null,"Este comando crear\xe1 un archivo Producto.php en la carpeta app con la siguiente estructura b\xe1sica:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nnamespace App;\n\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Producto extends Model\n{\n    //\n}\n")),(0,t.kt)("p",null,"Despu\xe9s de crear el modelo, se pueden agregar los atributos y m\xe9todos necesarios para interactuar con la tabla correspondiente en la base de datos.\xe7\xe7"),(0,t.kt)("h2",{id:"relaciones-en-elocuentconceptos"},"Relaciones en Elocuent(Conceptos)"),(0,t.kt)("admonition",{title:"Uno a uno",type:"tip"},(0,t.kt)("p",{parentName:"admonition"},'En Laravel, una relaci\xf3n "uno a uno" significa que un registro de una tabla est\xe1 asociado con exactamente un registro en otra tabla. Por ejemplo, un usuario puede tener un solo perfil, y un perfil puede ser de un solo usuario.'),(0,t.kt)("p",{parentName:"admonition"},'Para definir una relaci\xf3n "uno a uno" en Laravel, primero debes crear los modelos para las tablas implicadas en la relaci\xf3n. Luego, debes usar el m\xe9todo hasOne en el modelo que representa la tabla con la clave for\xe1nea y el m\xe9todo belongsTo en el modelo que representa la tabla principal.'),(0,t.kt)("p",{parentName:"admonition"},'Aqu\xed hay un ejemplo de c\xf3mo crear una relaci\xf3n "uno a uno" entre las tablas de usuarios y perfiles:'),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre",className:"language-js"},"Copy code\n// Archivo User.php\nclass User extends Model\n{\n    public function profile()\n    {\n        return $this->hasOne('App\\Profile');\n    }\n}\n\n// Archivo Profile.php\nclass Profile extends Model\n{\n    public function user()\n    {\n        return $this->belongsTo('App\\User');\n    }\n}\n")),(0,t.kt)("p",{parentName:"admonition"},"Luego, puedes acceder a la informaci\xf3n del perfil de un usuario de la siguiente manera:"),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre",className:"language-js"},"$user = User::find(1);\n$profile = $user->profile;\n")),(0,t.kt)("p",{parentName:"admonition"},"Esto te permitir\xe1 acceder a los atributos del perfil asociado con un usuario determinado.")),(0,t.kt)("admonition",{title:"Uno a muchos",type:"tip"},(0,t.kt)("p",{parentName:"admonition"},'En Laravel Eloquent, una relaci\xf3n de uno a muchos se establece en un modelo mediante el uso del m\xe9todo "hasMany".'),(0,t.kt)("p",{parentName:"admonition"},'Por ejemplo, si tienes un modelo "User" y un modelo "Order", y cada usuario puede tener muchos pedidos, la relaci\xf3n ser\xeda:'),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="Relaci\xf3n uno a muchos"',title:'"Relaci\xf3n',uno:!0,a:!0,'muchos"':!0},"class User extends Model\n{\n    public function orders()\n    {\n        return $this->hasMany(Order::class);\n    }\n}\n")),(0,t.kt)("p",{parentName:"admonition"},"Entonces, puedes acceder a los pedidos de un usuario de la siguiente manera:"),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre",className:"language-js"},"$user = User::find(1);\n$orders = $user->orders;\n")),(0,t.kt)("p",{parentName:"admonition"},"Tambi\xe9n puedes personalizar la clave for\xe1nea en la relaci\xf3n, por ejemplo:"),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre",className:"language-js"},"class Order extends Model\n{\n    public function user()\n    {\n        return $this->belongsTo(User::class, 'user_id');\n    }\n}\n")),(0,t.kt)("p",{parentName:"admonition"},'Esto significa que Eloquent buscar\xe1 una columna "user_id" en la tabla de "orders" para hacer la relaci\xf3n con la tabla de "users".')),(0,t.kt)("admonition",{title:"Muchos a muchos",type:"tip"},(0,t.kt)("p",{parentName:"admonition"},'En Laravel Eloquent, una relaci\xf3n de muchos a muchos se establece mediante el uso del m\xe9todo "belongsToMany".'),(0,t.kt)("p",{parentName:"admonition"},'Por ejemplo, si tienes un modelo "User" y un modelo "Role", y cada usuario puede tener varios roles y cada rol puede ser asignado a varios usuarios, la relaci\xf3n ser\xeda:'),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre",className:"language-js"},"class User extends Model\n{\n    public function roles()\n    {\n        return $this->belongsToMany(Role::class);\n    }\n}\n")),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre",className:"language-js"},"class Role extends Model\n{\n    public function users()\n    {\n        return $this->belongsToMany(User::class);\n    }\n}\n")),(0,t.kt)("p",{parentName:"admonition"},"Entonces, puedes acceder a los roles de un usuario de la siguiente manera:"),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre",className:"language-js"},"$user = User::find(1);\n$roles = $user->roles;\n")),(0,t.kt)("p",{parentName:"admonition"},"Y puedes acceder a los usuarios de un rol de la siguiente manera:"),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"$role = Role::find(1);\n$users = $role->users;\n")),(0,t.kt)("p",{parentName:"admonition"},'Por defecto, Eloquent buscar\xe1 una tabla intermedia con nombres en plural en orden alfab\xe9tico de las dos tablas relacionadas, por ejemplo, "role_user". Sin embargo, puedes especificar un nombre personalizado para la tabla intermedia utilizando el segundo argumento en el m\xe9todo "belongsToMany", por ejemplo:'),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre",className:"language-js"},"return $this->belongsToMany(Role::class, 'user_roles');\n"))),(0,t.kt)("admonition",{title:"Uno a muchos polim\xf3rfica",type:"tip"},(0,t.kt)("p",{parentName:"admonition"},"\xa1Por supuesto! Aqu\xed te dejo una redacci\xf3n sobre las relaciones uno a muchos polim\xf3rficas en Eloquent:"),(0,t.kt)("p",{parentName:"admonition"},'En Eloquent, una relaci\xf3n uno a muchos polim\xf3rfica permite que un modelo tenga una relaci\xf3n "uno a muchos" con varios modelos diferentes. Esto es \xfatil cuando quieres tener una \xfanica tabla de relaci\xf3n para varias entidades diferentes en lugar de tener tablas separadas para cada relaci\xf3n.'),(0,t.kt)("p",{parentName:"admonition"},"Para establecer una relaci\xf3n uno a muchos polim\xf3rfica, debes utilizar los m\xe9todos ",(0,t.kt)("inlineCode",{parentName:"p"},"morphTo()")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"morphMany()")," en tus modelos. El m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"morphTo()"),' se utiliza en el modelo que puede tener varias relaciones "uno a muchos", mientras que el m\xe9todo ',(0,t.kt)("inlineCode",{parentName:"p"},"morphMany()"),' se utiliza en los modelos que pueden tener una relaci\xf3n "muchos a uno".'),(0,t.kt)("p",{parentName:"admonition"},"Por ejemplo, supongamos que tienes un modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Comment")," y varios modelos diferentes que pueden ser comentados, como ",(0,t.kt)("inlineCode",{parentName:"p"},"Post")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"Video"),". Para establecer una relaci\xf3n uno a muchos polim\xf3rfica, puedes agregar el siguiente m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"comments()")," al modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Post")," y al modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Video"),":"),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre"},"public function comments()\n{\n    return $this->morphMany('App\\Models\\Comment', 'commentable');\n}\n")),(0,t.kt)("p",{parentName:"admonition"},"Este m\xe9todo indica que el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Post")," o ",(0,t.kt)("inlineCode",{parentName:"p"},"Video")," puede tener muchos comentarios a trav\xe9s de la relaci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"commentable"),"."),(0,t.kt)("p",{parentName:"admonition"},"A continuaci\xf3n, en el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Comment"),", debes agregar el siguiente m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"commentable()")," para establecer la relaci\xf3n inversa:"),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre"},"public function commentable()\n{\n    return $this->morphTo();\n}\n")),(0,t.kt)("p",{parentName:"admonition"},"Este m\xe9todo indica que el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Comment"),' puede pertenecer a cualquier modelo que tenga una relaci\xf3n "uno a muchos" polim\xf3rfica a trav\xe9s del campo ',(0,t.kt)("inlineCode",{parentName:"p"},"commentable_id")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"commentable_type"),"."),(0,t.kt)("p",{parentName:"admonition"},"Ahora puedes acceder a los comentarios de un ",(0,t.kt)("inlineCode",{parentName:"p"},"Post")," o un ",(0,t.kt)("inlineCode",{parentName:"p"},"Video")," utilizando el m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"comments()")," y puedes acceder al modelo al que pertenece un comentario utilizando el m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"commentable()"),". Por ejemplo:"),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre"},"$post = Post::find(1);\n$comments = $post->comments; // Obtener todos los comentarios del post\n$comment = Comment::find(1);\n$commentable = $comment->commentable; // Obtener el modelo (Post o Video) al que pertenece el comentario\n")),(0,t.kt)("p",{parentName:"admonition"},'La relaci\xf3n uno a muchos polim\xf3rfica en Eloquent permite que un modelo tenga varias relaciones "uno a muchos" con diferentes modelos, lo que puede ser \xfatil para simplificar la estructura de la base de datos y hacer que el c\xf3digo sea m\xe1s f\xe1cil de mantener.')),(0,t.kt)("admonition",{title:"Muchos a muchos polim\xf3rfica",type:"tip"},(0,t.kt)("p",{parentName:"admonition"},"\xa1Claro! Aqu\xed te dejo una explicaci\xf3n sobre la relaci\xf3n muchos a muchos polim\xf3rfica en Eloquent:"),(0,t.kt)("p",{parentName:"admonition"},'En Eloquent, una relaci\xf3n muchos a muchos polim\xf3rfica te permite establecer una relaci\xf3n "muchos a muchos" entre varios modelos diferentes a trav\xe9s de una \xfanica tabla de relaci\xf3n polim\xf3rfica. Esto es \xfatil cuando tienes varias entidades diferentes que pueden tener muchas instancias de otra entidad y deseas evitar la creaci\xf3n de m\xfaltiples tablas de relaci\xf3n.'),(0,t.kt)("p",{parentName:"admonition"},"Para establecer una relaci\xf3n muchos a muchos polim\xf3rfica, debes utilizar los m\xe9todos ",(0,t.kt)("inlineCode",{parentName:"p"},"morphToMany()")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"morphedByMany()")," en tus modelos. El m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"morphToMany()")," se utiliza en el modelo que puede tener muchas instancias de otra entidad, mientras que el m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"morphedByMany()")," se utiliza en el modelo que puede ser utilizado por muchas instancias de otros modelos."),(0,t.kt)("p",{parentName:"admonition"},"Por ejemplo, supongamos que tienes un modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Tag")," y varios modelos diferentes que pueden tener muchas etiquetas, como ",(0,t.kt)("inlineCode",{parentName:"p"},"Post")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"Video"),". Para establecer una relaci\xf3n muchos a muchos polim\xf3rfica, puedes agregar el siguiente m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"tags()")," al modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Post")," y al modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Video"),":"),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre"},"public function tags()\n{\n    return $this->morphToMany('App\\Models\\Tag', 'taggable');\n}\n")),(0,t.kt)("p",{parentName:"admonition"},"Este m\xe9todo indica que el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Post")," o ",(0,t.kt)("inlineCode",{parentName:"p"},"Video")," puede tener muchas etiquetas a trav\xe9s de la relaci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"taggable"),"."),(0,t.kt)("p",{parentName:"admonition"},"A continuaci\xf3n, en el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Tag"),", debes agregar el siguiente m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"taggable()")," para establecer la relaci\xf3n inversa:"),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre"},"public function taggable()\n{\n    return $this->morphedByMany('App\\Models\\Post', 'taggable');\n}\n")),(0,t.kt)("p",{parentName:"admonition"},"Este m\xe9todo indica que el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Tag")," puede pertenecer a cualquier modelo que tenga una relaci\xf3n muchos a muchos polim\xf3rfica a trav\xe9s de la tabla de relaci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"taggables")," y la columna ",(0,t.kt)("inlineCode",{parentName:"p"},"taggable_id")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"taggable_type"),"."),(0,t.kt)("p",{parentName:"admonition"},"Ahora puedes acceder a las etiquetas de un ",(0,t.kt)("inlineCode",{parentName:"p"},"Post")," o un ",(0,t.kt)("inlineCode",{parentName:"p"},"Video")," utilizando el m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"tags()")," y puedes acceder a los modelos que tienen una etiqueta espec\xedfica utilizando el m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"taggable()"),". Por ejemplo:"),(0,t.kt)("pre",{parentName:"admonition"},(0,t.kt)("code",{parentName:"pre"},"$post = Post::find(1);\n$tags = $post->tags; // Obtener todas las etiquetas del post\n$tag = Tag::find(1);\n$taggable = $tag->taggable; // Obtener todos los modelos (Post o Video) que tienen la etiqueta\n")),(0,t.kt)("p",{parentName:"admonition"},'En conclusi\xf3n, la relaci\xf3n muchos a muchos polim\xf3rfica en Eloquent te permite establecer una relaci\xf3n "muchos a muchos" entre varios modelos diferentes a trav\xe9s de una \xfanica tabla de relaci\xf3n polim\xf3rfica, lo que puede ser \xfatil para simplificar la estructura de la base de datos y hacer que el c\xf3digo sea m\xe1s f\xe1cil de mantener.')),(0,t.kt)("h2",{id:"tinker"},"Tinker"),(0,t.kt)("p",null,"Tinker es una herramienta de ",(0,t.kt)("strong",{parentName:"p"},"REPL (Read-Eval-Print Loop)")," de Laravel que te permite interactuar con tu aplicaci\xf3n de Laravel desde la consola. Con Tinker, puedes ejecutar c\xf3digo PHP, consultar y modificar la informaci\xf3n en la base de datos, y ejecutar otros comandos relacionados con Laravel."),(0,t.kt)("p",null,"Para usar ",(0,t.kt)("strong",{parentName:"p"},"Tinker"),", abre la consola en tu proyecto de Laravel y ejecuta el comando php artisan tinker. Una vez que se abra la sesi\xf3n de Tinker, puedes escribir cualquier c\xf3digo PHP y ver los resultados en tiempo real. Por ejemplo, puedes consultar informaci\xf3n de la base de datos, crear nuevos registros y modificar registros existentes."),(0,t.kt)("p",null,"Aqu\xed hay algunos ejemplos de lo que puedes hacer con Tinker:"),(0,t.kt)("p",null,"Consultar informaci\xf3n de una tabla:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},">>> App\\Models\\Producto::all()\n")),(0,t.kt)("p",null,"Crear un nuevo registro:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'>>> $producto = new App\\Models\\Producto;\n>>> $producto->nombre = "Producto 1";\n>>> $producto->save()\n')),(0,t.kt)("p",null,"Modificar un registro existente:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},'>>> $producto = App\\Models\\Producto::find(1);\n>>> $producto->nombre = "Producto actualizado";\n>>> $producto->save()\n')),(0,t.kt)("p",null,"Tinker es una herramienta muy \xfatil para probar c\xf3digo r\xe1pidamente y ver los resultados sin tener que recargar la p\xe1gina o escribir c\xf3digo adicional en tu aplicaci\xf3n de Laravel. \xa1Disfruta!"),(0,t.kt)("h2",{id:"modelos"},"Modelos"),(0,t.kt)("h3",{id:"categor\xeda"},"Categor\xeda"),(0,t.kt)("p",null,"Ejecute el siguiente comando en su terminal:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:model Categoria\n")),(0,t.kt)("admonition",{title:"Importante",type:"tip"},(0,t.kt)("p",{parentName:"admonition"},"El nombre del modelo debe empezar en may\xfascula y estar en singular, pues Eloquent va a buscar la tabla correspondiente al modelo a\xf1adiendo una s al final.\nEn este caso al modelo Categoria le corresponde la tabla categorias. M\xe1s adelante cuando llegue el caso estudiaremos como cambiar este comportamiento.")),(0,t.kt)("p",null,"Una vez ejecutado el comando edite el siguiente fichero:\n",(0,t.kt)("strong",{parentName:"p"},"app\\Models\\Categoria.php")),(0,t.kt)("p",null,"Sustituye el contenido por el siguiente c\xf3digo PHP:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="app\\Models\\Categoria.php"',title:'"app\\Models\\Categoria.php"'},"<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Categoria extends Model\n{\n    use HasFactory;\n    protected $fillable = ['nombre','descripcion'];\n    public function subcategorias(){\n        return $this->hasMany('App\\Models\\Subcategoria');\n\n    }\n}\n")),(0,t.kt)("p",null,"En el ejemplo anterior se crea un modelo en Laravel llamado ",(0,t.kt)("strong",{parentName:"p"},'"Categoria"'),' que representa una tabla de categor\xedas en la base de datos. Este modelo es una clase que extiende de la clase "Model" de Eloquent, lo que significa que tiene todas las funcionalidades y propiedades necesarias para interactuar con la tabla ',(0,t.kt)("strong",{parentName:"p"},'"categor\xedas"')," en la base de datos."),(0,t.kt)("p",null,"La propiedad ",(0,t.kt)("strong",{parentName:"p"},'"fillable"'),' especifica los campos que pueden ser rellenados por asignaci\xf3n masiva, es decir, aquellos campos que pueden ser modificados a trav\xe9s de un array o objeto. En este caso, los campos "nombre" y ',(0,t.kt)("strong",{parentName:"p"},'"descripcion"')," son los \xfanicos que pueden ser modificados."),(0,t.kt)("p",null,"El m\xe9todo ","*",(0,t.kt)("strong",{parentName:"p"},"*",'subcategorias"'),' define una relaci\xf3n de uno a muchos con la tabla "subcategor\xedas". Esta relaci\xf3n significa que una categor\xeda puede tener muchas subcategor\xedas, y que cada subcategor\xeda pertenece a una sola categor\xeda. La relaci\xf3n se define usando el m\xe9todo "hasMany", que indica que la clase "Categoria" tiene muchas subcategor\xedas. El argumento de "hasMany" es una cadena con el nombre de la clase ',(0,t.kt)("strong",{parentName:"p"},'"Subcategoria"'),"."),(0,t.kt)("p",null,"Esta relaci\xf3n permite acceder a las subcategor\xedas de una categor\xeda dada usando el m\xe9todo ",(0,t.kt)("strong",{parentName:"p"},'"subcategorias"'),", por ejemplo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-js"},"$categoria = App\\Models\\Categoria::find(1);\n\nforeach ($categoria->subcategorias as $subcategoria) {\n    echo $subcategoria->nombre;\n}\n")),(0,t.kt)("p",{align:"center"},(0,t.kt)("img",{src:"/assets/images/categoria.png",alt:"Descripci\xf3n de la imagen"})),"Este c\xf3digo busca una categor\xeda con ID 1 y luego imprime el nombre de todas sus subcategor\xedas.",(0,t.kt)("h3",{id:"subcategor\xeda"},"Subcategor\xeda"),(0,t.kt)("p",null,"Ejecute el siguiente comando en su terminal:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:model Subcategoria\n")),(0,t.kt)("p",null,"Una vez ejecutado el comando, dir\xedjase a la carpeta ",(0,t.kt)("strong",{parentName:"p"},"App/Models")," y edite el fichero ",(0,t.kt)("strong",{parentName:"p"},'"Subcategoria"'),". Substituya el c\xf3digo generado por el siguiente c\xf3digo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="app\\Models\\Subcategoria.php"',title:'"app\\Models\\Subcategoria.php"'},"<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Subcategoria extends Model\n{\n    use HasFactory;\n\n    protected $fillable = [\n        'nombre',\n        'descripcion',\n        'categoria_id'\n    ];\n\n    public function categoria(){\n        return $this->belongsTo('App\\Models\\Categoria');\n    }\n\n    public function anuncios(){\n        return $this->hasMany('App\\Models\\Anuncio');\n    }\n}\n")),(0,t.kt)("p",null,"El modelo utiliza la funci\xf3n ",(0,t.kt)("strong",{parentName:"p"},'"HasFactory"')," que permite crear f\xe1bricas de objetos para probar y realizar pruebas en el modelo."),(0,t.kt)("p",null,'La propiedad "$fillable" define los campos que se pueden asignar masivamente en la base de datos y est\xe1 compuesta por los campos ',(0,t.kt)("strong",{parentName:"p"},'"nombre"'),", ",(0,t.kt)("strong",{parentName:"p"},'"descripci\xf3n"')," y ",(0,t.kt)("strong",{parentName:"p"},'"categoria_id"'),"."),(0,t.kt)("p",null,'La funci\xf3n "categoria()" es una relaci\xf3n ',(0,t.kt)("strong",{parentName:"p"},'"belongsTo"'),' que indica que una subcategor\xeda pertenece a una sola categoria. La relaci\xf3n se establece con el modelo "Categoria" de la aplicaci\xf3n.'),(0,t.kt)("p",null,"La funci\xf3n ",(0,t.kt)("strong",{parentName:"p"},'"anuncios()"')," es una relaci\xf3n ",(0,t.kt)("strong",{parentName:"p"},'"hasMany"')," que indica que una subcategor\xeda puede tener varios anuncios asociados a ella. La relaci\xf3n se establece con el modelo ",(0,t.kt)("em",{parentName:"p"},'"Anuncio"')," de la aplicaci\xf3n."),(0,t.kt)("h3",{id:"estado"},"Estado"),(0,t.kt)("p",null,'Claro, aqu\xed tienes una documentaci\xf3n similar para el modelo "Estado":'),(0,t.kt)("p",null,"Ejecute el siguiente comando en su terminal:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:model Estado\n")),(0,t.kt)("p",null,"Una vez ejecutado el comando, dir\xedjase a la carpeta ",(0,t.kt)("strong",{parentName:"p"},"App/Models")," y edite el fichero ",(0,t.kt)("strong",{parentName:"p"},'"Estado"'),". Substituya el c\xf3digo generado por el siguiente c\xf3digo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php",metastring:'title="app\\Models\\Estado.php"',title:'"app\\Models\\Estado.php"'},"<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Estado extends Model\n{\n    use HasFactory;\n\n    protected $fillable = [\n        'nombre'\n    ];\n\n    public function anuncios(){\n        return $this->hasMany('App\\Models\\Anuncio');\n    }\n}\n")),(0,t.kt)("p",null,"El modelo utiliza la funci\xf3n ",(0,t.kt)("strong",{parentName:"p"},'"HasFactory"')," que permite crear f\xe1bricas de objetos para probar y realizar pruebas en el modelo."),(0,t.kt)("p",null,'La propiedad "$fillable" define los campos que se pueden asignar masivamente en la base de datos y est\xe1 compuesta por el campo ',(0,t.kt)("strong",{parentName:"p"},'"nombre"'),"."),(0,t.kt)("p",null,"La funci\xf3n ",(0,t.kt)("strong",{parentName:"p"},'"anuncios()"')," es una relaci\xf3n ",(0,t.kt)("strong",{parentName:"p"},'"hasMany"'),' que indica que un estado puede tener varios anuncios asociados a \xe9l. La relaci\xf3n se establece con el modelo "Anuncio" de la aplicaci\xf3n.'),(0,t.kt)("h3",{id:"foto"},"Foto"),(0,t.kt)("p",null,"El modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Foto")," representa las im\xe1genes asociadas a un anuncio en la aplicaci\xf3n. Cada registro en la tabla ",(0,t.kt)("inlineCode",{parentName:"p"},"fotos")," representa una imagen subida por un usuario."),(0,t.kt)("h4",{id:"crear-modelo"},"Crear modelo"),(0,t.kt)("p",null,"Para crear el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Fotos")," en Laravel, ejecutamos el siguiente comando en la terminal:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:model Foto\n")),(0,t.kt)("p",null,"Esto crear\xe1 un archivo ",(0,t.kt)("inlineCode",{parentName:"p"},"Foto.php")," en la carpeta ",(0,t.kt)("inlineCode",{parentName:"p"},"app/Models")," de nuestro proyecto."),(0,t.kt)("p",null,"Introduzca el siguiente c\xf3digo para el modelo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Foto extends Model\n{\n    use HasFactory;\n\n    protected $fillable = ['path', 'anuncio_id'];\n\n    public function anuncio()\n    {\n        return $this->belongsTo(Anuncio::class);\n    }\n}\n")),(0,t.kt)("h4",{id:"campos-de-la-tabla"},"Campos de la tabla"),(0,t.kt)("p",null,"La tabla ",(0,t.kt)("inlineCode",{parentName:"p"},"fotos")," tiene los siguientes campos:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"id"),": Identificador \xfanico de la foto."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"path"),": Ruta de la imagen en el servidor."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"anuncio_id"),": Identificador del anuncio al que est\xe1 asociada la foto."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"created_at"),": Fecha de creaci\xf3n del registro."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"updated_at"),": Fecha de \xfaltima actualizaci\xf3n del registro.")),(0,t.kt)("h4",{id:"relaciones"},"Relaciones"),(0,t.kt)("p",null,"El modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Fotos")," tiene una relaci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"belongsTo")," con el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Anuncio"),", lo que significa que una foto pertenece a un solo anuncio. Para establecer esta relaci\xf3n, en el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Fotos")," debemos incluir el siguiente m\xe9todo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"public function anuncio()\n{\n    return $this->belongsTo(Anuncio::class);\n}\n")),(0,t.kt)("p",null,"Adem\xe1s, el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Anuncio")," tiene una relaci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"hasMany")," con el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Fotos"),", lo que significa que un anuncio puede tener varias fotos asociadas a \xe9l. Para establecer esta relaci\xf3n, en el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Anuncio")," debemos incluir el siguiente m\xe9todo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"public function fotos()\n{\n    return $this->hasMany(Fotos::class);\n}\n")),(0,t.kt)("h4",{id:"asignaci\xf3n-masiva"},"Asignaci\xf3n masiva"),(0,t.kt)("p",null,"El modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Fotos")," tiene habilitada la asignaci\xf3n masiva para el campo ",(0,t.kt)("inlineCode",{parentName:"p"},"path")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"anuncio_id"),". Esto significa que podemos asignar estos campos en masa usando el m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"create")," de Eloquent. Para habilitar la asignaci\xf3n masiva, en el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Fotos")," debemos incluir la propiedad ",(0,t.kt)("inlineCode",{parentName:"p"},"$fillable")," con los campos permitidos:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"protected $fillable = ['path', 'anuncio_id'];\n")),(0,t.kt)("h3",{id:"provincia"},"Provincia"),(0,t.kt)("p",null,"El modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Provincia")," representa una provincia dentro del territorio nacional. Cada registro en la tabla ",(0,t.kt)("inlineCode",{parentName:"p"},"provincias")," representa una provincia y contiene informaci\xf3n como su c\xf3digo y nombre."),(0,t.kt)("h4",{id:"crear-modelo-1"},"Crear modelo"),(0,t.kt)("p",null,"Para crear el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Provincia")," en Laravel, ejecutamos el siguiente comando en la terminal:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:model Provincia\n")),(0,t.kt)("p",null,"Esto crear\xe1 un archivo ",(0,t.kt)("inlineCode",{parentName:"p"},"Provincia.php")," en la carpeta ",(0,t.kt)("inlineCode",{parentName:"p"},"app/Models")," de nuestro proyecto."),(0,t.kt)("p",null,"Introduzca el siguiente c\xf3digo para el modelo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Provincia extends Model\n{\n    use HasFactory;\n\n    protected $primaryKey = 'codigo';\n\n    public $incrementing = false;\n\n    protected $fillable = ['codigo', 'nombre'];\n\n}\n")),(0,t.kt)("h4",{id:"campos-de-la-tabla-1"},"Campos de la tabla"),(0,t.kt)("p",null,"La tabla ",(0,t.kt)("inlineCode",{parentName:"p"},"provincias")," tiene los siguientes campos:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"codigo"),": C\xf3digo \xfanico de la provincia, conformado por dos caracteres."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"nombre"),": Nombre completo de la provincia."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"created_at"),": Fecha de creaci\xf3n del registro."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"updated_at"),": Fecha de \xfaltima actualizaci\xf3n del registro.")),(0,t.kt)("h4",{id:"asignaci\xf3n-masiva-1"},"Asignaci\xf3n masiva"),(0,t.kt)("p",null,"El modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Provincia")," tiene habilitada la asignaci\xf3n masiva para los campos ",(0,t.kt)("inlineCode",{parentName:"p"},"codigo")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"nombre"),". Esto significa que podemos asignar estos campos en masa usando el m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"create")," de Eloquent. Para habilitar la asignaci\xf3n masiva, en el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Provincia")," debemos incluir la propiedad ",(0,t.kt)("inlineCode",{parentName:"p"},"$fillable")," con los campos permitidos:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"protected $fillable = ['codigo', 'nombre'];\n")),(0,t.kt)("p",null,"Adem\xe1s, debemos especificar que el campo ",(0,t.kt)("inlineCode",{parentName:"p"},"codigo")," es la clave primaria de la tabla y que no es un campo autoincremental, incluyendo las siguientes propiedades en el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Provincia"),":"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"protected $primaryKey = 'codigo';\n\npublic $incrementing = false;\n")),(0,t.kt)("h3",{id:"anuncio"},"Anuncio"),(0,t.kt)("p",null,"El modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Anuncio")," representa un anuncio publicado por un usuario en la aplicaci\xf3n."),(0,t.kt)("h4",{id:"crear-modelo-2"},"Crear modelo"),(0,t.kt)("p",null,"Para crear el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Anuncio")," en Laravel, ejecutamos el siguiente comando en la terminal:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:model Anuncio\n")),(0,t.kt)("p",null,"Esto crear\xe1 un archivo ",(0,t.kt)("inlineCode",{parentName:"p"},"Anuncio.php")," en la carpeta ",(0,t.kt)("inlineCode",{parentName:"p"},"app/Models")," de nuestro proyecto."),(0,t.kt)("p",null,"Introduzca el siguiente c\xf3digo para el modelo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Anuncio extends Model\n{\n    use HasFactory;\n\n    protected $fillable = [\n        'titulo',\n        'description',\n        'imagen',\n        'precio',\n        'user_id',\n        'subcategoria_id',\n        'telefono',\n        'estado_id',\n        'provincia',\n        'cod_postal',\n    ];\n\n    public function user()\n    {\n        return $this->belongsTo(User::class);\n    }\n\n    public function subcategoria()\n    {\n        return $this->belongsTo(Subcategoria::class);\n    }\n\n    public function estado()\n    {\n        return $this->belongsTo(Estado::class);\n    }\n\n    public function fotos()\n    {\n        return $this->hasMany(Foto::class);\n    }\n\n     public function tags()\n    {\n        return $this->belongsToMany(Tag::class);\n    }\n}\n")),(0,t.kt)("h4",{id:"campos-de-la-tabla-2"},"Campos de la tabla"),(0,t.kt)("p",null,"La tabla ",(0,t.kt)("inlineCode",{parentName:"p"},"anuncios")," tiene los siguientes campos:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"id"),": Identificador \xfanico del anuncio."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"titulo"),": T\xedtulo del anuncio."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"description"),": Descripci\xf3n del anuncio."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"imagen"),": Imagen asociada al anuncio."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"precio"),": Precio del producto o servicio anunciado."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"user_id"),": Identificador del usuario que public\xf3 el anuncio."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"subcategoria_id"),": Identificador de la subcategor\xeda a la que pertenece el anuncio."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"telefono"),": Tel\xe9fono de contacto del anunciante."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"estado_id"),": Identificador del estado en el que se encuentra el anuncio."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"provincia"),": Provincia en la que se encuentra el producto o servicio anunciado."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"cod_postal"),": C\xf3digo postal del lugar en el que se encuentra el producto o servicio anunciado."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"created_at"),": Fecha de creaci\xf3n del registro."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"updated_at"),": Fecha de \xfaltima actualizaci\xf3n del registro.")),(0,t.kt)("h4",{id:"relaciones-1"},"Relaciones"),(0,t.kt)("p",null,"El modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Anuncio")," tiene una relaci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"belongsTo")," con el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"User"),", lo que significa que un anuncio pertenece a un solo usuario. Para establecer esta relaci\xf3n, en el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Anuncio")," debemos incluir el siguiente m\xe9todo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"public function user()\n{\n    return $this->belongsTo(User::class);\n}\n")),(0,t.kt)("p",null,"Adem\xe1s, el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"User")," tiene una relaci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"hasMany")," con el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Anuncio"),", lo que significa que un usuario puede publicar varios anuncios. Para establecer esta relaci\xf3n, en el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"User")," debemos incluir el siguiente m\xe9todo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"public function anuncios()\n{\n    return $this->hasMany(Anuncio::class);\n}\n")),(0,t.kt)("p",null,"El modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Anuncio")," tiene una relaci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"belongsTo")," con el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Subcategoria"),", lo que significa que un anuncio pertenece a una sola subcategor\xeda. Para establecer esta relaci\xf3n, en el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Anuncio")," debemos incluir el siguiente m\xe9todo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"public function subcategoria()\n{\n    return $this->belongsTo(Subcategoria::class);\n}\n")),(0,t.kt)("p",null,"Una relaci\xf3n belongsTo con el modelo Estado, lo que significa que un anuncio tiene un estado asociado. Para establecer esta relaci\xf3n, en el modelo Anuncio debemos incluir el siguiente m\xe9todo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"public function estado()\n{\n    return $this->belongsTo(Estado::class);\n}\n")),(0,t.kt)("p",null,"Una relaci\xf3n belongsToMany con Tag."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"public function tags()\n    {\n        return $this->belongsToMany(Tag::class);\n    }\n```php\n\n### Poblacion\n\nEl modelo `Poblacion` representa una poblaci\xf3n en la base de datos. Cada registro en la tabla `poblaciones` representa una poblaci\xf3n \xfanica.\n\n#### Crear modelo\n\nPara crear el modelo `Poblacion` en Laravel, ejecutamos el siguiente comando en la terminal:\n\n```bash\nphp artisan make:model Poblacion\n")),(0,t.kt)("p",null,"Esto crear\xe1 un archivo ",(0,t.kt)("inlineCode",{parentName:"p"},"Poblacion.php")," en la carpeta ",(0,t.kt)("inlineCode",{parentName:"p"},"app/Models")," de nuestro proyecto."),(0,t.kt)("p",null,"Introduzca el siguiente c\xf3digo para el modelo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Poblacion extends Model\n{\n    use HasFactory;\n\n    protected $table = 'poblaciones';\n\n    protected $primaryKey = 'codigo';\n\n    public $incrementing = false;\n\n    protected $fillable = [\n        'codigo',\n        'nombre',\n        'provincia_cod',\n    ];\n\n    public function provincia()\n    {\n        return $this->belongsTo(Provincia::class);\n    }\n\n    public function anuncios()\n    {\n        return $this->hasMany(Anuncio::class, 'cod_postal', 'codigo');\n    }\n}\n")),(0,t.kt)("h4",{id:"campos-de-la-tabla-3"},"Campos de la tabla"),(0,t.kt)("p",null,"La tabla ",(0,t.kt)("inlineCode",{parentName:"p"},"poblaciones")," tiene los siguientes campos:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"codigo"),": C\xf3digo postal de la poblaci\xf3n."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"nombre"),": Nombre de la poblaci\xf3n."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"provincia_cod"),": C\xf3digo de la provincia a la que pertenece la poblaci\xf3n.")),(0,t.kt)("h4",{id:"relaciones-2"},"Relaciones"),(0,t.kt)("p",null,"El modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Poblacion")," tiene las siguientes relaciones:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"Una relaci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"belongsTo")," con el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Provincia"),", lo que significa que una poblaci\xf3n pertenece a una sola provincia. Para establecer esta relaci\xf3n, en el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Poblacion")," debemos incluir el siguiente m\xe9todo:"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-php"},"public function provincia()\n{\n    return $this->belongsTo(Provincia::class);\n}\n"))),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"Una relaci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"hasMany")," con el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Anuncio"),", lo que significa que una poblaci\xf3n puede tener muchos anuncios asociados. Para establecer esta relaci\xf3n, en el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Poblacion")," debemos incluir el siguiente m\xe9todo:"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-php"},"public function anuncios()\n{\n    return $this->hasMany(Anuncio::class, 'cod_postal', 'codigo');\n}\n")),(0,t.kt)("p",{parentName:"li"},"En esta relaci\xf3n se utiliza el m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"hasMany")," en el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Poblacion")," para indicar que una poblaci\xf3n puede tener varios anuncios. Adem\xe1s, se utiliza el m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"hasMany")," con una especificaci\xf3n adicional de los campos de clave for\xe1nea y clave principal para indicar que la relaci\xf3n se establece entre el campo ",(0,t.kt)("inlineCode",{parentName:"p"},"cod_postal")," del modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Anuncio")," y el campo ",(0,t.kt)("inlineCode",{parentName:"p"},"codigo")," del modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Poblacion"),"."),(0,t.kt)("p",{parentName:"li"},"Es importante destacar que el tercer\npar\xe1metro pasado al m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"hasMany")," es opcional y\nse utiliza s\xf3lo si los nombres de los campos en los\nmodelos no coinciden con los nombres de las claves\nfor\xe1neas y principales en las tablas de la base de datos."))),(0,t.kt)("h3",{id:"tag"},"Tag"),(0,t.kt)("p",null,"El modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Tag")," representa una etiqueta en la base de datos. Cada registro en la tabla ",(0,t.kt)("inlineCode",{parentName:"p"},"tags")," representa una etiqueta \xfanica."),(0,t.kt)("h4",{id:"crear-modelo-3"},"Crear modelo"),(0,t.kt)("p",null,"Para crear el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Tag")," en Laravel, ejecutamos el siguiente comando en la terminal:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:model Tag\n")),(0,t.kt)("p",null,"Esto crear\xe1 un archivo ",(0,t.kt)("inlineCode",{parentName:"p"},"Tag.php")," en la carpeta ",(0,t.kt)("inlineCode",{parentName:"p"},"app/Models")," de nuestro proyecto."),(0,t.kt)("p",null,"Introduzca el siguiente c\xf3digo para el modelo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass Tag extends Model\n{\n    use HasFactory;\n\n    protected $fillable = [\n        'name',\n    ];\n\n    public function anuncios()\n    {\n        return $this->belongsToMany(Anuncio::class);\n    }\n}\n")),(0,t.kt)("h4",{id:"campos-de-la-tabla-4"},"Campos de la tabla"),(0,t.kt)("p",null,"La tabla ",(0,t.kt)("inlineCode",{parentName:"p"},"tags")," tiene los siguientes campos:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"id"),": Identificador \xfanico de la etiqueta."),(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("inlineCode",{parentName:"li"},"name"),": Nombre de la etiqueta.")),(0,t.kt)("h4",{id:"relaciones-3"},"Relaciones"),(0,t.kt)("p",null,"El modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Tag")," tiene la siguiente relaci\xf3n:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},(0,t.kt)("p",{parentName:"li"},"Una relaci\xf3n ",(0,t.kt)("inlineCode",{parentName:"p"},"belongsToMany")," con el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Anuncio"),", lo que significa que una etiqueta puede estar asociada a muchos anuncios y que un anuncio puede tener muchas etiquetas asociadas. Para establecer esta relaci\xf3n, en el modelo ",(0,t.kt)("inlineCode",{parentName:"p"},"Tag")," debemos incluir el siguiente m\xe9todo:"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-php"},"public function anuncios()\n{\n    return $this->belongsToMany(Anuncio::class);\n}\n")),(0,t.kt)("p",{parentName:"li"},"En esta relaci\xf3n se utiliza el m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"belongsToMany")," para indicar que un anuncio puede tener muchas etiquetas asociadas y que una etiqueta puede estar asociada a muchos anuncios. Laravel maneja esta relaci\xf3n a trav\xe9s de una tabla pivote, que debe tener el nombre de los modelos en orden alfab\xe9tico y en plural, por lo que en este caso la tabla pivote deber\xeda ser ",(0,t.kt)("inlineCode",{parentName:"p"},"anuncio_tag"),"."),(0,t.kt)("p",{parentName:"li"},"Laravel tambi\xe9n asume que la tabla pivote tiene dos campos: ",(0,t.kt)("inlineCode",{parentName:"p"},"anuncio_id")," y ",(0,t.kt)("inlineCode",{parentName:"p"},"tag_id"),", que se utilizan como claves for\xe1neas para la relaci\xf3n. Si estos nombres no se corresponden con los nombres de las claves for\xe1neas en la tabla pivote, podemos pasarlos como segundo y tercer par\xe1metro del m\xe9todo ",(0,t.kt)("inlineCode",{parentName:"p"},"belongsToMany"),", respectivamente."))))}u.isMDXComponent=!0}}]);