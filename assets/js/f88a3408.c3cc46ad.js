"use strict";(self.webpackChunkeloquent=self.webpackChunkeloquent||[]).push([[17],{3905:(e,a,n)=>{n.d(a,{Zo:()=>d,kt:()=>g});var t=n(7294);function i(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){i(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,t,i=function(e,a){if(null==e)return{};var n,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(i[n]=e[n]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=t.createContext({}),c=function(e){var a=t.useContext(s),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},d=function(e){var a=c(e.components);return t.createElement(s.Provider,{value:a},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},p=t.forwardRef((function(e,a){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),p=i,g=u["".concat(s,".").concat(p)]||u[p]||m[p]||r;return n?t.createElement(g,o(o({ref:a},d),{},{components:n})):t.createElement(g,o({ref:a},d))}));function g(e,a){var n=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=p;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,n)}p.displayName="MDXCreateElement"},8159:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var t=n(7462),i=(n(7294),n(3905));const r={sidebar_position:3},o="Migraciones",l={unversionedId:"tutorial-basics/migraciones",id:"tutorial-basics/migraciones",title:"Migraciones",description:"\xbfQu\xe9 es una migraci\xf3n?",source:"@site/docs/tutorial-basics/03-migraciones.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/migraciones",permalink:"/curso-laravel/docs/tutorial-basics/migraciones",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/03-migraciones.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Instalaci\xf3n y configuraci\xf3n",permalink:"/curso-laravel/docs/tutorial-basics/configuracion"},next:{title:"Modelos",permalink:"/curso-laravel/docs/category/modelos"}},s={},c=[{value:"\xbfQu\xe9 es una migraci\xf3n?",id:"qu\xe9-es-una-migraci\xf3n",level:2},{value:"Modelo ER",id:"modelo-er",level:2},{value:"Creaci\xf3n de relaciones",id:"creaci\xf3n-de-relaciones",level:2},{value:"\xbfQu\xe9 es una migraci\xf3n?",id:"qu\xe9-es-una-migraci\xf3n-1",level:2},{value:"Generando migraciones en Laravel",id:"generando-migraciones-en-laravel",level:2},{value:"Definiendo las tablas de la BB.DD",id:"definiendo-las-tablas-de-la-bbdd",level:2},{value:"Tabla categor\xedas",id:"tabla-categor\xedas",level:3},{value:"Tabla subcategor\xedas",id:"tabla-subcategor\xedas",level:3},{value:"Estados",id:"estados",level:3},{value:"Provincias",id:"provincias",level:3},{value:"Anuncios",id:"anuncios",level:3},{value:"Poblaciones",id:"poblaciones",level:3},{value:"Tags",id:"tags",level:3},{value:"Anuncio_tag",id:"anuncio_tag",level:3},{value:"Fotos",id:"fotos",level:3}],d={toc:c},u="wrapper";function m(e){let{components:a,...r}=e;return(0,i.kt)(u,(0,t.Z)({},d,r,{components:a,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"migraciones"},"Migraciones"),(0,i.kt)("h2",{id:"qu\xe9-es-una-migraci\xf3n"},"\xbfQu\xe9 es una migraci\xf3n?"),(0,i.kt)("p",null,"En t\xe9rminos simples, una migraci\xf3n en Laravel es un conjunto de instrucciones que permiten a los desarrolladores crear o modificar la estructura de una base de datos en su aplicaci\xf3n web. En lugar de modificar manualmente la base de datos, los desarrolladores pueden crear archivos de migraci\xf3n que describen los cambios que deben hacerse. Estos archivos de migraci\xf3n se ejecutan autom\xe1ticamente utilizando comandos de Artisan, lo que permite a los desarrolladores actualizar la estructura de la base de datos de manera controlada y coherente con la evoluci\xf3n de la aplicaci\xf3n. En conclusi\xf3n, las migraciones son una herramienta \xfatil que permite a los desarrolladores administrar la estructura de la base de datos de manera program\xe1tica y coherente, lo que puede ahorrar tiempo y reducir errores en la gesti\xf3n de la base de datos."),(0,i.kt)("p",null,"Uno de los beneficios clave de utilizar migraciones es el control de versiones. Al utilizar archivos de migraci\xf3n, los desarrolladores pueden mantener un registro de los cambios en la estructura de la base de datos a medida que evoluciona la aplicaci\xf3n. Esto es especialmente \xfatil cuando hay varios desarrolladores trabajando en el mismo proyecto o cuando se realiza un seguimiento de diferentes versiones de la aplicaci\xf3n. Cada archivo de migraci\xf3n se puede etiquetar con un n\xfamero de versi\xf3n, lo que ayuda a los desarrolladores a realizar un seguimiento de los cambios y a asegurarse de que todos los miembros del equipo est\xe9n trabajando con la misma versi\xf3n de la base de datos."),(0,i.kt)("p",null,"Otro beneficio importante de las migraciones es que pueden ahorrar tiempo y reducir errores en la gesti\xf3n de la base de datos. En lugar de tener que modificar manualmente la base de datos cada vez que se realizan cambios en la estructura de la base de datos, los desarrolladores pueden crear archivos de migraci\xf3n que describen los cambios que deben hacerse. Estos archivos de migraci\xf3n se pueden ejecutar autom\xe1ticamente utilizando comandos de Artisan, lo que ahorra tiempo y reduce la posibilidad de errores humanos."),(0,i.kt)("p",null,'Adem\xe1s, las migraciones en Laravel tambi\xe9n son muy flexibles. Los desarrolladores pueden crear migraciones para agregar nuevas tablas, modificar columnas existentes, agregar restricciones de clave for\xe1nea, crear \xedndices, eliminar tablas y mucho m\xe1s. Cada migraci\xf3n se compone de dos m\xe9todos principales: el m\xe9todo "up" que describe los cambios que deben realizarse en la base de datos y el m\xe9todo "down" que describe c\xf3mo deshacer esos cambios.'),(0,i.kt)("admonition",{title:"C\xf3mo funcionan",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Las migraciones en Laravel funcionan de la siguiente manera:"),(0,i.kt)("ol",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Los desarrolladores crean archivos de migraci\xf3n en PHP que describen los cambios que se deben hacer en la estructura de la base de datos. Estos archivos de migraci\xf3n se almacenan en el directorio ",(0,i.kt)("inlineCode",{parentName:"p"},"database/migrations")," de la aplicaci\xf3n Laravel.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Cada archivo de migraci\xf3n se compone de dos m\xe9todos principales: el m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"p"},"up"),", que describe los cambios que deben realizarse en la base de datos, y el m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"p"},"down"),", que describe c\xf3mo deshacer esos cambios.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Cuando se ejecuta el comando ",(0,i.kt)("inlineCode",{parentName:"p"},"php artisan migrate"),", Laravel ejecuta cada archivo de migraci\xf3n que a\xfan no se ha ejecutado en la base de datos. Para hacer esto, Laravel mantiene un registro de las migraciones que ya se han ejecutado en la base de datos y compara este registro con los archivos de migraci\xf3n disponibles. Si encuentra un archivo de migraci\xf3n que a\xfan no se ha ejecutado, Laravel ejecuta el m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"p"},"up")," de ese archivo de migraci\xf3n para realizar los cambios en la base de datos.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Si es necesario deshacer una migraci\xf3n, se puede ejecutar el comando ",(0,i.kt)("inlineCode",{parentName:"p"},"php artisan migrate:rollback"),", que ejecutar\xe1 el m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"p"},"down")," de la \xfaltima migraci\xf3n que se ejecut\xf3, deshaciendo los cambios realizados en la base de datos. Si se necesita deshacer varias migraciones, se puede utilizar el comando ",(0,i.kt)("inlineCode",{parentName:"p"},"php artisan migrate:rollback --step=N"),", donde ",(0,i.kt)("inlineCode",{parentName:"p"},"N")," es el n\xfamero de migraciones que se deben deshacer.")))),(0,i.kt)("p",null,"Laravel proporciona algunas migraciones por defecto que se ejecutan al crear un nuevo proyecto con el comando ",(0,i.kt)("inlineCode",{parentName:"p"},"laravel new")," o al instalar Laravel mediante Composer. Estas migraciones por defecto se encuentran en el directorio ",(0,i.kt)("inlineCode",{parentName:"p"},"database/migrations")," del proyecto Laravel."),(0,i.kt)("p",null,"Las migraciones por defecto de Laravel son las siguientes:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"create_users_table.php"),": Esta migraci\xf3n crea la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"users")," en la base de datos. La tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"users")," contiene los campos ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"email"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"email_verified_at"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"password"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"remember_token"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"created_at")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"updated_at"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"create_password_resets_table.php"),": Esta migraci\xf3n crea la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"password_resets")," en la base de datos. La tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"password_resets")," contiene los campos ",(0,i.kt)("inlineCode",{parentName:"p"},"email"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"token")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"created_at"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"create_failed_jobs_table.php"),": Esta migraci\xf3n crea la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"failed_jobs")," en la base de datos. La tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"failed_jobs")," se utiliza para almacenar informaci\xf3n sobre trabajos fallidos en la cola de trabajos de Laravel."))),(0,i.kt)("p",null,"Todas estas migraciones est\xe1n dise\xf1adas para ser ejecutadas en orden. En otras palabras, ",(0,i.kt)("inlineCode",{parentName:"p"},"create_users_table.php")," debe ejecutarse antes que ",(0,i.kt)("inlineCode",{parentName:"p"},"create_password_resets_table.php"),", ya que la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"password_resets")," depende de la existencia de la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"users"),". "),(0,i.kt)("p",null,"Es importante destacar que estas migraciones por defecto pueden ser modificadas o eliminadas seg\xfan las necesidades del proyecto. Por ejemplo, se puede agregar campos adicionales a la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"users")," o eliminar la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"failed_jobs")," si no se va a utilizar la cola de trabajos en el proyecto. Adem\xe1s, los desarrolladores pueden crear sus propias migraciones para modificar la estructura de la base de datos de acuerdo con las necesidades espec\xedficas de la aplicaci\xf3n."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"C\xf3digo de la migraci\xf3n correspondiente a la tabla Users"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"use Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreateUsersTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->id();\n            $table->string('name');\n            $table->string('email')->unique();\n            $table->timestamp('email_verified_at')->nullable();\n            $table->string('password');\n            $table->rememberToken();\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('users');\n    }\n}\n")),(0,i.kt)("p",null,"Esta migraci\xf3n crea la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"users")," con varios campos comunes como ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"name"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"email"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"password"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"remember_token")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"timestamps"),". El m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"p"},"up()")," se utiliza para crear la tabla, mientras que el m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"p"},"down()")," se utiliza para revertir la creaci\xf3n de la tabla. "),(0,i.kt)("p",null,"Este archivo se guarda en el directorio ",(0,i.kt)("inlineCode",{parentName:"p"},"database/migrations")," y se ejecutar\xe1 cuando se ejecute el comando ",(0,i.kt)("inlineCode",{parentName:"p"},"php artisan migrate")," en la l\xednea de comandos. Si ya existe una tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"users"),", Laravel no volver\xe1 a crearla, pero si faltan campos nuevos, los agregar\xe1 seg\xfan se describen en la migraci\xf3n."),(0,i.kt)("p",null,"Este es solo un ejemplo b\xe1sico de una migraci\xf3n de tabla en Laravel. Las migraciones pueden ser mucho m\xe1s complejas y personalizadas seg\xfan las necesidades de la aplicaci\xf3n."),(0,i.kt)("h2",{id:"modelo-er"},"Modelo ER"),(0,i.kt)("p",null,"Este es el modelo entidad/relaci\xf3n de nuestra BB.DD."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Mi imagen",src:n(4969).Z,width:"946",height:"1017"})),(0,i.kt)("admonition",{title:"An\xe1lisis funcional",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"\xa1Claro! A continuaci\xf3n te describo todas las tablas y sus relaciones:"),(0,i.kt)("ol",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Users"),": Esta tabla almacena la informaci\xf3n de los usuarios que utilizan la aplicaci\xf3n, como su nombre, correo electr\xf3nico, contrase\xf1a y fecha de registro. Cada usuario tiene un identificador \xfanico (ID) que se utiliza para relacionarlos con otras tablas.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Anuncios"),": Esta tabla almacena la informaci\xf3n de los anuncios que los usuarios publican, como el t\xedtulo, la descripci\xf3n, el precio y la fecha de publicaci\xf3n. Cada anuncio tiene un ID \xfanico que se utiliza para relacionarlo con otras tablas.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Categor\xedas"),': Esta tabla almacena la informaci\xf3n de las categor\xedas de los anuncios, como "veh\xedculos", "hogar", "electr\xf3nica", etc. Cada categor\xeda tiene un ID \xfanico que se utiliza para relacionarla con los anuncios.')),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Tags"),': Esta tabla almacena la informaci\xf3n de las etiquetas que los usuarios pueden agregar a sus anuncios para describirlos con m\xe1s detalle, como "nuevo", "usado", "en buen estado", etc. Cada etiqueta tiene un ID \xfanico que se utiliza para relacionarla con los anuncios.')),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Anuncio-Tag"),": Esta tabla relaciona los anuncios con las etiquetas que se les han asignado. Debido a que un anuncio puede tener m\xfaltiples etiquetas y una etiqueta puede estar asociada con m\xfaltiples anuncios, la relaci\xf3n entre estas dos tablas es de muchos a muchos. Esta tabla tiene dos columnas, una para el ID del anuncio y otra para el ID de la etiqueta.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Estados"),": Esta tabla almacena la informaci\xf3n del estado de los art\xedculos. "))),(0,i.kt)("p",{parentName:"admonition"},"En resumen, la tabla de usuarios est\xe1 relacionada con la tabla de anuncios a trav\xe9s de una relaci\xf3n uno a muchos, la tabla de anuncios est\xe1 relacionada con la tabla de categor\xedas a trav\xe9s de una relaci\xf3n uno a muchos, la tabla de etiquetas(tagss) est\xe1 relacionada con la tabla de anuncios a trav\xe9s de una relaci\xf3n muchos a muchos, y la tabla de estados est\xe1 relacionada con la tabla anuncios a trav\xe9s de relaciones uno a muchos.")),(0,i.kt)("h2",{id:"creaci\xf3n-de-relaciones"},"Creaci\xf3n de relaciones"),(0,i.kt)("p",null,"En Laravel, puedes crear relaciones entre tablas usando migraciones. Aqu\xed hay un ejemplo de c\xf3digo que muestra c\xf3mo crear una relaci\xf3n de uno a muchos:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<?php\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Database\\Migrations\\Migration;\n\nclass CreatePostsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('posts', function (Blueprint $table) {\n            $table->id();\n            $table->string('title');\n            $table->text('body');\n            $table->unsignedInteger('user_id');\n            $table->timestambash();\n            \n            $table->foreign('user_id')\n                  ->references('id')->on('users')\n                  ->onDelete('cascade');\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('posts');\n    }\n}\n?>\n")),(0,i.kt)("admonition",{title:"Explicaci\xf3n",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"En este ejemplo, se est\xe1 creando una tabla posts con una columna user_id que hace referencia a la columna id en la tabla users. La opci\xf3n onDelete('cascade') indica que si un usuario es eliminado, sus publicaciones tambi\xe9n deben ser eliminadas."),(0,i.kt)("p",{parentName:"admonition"},"Luego de crear la migraci\xf3n, debes ejecutar el comando php artisan migrate para aplicar los cambios en la base de datos. Para m\xe1s informaci\xf3n consulte ",(0,i.kt)("a",{parentName:"p",href:"httbash://laravel.com/docs/9.x/readme"},"la documentaci\xf3 oficial"))),(0,i.kt)("h2",{id:"qu\xe9-es-una-migraci\xf3n-1"},"\xbfQu\xe9 es una migraci\xf3n?"),(0,i.kt)("p",null,"Una ",(0,i.kt)("strong",{parentName:"p"},"migraci\xf3n")," en Laravel es un archivo de PHP que describe una operaci\xf3n de base de datos, como la creaci\xf3n de una tabla o la modificaci\xf3n de una columna existente. Las migraciones permiten que los desarrolladores gestionen los cambios en la estructura de la base de datos de manera sencilla y segura, ya que todos los cambios se realizan a trav\xe9s de archivos que se pueden controlar con un sistema de control de versiones como Git."),(0,i.kt)("p",null,"Cuando se ejecutan las migraciones, Laravel las aplica autom\xe1ticamente a la base de datos mediante una serie de comandos SQL. Esto garantiza que la estructura de la base de datos sea la misma en todas las instancias del proyecto, ya sea en un entorno de desarrollo local, en un servidor de pruebas o en producci\xf3n."),(0,i.kt)("p",null,"Adem\xe1s, las migraciones tambi\xe9n proporcionan un mecanismo para revertir los cambios en la base de datos, lo que es \xfatil en caso de que se deban hacer cambios en la estructura de la base de datos y luego se deba revertir a una versi\xf3n anterior."),(0,i.kt)("p",null,"En conclusi\xf3n, las migraciones en Laravel son una herramienta esencial para el desarrollo de aplicaciones que requieren una gesti\xf3n de base de datos robusta y f\xe1cil de usar."),(0,i.kt)("admonition",{title:"Para saber m\xe1s",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Para m\xe1s informaci\xf3n consulte ",(0,i.kt)("a",{parentName:"p",href:"httbash://laravel.com/docs/9.x/migrations#generating-migrations"},"la documentaci\xf3n oficial de Laravel."))),(0,i.kt)("h2",{id:"generando-migraciones-en-laravel"},"Generando migraciones en Laravel"),(0,i.kt)("p",null,"Tecle el siguiente comando para crear la migraci\xf3n de la tabla categor\xedas."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan make:migration create_categorias_table\n")),(0,i.kt)("p",null,"Para generar una migraci\xf3n en Laravel 10, puedes usar el comando Artisan make:migration:"),(0,i.kt)("p",null,"Abre la terminal en la ra\xedz de tu proyecto Laravel\nEjecuta el siguiente comando: "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Como generar una migraci\xf3n"',title:'"Como',generar:!0,una:!0,'migraci\xf3n"':!0},"php artisan make:migration NombreDeLaMigracion --create=nombre_de_la_tabla\n")),(0,i.kt)("p",null,"Donde NombreDeLaMigracion es el nombre que le quieres dar a la migraci\xf3n y nombre_de_la_tabla es el nombre de la tabla que se crear\xe1 en la base de datos."),(0,i.kt)("p",null,"Esto crear\xe1 un archivo de migraci\xf3n en la carpeta database/migrations con un nombre similar a yyyy_mm_dd_hhmmss_NombreDeLaMigracion.php."),(0,i.kt)("p",null,"Luego, puedes editar ese archivo para definir las columnas que deseas agregar a la tabla. Finalmente, ejecuta el comando php artisan migrate para aplicar las migraciones a la base de datos."),(0,i.kt)("h2",{id:"definiendo-las-tablas-de-la-bbdd"},"Definiendo las tablas de la BB.DD"),(0,i.kt)("p",null,"Para los ejemplos de este tutorial utilizaremos las siguientes migraciones. Puede obtener el c\xf3digo del repositorio de github especificado en la introducci\xf3n de este curso."),(0,i.kt)("admonition",{title:"Importante",type:"info"},(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Es importante seguir una nomenclatura coherente y clara para los nombres de las tablas y de los campos en las migraciones.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Cuando se hace referencia a otra tabla en un campo, se debe asegurar que ese campo tenga el mismo tipo de datos y longitud que la clave primaria de la tabla referenciada. Por ejemplo, si se hace referencia a una tabla "users" y su clave primaria es un campo "id" de tipo "integer" y longitud "unsigned" de 10, entonces el campo referenciado deber\xeda tener el mismo tipo y longitud.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},'Al crear una tabla, se debe definir siempre una clave primaria. Si no se define expl\xedcitamente, Laravel agregar\xe1 autom\xe1ticamente un campo "id" como clave primaria.')),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Es recomendable crear primero las tablas que tienen claves primarias, luego las tablas que tienen claves for\xe1neas que apuntan a esas tablas, y finalmente las tablas que tienen relaciones con ellas. Es importante seguir este orden ya que si se intenta crear una clave for\xe1nea hacia una tabla que a\xfan no tiene una clave primaria, la migraci\xf3n fallar\xe1. Por eso, es importante planificar y dise\xf1ar cuidadosamente la estructura de la base de datos antes de comenzar a crear las migraciones, para asegurarse de que se cumplan todas las dependencias de las tablas.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Es buena pr\xe1ctica agregar comentarios en las migraciones para explicar su prop\xf3sito y detalles importantes. Esto puede ayudar a otros desarrolladores a entender r\xe1pidamente lo que hace cada migraci\xf3n en particular.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Cuando se crea una clave for\xe1nea, se debe asegurar que exista un \xedndice en la columna referenciada para mejorar el rendimiento de las consultas. Esto se puede lograr usando el m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"p"},"index()")," en la migraci\xf3n que crea la columna referenciada.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"Es importante asegurarse de que las migraciones se hayan ejecutado correctamente antes de proceder a la siguiente fase del desarrollo. Se pueden usar comandos de Artisan para verificar el estado de las migraciones, como ",(0,i.kt)("inlineCode",{parentName:"p"},"php artisan migrate:status")," para ver la lista de migraciones ejecutadas y pendientes, o ",(0,i.kt)("inlineCode",{parentName:"p"},"php artisan migrate:rollback")," para revertir la \xfaltima migraci\xf3n.")))),(0,i.kt)("p",null,"No te preocupes si de momento no entiendes bien estos conceptos, los iremos desarrollando a medida que avancemos en este curso."),(0,i.kt)("h3",{id:"tabla-categor\xedas"},"Tabla categor\xedas"),(0,i.kt)("p",null,"Para crear la migraci\xf3n ejecute el siguiente comando desde su terminal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Migraci\xf3n de categor\xedas"',title:'"Migraci\xf3n',de:!0,'categor\xedas"':!0},"php artisan make:migration create_categorias_table\n")),(0,i.kt)("p",null,"Si todo a marchado bien, deberia haberse creado un fichero PHP dentro de la carpeta database/migrations."),(0,i.kt)("admonition",{title:"Importante",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Siga la convenci\xf3n en sus creaciones de tabla  utilizando ",(0,i.kt)("strong",{parentName:"p"},"create_nombre_de_tabla_table"),", si quiere evitarse problemas en el futuro.")),(0,i.kt)("p",null,"Dir\xedjase al directorio database/migrations y edite al fichero con la migraci\xf3n."),(0,i.kt)("p",null,"Copie el siguiente c\xf3digo y sustituya el c\xf3digo del fichero."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"\n<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('categorias', function (Blueprint $table) {\n            $table->id();\n            $table->string('nombre')->unique();\n            $table->text('descripcion')->nullable();\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('categorias');\n    }\n};\n\n")),(0,i.kt)("admonition",{title:"tipos de datos m\xe1s comunes en Laravel",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"En Laravel, los tipos de datos en las migraciones se refieren a las especificaciones de los tipos de columnas en las tablas de la base de datos. Algunos de los tipos de datos m\xe1s comunes incluyen:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},"bigIncrements: Incremento autom\xe1tico de ID grande"),(0,i.kt)("li",{parentName:"ul"},"bigInteger: Entero grande"),(0,i.kt)("li",{parentName:"ul"},"binary: Datos binarios"),(0,i.kt)("li",{parentName:"ul"},"boolean: Valor booleano"),(0,i.kt)("li",{parentName:"ul"},"char: Cadena fija de longitud"),(0,i.kt)("li",{parentName:"ul"},"date: Fecha"),(0,i.kt)("li",{parentName:"ul"},"dateTime: Fecha y hora"),(0,i.kt)("li",{parentName:"ul"},"decimal: N\xfamero decimal con precisi\xf3n y escala espec\xedficas"),(0,i.kt)("li",{parentName:"ul"},"double: N\xfamero de punto flotante de doble precisi\xf3n"),(0,i.kt)("li",{parentName:"ul"},"enum: Valor de una lista predefinida"),(0,i.kt)("li",{parentName:"ul"},"float: N\xfamero de punto flotante"),(0,i.kt)("li",{parentName:"ul"},"increments: Incremento autom\xe1tico de ID"),(0,i.kt)("li",{parentName:"ul"},"integer: Entero"),(0,i.kt)("li",{parentName:"ul"},"json: Datos en formato JSON"),(0,i.kt)("li",{parentName:"ul"},"longText: Texto largo"),(0,i.kt)("li",{parentName:"ul"},"mediumText: Texto de tama\xf1o medio"),(0,i.kt)("li",{parentName:"ul"},"smallInteger: Entero peque\xf1o"),(0,i.kt)("li",{parentName:"ul"},"string: Cadena"),(0,i.kt)("li",{parentName:"ul"},"text: Texto"),(0,i.kt)("li",{parentName:"ul"},"time: Tiempo"),(0,i.kt)("li",{parentName:"ul"},"timestamp: Marca de tiempo"),(0,i.kt)("li",{parentName:"ul"},"unsignedBigInteger: Entero grande sin signo"),(0,i.kt)("li",{parentName:"ul"},"unsignedInteger: Entero sin signo.")),(0,i.kt)("p",{parentName:"admonition"},"Estos son algunos de los tipos de datos m\xe1s comunes que puedes usar en tus migraciones en Laravel.")),(0,i.kt)("p",null,"El c\xf3digo crea una clase an\xf3nima que extiende la clase Migration de Illuminate y define dos m\xe9todos: up() y down()."),(0,i.kt)("p",null,'El m\xe9todo up() es invocado cuando se ejecuta el comando php artisan migrate y se utiliza para crear la tabla "categor\xedas" en la base de datos con las siguientes columnas:'),(0,i.kt)("p",null,'id: una columna con clave primaria que se genera autom\xe1ticamente como una secuencia incremental.\nnombre: una columna de tipo cadena con un tama\xf1o m\xe1ximo de 150 caracteres que es \xfanica.\ndescripcion: una columna de tipo texto.\ncreated_at y updated_at: dos columnas de tipo fecha y hora que se generan autom\xe1ticamente y se actualizan autom\xe1ticamente al insertar o actualizar un registro.\nEl m\xe9todo down() es invocado cuando se ejecuta el comando php artisan migrate:rollback y se utiliza para eliminar la tabla "categor\xedas".'),(0,i.kt)("h3",{id:"tabla-subcategor\xedas"},"Tabla subcategor\xedas"),(0,i.kt)("p",null,"Para crear la migraci\xf3n ejecute el siguiente comando desde su terminal."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Migraci\xf3n de categor\xedas"',title:'"Migraci\xf3n',de:!0,'categor\xedas"':!0},"php artisan make:migration create_categorias_table\n")),(0,i.kt)("p",null,"Dir\xedjase el directorio database/migrations y siga el mismo procedimiento que el ejemplo anterior."),(0,i.kt)("p",null,"Sustituya el c\xf3digo generado por el siguiente c\xf3digo:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create(\'subcategorias\', function (Blueprint $table) {\n            $table->id();\n            $table->string("nombre",150)->unique();\n            $table->text("descripcion");\n            $table->text("imagen")->nullable();\n            $table->unsignedBigInteger("categoria_id");\n            $table->foreign("categoria_id")->references("id")->on("categorias");\n            $table->timestambash();\n            \n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists(\'subcategorias\');\n    }\n};\n')),(0,i.kt)("p",null,"Este c\xf3digo define una migraci\xf3n en Laravel. Una migraci\xf3n es un archivo que contiene instrucciones para crear, modificar o eliminar tablas en la base de datos. Estos son los pasos que sigue:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Se importan las clases ",(0,i.kt)("inlineCode",{parentName:"p"},"Migration"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"Blueprint")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"Schema")," para poder utilizarlas dentro de la migraci\xf3n.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Se retorna una nueva instancia an\xf3nima de la clase ",(0,i.kt)("inlineCode",{parentName:"p"},"Migration"),". Esto se utiliza para poder escribir una migraci\xf3n en una sola l\xednea de c\xf3digo y sin tener que nombrar expl\xedcitamente la clase.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Dentro de la clase an\xf3nima, se define el m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"p"},"up()"),", el cual es llamado cuando se ejecuta la migraci\xf3n. Este m\xe9todo se encarga de crear la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"subcategorias"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Se llama al m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"p"},"create")," de la clase ",(0,i.kt)("inlineCode",{parentName:"p"},"Schema"),", el cual recibe como argumento el nombre de la tabla que se quiere crear y una funci\xf3n an\xf3nima que define las columnas de la tabla. En este caso, se define la columna ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," como un ",(0,i.kt)("inlineCode",{parentName:"p"},"unsigned big integer")," autoincremental, la columna ",(0,i.kt)("inlineCode",{parentName:"p"},"nombre")," como una cadena de texto de m\xe1ximo 150 caracteres y se establece una restricci\xf3n de unicidad para las columnas ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"nombre"),". Tambi\xe9n se definen las columnas ",(0,i.kt)("inlineCode",{parentName:"p"},"descripcion"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"imagen")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"categoria_id"),", donde la \xfaltima de ellas es una clave for\xe1nea que referencia la columna ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," de la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"categorias"),".")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Finalmente, se define el m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"p"},"down()"),", el cual se encarga de revertir los cambios realizados en el m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"p"},"up()"),". En este caso, simplemente se elimina la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"subcategorias")," utilizando el m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"p"},"dropIfExists")," de la clase ",(0,i.kt)("inlineCode",{parentName:"p"},"Schema"),"."))),(0,i.kt)("admonition",{title:"Importante",type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Una Foreign Key (FK) es una columna o conjunto de columnas en una tabla que hace referencia a la Primary Key (PK) de otra tabla. Las FK se utilizan para establecer relaciones entre dos o m\xe1s tablas en una base de datos relacional."),(0,i.kt)("p",{parentName:"admonition"},"La importancia de las FK radica en que nos permiten mantener la integridad de los datos en la base de datos, al evitar que se inserten registros con valores que no existen en la tabla referenciada. Adem\xe1s, tambi\xe9n nos permiten realizar consultas entre tablas relacionadas, lo que nos da la capacidad de obtener informaci\xf3n m\xe1s precisa y relevante."),(0,i.kt)("p",{parentName:"admonition"},"Un ejemplo en Laravel de c\xf3mo se crea una FK en una migraci\xf3n ser\xeda el siguiente:"),(0,i.kt)("p",{parentName:"admonition"},"Supongamos que tenemos dos tablas: ",(0,i.kt)("inlineCode",{parentName:"p"},"posts")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"users"),", donde un ",(0,i.kt)("inlineCode",{parentName:"p"},"post")," pertenece a un ",(0,i.kt)("inlineCode",{parentName:"p"},"user"),". En este caso, tendr\xedamos una relaci\xf3n uno a muchos, donde un usuario puede tener varios posts, pero un post solo puede pertenecer a un usuario."),(0,i.kt)("p",{parentName:"admonition"},"Para crear esta relaci\xf3n en Laravel, en la migraci\xf3n de la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"posts")," tendr\xedamos que a\xf1adir un campo que haga referencia a la PK de la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"users"),", como se muestra a continuaci\xf3n:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-php"},"Schema::create('posts', function (Blueprint $table) {\n    $table->id();\n    $table->string('title');\n    $table->text('content');\n    $table->unsignedBigInteger('user_id');\n    $table->timestamps();\n\n    $table->foreign('user_id')->references('id')->on('users');\n});\n")),(0,i.kt)("p",{parentName:"admonition"},"En este ejemplo, el campo ",(0,i.kt)("inlineCode",{parentName:"p"},"user_id")," de la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"posts")," es una FK que hace referencia a la PK ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," de la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"users"),". Esto significa que cuando se inserte un nuevo registro en la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"posts"),", el valor del campo ",(0,i.kt)("inlineCode",{parentName:"p"},"user_id")," debe existir en la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"users"),"."),(0,i.kt)("p",{parentName:"admonition"},"Adem\xe1s, al a\xf1adir la FK mediante la funci\xf3n ",(0,i.kt)("inlineCode",{parentName:"p"},"foreign()"),", tambi\xe9n estamos definiendo una relaci\xf3n entre las tablas ",(0,i.kt)("inlineCode",{parentName:"p"},"posts")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"users")," en Laravel, lo que nos permitir\xe1 acceder f\xe1cilmente a los posts de un usuario espec\xedfico, por ejemplo:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-php"},"$user = User::find(1);\n$posts = $user->posts;\n")),(0,i.kt)("p",{parentName:"admonition"},"Esta consulta nos devolver\xe1 todos los posts del usuario con id igual a 1.")),(0,i.kt)("h3",{id:"estados"},"Estados"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('estados', function (Blueprint $table) {\n            $table->id();\n            $table->string('nombre');\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('estados');\n    }\n};\n")),(0,i.kt)("p",null,'Esta migraci\xf3n crea una nueva tabla llamada "estados" en la base de datos usando Laravel\'s Schema Builder. La tabla tiene tres columnas: "id" (la clave principal), "nombre" (que contiene el nombre del estado) y "timestamps" (que contiene los registros de fecha y hora de creaci\xf3n y actualizaci\xf3n de cada fila). La migraci\xf3n se utiliza para configurar la estructura de la tabla en la base de datos y se puede ejecutar mediante el comando "php artisan migrate" en la terminal. Adem\xe1s, la migraci\xf3n tiene una funci\xf3n "down()" que elimina la tabla "estados" de la base de datos en caso de que se desee deshacer la migraci\xf3n en el futuro.'),(0,i.kt)("h3",{id:"provincias"},"Provincias"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('provincias', function (Blueprint $table) {\n            $table->string('codigo',2)->primary();\n            $table->string('nombre');\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('provincias');\n    }\n};\n")),(0,i.kt)("p",null,"Esta migraci\xf3n crea la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"provincias")," con tres columnas: ",(0,i.kt)("inlineCode",{parentName:"p"},"codigo"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"nombre")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"timestamps"),". La columna ",(0,i.kt)("inlineCode",{parentName:"p"},"codigo")," es de tipo ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," y tiene una longitud m\xe1xima de 2 caracteres, se define como clave primaria de la tabla. La columna ",(0,i.kt)("inlineCode",{parentName:"p"},"nombre")," tambi\xe9n es de tipo ",(0,i.kt)("inlineCode",{parentName:"p"},"string")," y almacena el nombre de la provincia. La columna ",(0,i.kt)("inlineCode",{parentName:"p"},"timestamps")," es opcional y se utiliza para registrar la fecha y hora de creaci\xf3n y actualizaci\xf3n de cada registro en la tabla."),(0,i.kt)("p",null,"Esta migraci\xf3n permite almacenar informaci\xf3n sobre las provincias, como su c\xf3digo y nombre, en una tabla de base de datos que puede ser consultada y actualizada mediante consultas SQL o Eloquent, el ORM de Laravel. Adem\xe1s, al utilizar las herramientas de migraci\xf3n proporcionadas por Laravel, esta tabla se puede crear y eliminar f\xe1cilmente junto con cualquier otra tabla relacionada con ella."),(0,i.kt)("h3",{id:"anuncios"},"Anuncios"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('anuncios', function (Blueprint $table) {\n            $table->id();\n            $table->string('titulo');\n            $table->text('description')->nullable();\n            $table->text('imagen')->nullable();\n            $table->decimal('precio', 10, 2)->default(0);\n            $table->unsignedBigInteger(\"user_id\");\n            $table->foreign('user_id')->references('id')->on('users');\n            $table->unsignedBigInteger('subcategoria_id');\n            $table->string('telefono');\n            $table->foreign('subcategoria_id')->references('id')->on('subcategorias');\n            $table->unsignedBigInteger('estado_id');\n            $table->foreign('estado_id')->references('id')->on('estados');\n            $table->string('provincia',2);\n            $table->string('cod_postal',5);\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('anuncios');\n    }\n};\n")),(0,i.kt)("p",null,"Esta migraci\xf3n crea una tabla llamada ",(0,i.kt)("inlineCode",{parentName:"p"},"anuncios")," que contiene informaci\xf3n sobre los anuncios publicados en un sitio web. La tabla tiene las siguientes columnas:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"id"),": clave primaria autoincremental."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"titulo"),": el t\xedtulo del anuncio."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"description"),": una descripci\xf3n m\xe1s detallada del anuncio, es un campo opcional que permite nulos."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"imagen"),": una imagen asociada al anuncio, tambi\xe9n es un campo opcional que permite nulos."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"precio"),": el precio del art\xedculo, con un m\xe1ximo de 10 d\xedgitos y 2 decimales."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"user_id"),": la clave for\xe1nea del usuario que public\xf3 el anuncio."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"subcategoria_id"),": la clave for\xe1nea de la subcategor\xeda a la que pertenece el anuncio."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"telefono"),": el n\xfamero de tel\xe9fono del anunciante."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"estado_id"),": la clave for\xe1nea del estado del art\xedculo (nuevo, usado, etc)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"provincia"),": el c\xf3digo de dos letras de la provincia en la que se encuentra el art\xedculo."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"cod_postal"),": el c\xf3digo postal de la ubicaci\xf3n del art\xedculo."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"timestamps"),": dos columnas ",(0,i.kt)("inlineCode",{parentName:"li"},"created_at")," y ",(0,i.kt)("inlineCode",{parentName:"li"},"updated_at")," para registrar las fechas de creaci\xf3n y actualizaci\xf3n de los registros.")),(0,i.kt)("p",null,"Esta migraci\xf3n tambi\xe9n crea las claves for\xe1neas necesarias y las restricciones de integridad referencial para mantener la coherencia de los datos en la base de datos. La migraci\xf3n se puede revertir eliminando la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"anuncios"),"."),(0,i.kt)("h3",{id:"poblaciones"},"Poblaciones"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create(\'poblaciones\', function (Blueprint $table) {\n    \n            $table->string("codigo",5)->primary();\n            $table->string("nombre");\n            $table->string("provincia_cod",2);\n        \n            $table->foreign("provincia_cod")->on("provincias")->references("codigo");\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists(\'poblacions\');\n    }\n};\n')),(0,i.kt)("p",null,"Esta migraci\xf3n crea la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"poblaciones")," con tres columnas: ",(0,i.kt)("inlineCode",{parentName:"p"},"codigo"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"nombre")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"provincia_cod"),". La columna ",(0,i.kt)("inlineCode",{parentName:"p"},"codigo")," se define como clave primaria y como una cadena de longitud m\xe1xima de 5 caracteres. La columna ",(0,i.kt)("inlineCode",{parentName:"p"},"nombre")," es una cadena que contiene el nombre de la poblaci\xf3n. La columna ",(0,i.kt)("inlineCode",{parentName:"p"},"provincia_cod")," es una cadena que hace referencia a la columna ",(0,i.kt)("inlineCode",{parentName:"p"},"codigo")," en la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"provincias"),". "),(0,i.kt)("p",null,"Adem\xe1s, se definen dos restricciones de clave externa en la tabla. La primera restricci\xf3n establece que la columna ",(0,i.kt)("inlineCode",{parentName:"p"},"provincia_cod")," es una clave externa que hace referencia a la columna ",(0,i.kt)("inlineCode",{parentName:"p"},"codigo")," en la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"provincias"),". "),(0,i.kt)("p",null,"En resumen, esta migraci\xf3n crea una tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"poblaciones")," para almacenar informaci\xf3n sobre las poblaciones, y establece relaciones de clave externa con las tablas ",(0,i.kt)("inlineCode",{parentName:"p"},"provincias"),"."),(0,i.kt)("h3",{id:"tags"},"Tags"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nclass CreateTagsTable extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create('tags', function (Blueprint $table) {\n            $table->id();\n            $table->string('name');\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('tags');\n    }\n}\n")),(0,i.kt)("p",null,"La migraci\xf3n ",(0,i.kt)("inlineCode",{parentName:"p"},"CreateTagsTable")," crea la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"tags")," con tres columnas: ",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"timestamps"),". La columna ",(0,i.kt)("inlineCode",{parentName:"p"},"id")," es una clave primaria autoincremental, la columna ",(0,i.kt)("inlineCode",{parentName:"p"},"name")," es una cadena de caracteres que almacena el nombre del tag y la columna ",(0,i.kt)("inlineCode",{parentName:"p"},"timestamps")," es un registro de la fecha y hora de la creaci\xf3n y modificaci\xf3n de la entrada de la tabla. "),(0,i.kt)("p",null,"La migraci\xf3n tiene una funci\xf3n ",(0,i.kt)("inlineCode",{parentName:"p"},"up()")," que ejecuta la creaci\xf3n de la tabla utilizando el m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"p"},"create")," de la fachada ",(0,i.kt)("inlineCode",{parentName:"p"},"Schema"),". Y una funci\xf3n ",(0,i.kt)("inlineCode",{parentName:"p"},"down()")," que deshace la migraci\xf3n, eliminando la tabla ",(0,i.kt)("inlineCode",{parentName:"p"},"tags")," utilizando el m\xe9todo ",(0,i.kt)("inlineCode",{parentName:"p"},"dropIfExists")," de la fachada ",(0,i.kt)("inlineCode",{parentName:"p"},"Schema"),"."),(0,i.kt)("h3",{id:"anuncio_tag"},"Anuncio_tag"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     */\n    public function up()\n    {\n        Schema::create('anuncio_tag', function (Blueprint $table) {\n            \n            $table->unsignedBigInteger('anuncio_id');\n            $table->unsignedBigInteger('tag_id');\n            $table->primary('anuncio_id','tag_id');\n            $table->timestamps();\n            $table->foreign('anuncio_id')->references('id')->on('anuncios')->onDelete('cascade');\n            $table->foreign('tag_id')->references('id')->on('tags')->onDelete('cascade');\n        });\n    }\n    \n};\n")),(0,i.kt)("p",null,"Esta migraci\xf3n crea una tabla pivote llamada ",(0,i.kt)("inlineCode",{parentName:"p"},"anuncio_tag")," que se utiliza para almacenar la relaci\xf3n muchos a muchos entre los anuncios y los tags. La tabla tiene dos columnas que son claves for\xe1neas que hacen referencia a las tablas ",(0,i.kt)("inlineCode",{parentName:"p"},"anuncios")," y ",(0,i.kt)("inlineCode",{parentName:"p"},"tags"),". Ambas claves for\xe1neas est\xe1n configuradas para eliminar en cascada, lo que significa que si se elimina un registro en la tabla principal (",(0,i.kt)("inlineCode",{parentName:"p"},"anuncios")," o ",(0,i.kt)("inlineCode",{parentName:"p"},"tags"),"), tambi\xe9n se eliminar\xe1n los registros relacionados en la tabla pivote (",(0,i.kt)("inlineCode",{parentName:"p"},"anuncio_tag"),"). La tabla pivote tambi\xe9n tiene una marca de tiempo para registrar cu\xe1ndo se cre\xf3 o actualiz\xf3 la relaci\xf3n entre un anuncio y un tag."),(0,i.kt)("h3",{id:"fotos"},"Fotos"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-php"},'<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        Schema::create(\'fotos\', function (Blueprint $table) {\n            $table->id();\n            $table->string(\'path\')->unique();\n            $table->unsignedBigInteger("anuncio_id");\n            $table->foreign("anuncio_id")->references("id")->on("anuncios");\n            $table->timestamps();\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists(\'fotos\');\n    }\n};\n')),(0,i.kt)("p",null,'Esta migraci\xf3n crea una tabla llamada "fotos" que almacena las fotos de los anuncios. La tabla tiene los siguientes campos:'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'"id": clave primaria autoincremental.'),(0,i.kt)("li",{parentName:"ul"},'"path": ruta del archivo de imagen. Este campo es \xfanico, lo que significa que no puede haber dos fotos con la misma ruta en la tabla.'),(0,i.kt)("li",{parentName:"ul"},'"anuncio_id": clave for\xe1nea que hace referencia a la tabla "anuncios", indicando a qu\xe9 anuncio pertenece cada foto.'),(0,i.kt)("li",{parentName:"ul"},'"timestamps": dos campos que registran la fecha y hora de creaci\xf3n y actualizaci\xf3n de cada registro.')),(0,i.kt)("p",null,"En resumen, esta migraci\xf3n crea una tabla que permite almacenar m\xfaltiples fotos para cada anuncio."))}m.isMDXComponent=!0},4969:(e,a,n)=>{n.d(a,{Z:()=>t});const t=n.p+"assets/images/modelo-4accec1359e3f9367ce7f36c03214d5b.png"}}]);