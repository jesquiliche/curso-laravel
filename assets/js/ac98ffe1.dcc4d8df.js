"use strict";(self.webpackChunkeloquent=self.webpackChunkeloquent||[]).push([[2355],{3905:(e,a,n)=>{n.d(a,{Zo:()=>c,kt:()=>b});var r=n(7294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function i(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?i(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var u=r.createContext({}),l=function(e){var a=r.useContext(u),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},c=function(e){var a=l(e.components);return r.createElement(u.Provider,{value:a},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},m=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,i=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=l(n),m=t,b=p["".concat(u,".").concat(m)]||p[m]||d[m]||i;return n?r.createElement(b,s(s({ref:a},c),{},{components:n})):r.createElement(b,s({ref:a},c))}));function b(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var i=n.length,s=new Array(i);s[0]=m;var o={};for(var u in a)hasOwnProperty.call(a,u)&&(o[u]=a[u]);o.originalType=e,o[p]="string"==typeof e?e:t,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3750:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>u,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>l});var r=n(7462),t=(n(7294),n(3905));const i={sidebar_position:52},s="Pruebas unitarias",o={unversionedId:"tutorial-basics/Calidad/pruebas",id:"tutorial-basics/Calidad/pruebas",title:"Pruebas unitarias",description:"\xbfQu\xe9 son y para que sirven?",source:"@site/docs/tutorial-basics/Calidad/pruebas.md",sourceDirName:"tutorial-basics/Calidad",slug:"/tutorial-basics/Calidad/pruebas",permalink:"/curso-laravel/docs/tutorial-basics/Calidad/pruebas",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/Calidad/pruebas.md",tags:[],version:"current",sidebarPosition:52,frontMatter:{sidebar_position:52},sidebar:"tutorialSidebar",previous:{title:"Introducci\xf3n",permalink:"/curso-laravel/docs/tutorial-basics/Calidad/introduccion"},next:{title:"Administraci\xf3n",permalink:"/curso-laravel/docs/category/administraci\xf3n"}},u={},l=[{value:"\xbfQu\xe9 son y para que sirven?",id:"qu\xe9-son-y-para-que-sirven",level:2},{value:"\xbfC\xf3mo se crean?",id:"c\xf3mo-se-crean",level:2},{value:"Tipos de prueba",id:"tipos-de-prueba",level:2},{value:"Creaci\xf3n del primer test de prueba",id:"creaci\xf3n-del-primer-test-de-prueba",level:2},{value:"Configuraci\xf3n de la BB.DD de pruebas",id:"configuraci\xf3n-de-la-bbdd-de-pruebas",level:3},{value:"Configuraci\xf3n de una nueva conexi\xf3n.",id:"configuraci\xf3n-de-una-nueva-conexi\xf3n",level:4},{value:"Configuraci\xf3n de variables de entorno",id:"configuraci\xf3n-de-variables-de-entorno",level:4},{value:"Creando nuestro primer test",id:"creando-nuestro-primer-test",level:3}],c={toc:l},p="wrapper";function d(e){let{components:a,...n}=e;return(0,t.kt)(p,(0,r.Z)({},c,n,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"pruebas-unitarias"},"Pruebas unitarias"),(0,t.kt)("h2",{id:"qu\xe9-son-y-para-que-sirven"},"\xbfQu\xe9 son y para que sirven?"),(0,t.kt)("p",null,"Los test unitarios son una t\xe9cnica de pruebas automatizadas que se utilizan en Laravel para verificar el correcto funcionamiento de las diferentes partes de la aplicaci\xf3n de forma aislada. Es decir, los test unitarios se encargan de verificar el funcionamiento de una sola unidad de c\xf3digo, como una funci\xf3n, un m\xe9todo, una clase, entre otros. "),(0,t.kt)("p",null,"Los test unitarios son muy importantes porque permiten asegurar que una unidad de c\xf3digo espec\xedfica funciona correctamente, evitando as\xed errores en el futuro y ahorrando tiempo en el proceso de depuraci\xf3n. Adem\xe1s, con los test unitarios se puede garantizar que los cambios que se hacen en el c\xf3digo no afecten negativamente el funcionamiento de la aplicaci\xf3n."),(0,t.kt)("p",null,"En Laravel, los test unitarios se escriben utilizando la clase ",(0,t.kt)("inlineCode",{parentName:"p"},"PHPUnit"),", que es una herramienta de pruebas automatizadas para PHP. Laravel proporciona varias utilidades y m\xe9todos para facilitar la escritura de pruebas unitarias, como el uso de una base de datos de prueba separada, la creaci\xf3n de instancias de objetos de la aplicaci\xf3n en los tests y la ejecuci\xf3n de pruebas de forma sencilla desde la consola."),(0,t.kt)("h2",{id:"c\xf3mo-se-crean"},"\xbfC\xf3mo se crean?"),(0,t.kt)("p",null,"Para crear un test unitario en Laravel, se pueden seguir los siguientes pasos:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Crear un archivo de test: lo primero que se debe hacer es crear un archivo de test. Laravel incluye una herramienta llamada Artisan, que permite crear archivos de test de manera autom\xe1tica. El comando para crear un archivo de test es el siguiente:"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre"},"php artisan make:test NombreDelTest\n")),(0,t.kt)("p",{parentName:"li"},'Donde "NombreDelTest" es el nombre que se le quiere dar al archivo de test.')),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Escribir el c\xf3digo de prueba: una vez que se ha creado el archivo de test, se debe escribir el c\xf3digo que se quiere probar. Esto se hace mediante el uso de la clase TestCase, que proporciona varios m\xe9todos para realizar pruebas. Por ejemplo, para verificar que el resultado de una funci\xf3n sea el esperado, se puede usar el m\xe9todo assertEquals():"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre",className:"language-php"},"public function testMiFuncion()\n{\n    $resultado = miFuncion();\n    $this->assertEquals(2, $resultado);\n}\n"))),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Ejecutar el test: una vez que se ha escrito el c\xf3digo de prueba, se debe ejecutar el test para verificar si se cumple con las condiciones que se han definido. Esto se hace mediante el siguiente comando:"),(0,t.kt)("pre",{parentName:"li"},(0,t.kt)("code",{parentName:"pre"},"vendor/bin/phpunit\n")),(0,t.kt)("p",{parentName:"li"},"Este comando ejecutar\xe1 todos los tests que se hayan definido en la aplicaci\xf3n.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Analizar los resultados: despu\xe9s de ejecutar el test, se debe analizar el resultado para verificar si se han encontrado errores. Si no hay errores, significa que el test ha pasado con \xe9xito."))),(0,t.kt)("p",null,"Los test unitarios son muy \xfatiles en el desarrollo de aplicaciones web, ya que permiten verificar que el c\xf3digo funciona correctamente en peque\xf1as partes, lo que reduce el riesgo de errores en la aplicaci\xf3n final. Adem\xe1s, los test unitarios permiten detectar errores temprano en el ciclo de desarrollo, lo que hace que sea m\xe1s f\xe1cil y m\xe1s barato corregirlos."),(0,t.kt)("h2",{id:"tipos-de-prueba"},"Tipos de prueba"),(0,t.kt)("p",null,"En Laravel 10, los diferentes tipos de pruebas se dividen en tres categor\xedas principales: pruebas unitarias, pruebas de integraci\xf3n y pruebas de aceptaci\xf3n. A continuaci\xf3n, se describe cada una de ellas:"),(0,t.kt)("ol",null,(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Pruebas unitarias: Las pruebas unitarias son pruebas automatizadas que se realizan en el c\xf3digo individual de una aplicaci\xf3n para comprobar que cada unidad de c\xf3digo (como una clase o m\xe9todo) funciona correctamente y produce los resultados esperados. En Laravel, se utilizan diferentes herramientas para llevar a cabo pruebas unitarias, como PHPUnit, Mockery, entre otras.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Pruebas de integraci\xf3n: Las pruebas de integraci\xf3n son pruebas que se realizan en el conjunto de la aplicaci\xf3n para comprobar que los diferentes m\xf3dulos o componentes de la aplicaci\xf3n interact\xfaan correctamente entre s\xed. En Laravel, se pueden realizar pruebas de integraci\xf3n en diferentes niveles, desde pruebas de integraci\xf3n de base de datos hasta pruebas de integraci\xf3n de API.")),(0,t.kt)("li",{parentName:"ol"},(0,t.kt)("p",{parentName:"li"},"Pruebas de aceptaci\xf3n: Las pruebas de aceptaci\xf3n son pruebas que se realizan en la interfaz de usuario para comprobar que la aplicaci\xf3n se comporta correctamente y cumple con los requisitos del usuario. En Laravel, estas pruebas se pueden realizar utilizando la herramienta Dusk, que permite realizar pruebas automatizadas en navegadores web reales."))),(0,t.kt)("p",null,"En este tutorial esencialmente nos concentraremos en las primeras, ya que el tema de las pruebas unitarias necesitar\xeda de un manual por si mismo."),(0,t.kt)("p",null,"En definitiva, las pruebas unitarias se centran en probar peque\xf1as unidades de c\xf3digo, las pruebas de integraci\xf3n se centran en probar la interacci\xf3n entre diferentes m\xf3dulos de la aplicaci\xf3n, y las pruebas de aceptaci\xf3n se centran en probar la funcionalidad y la experiencia del usuario en la interfaz de usuario."),(0,t.kt)("h2",{id:"creaci\xf3n-del-primer-test-de-prueba"},"Creaci\xf3n del primer test de prueba"),(0,t.kt)("h3",{id:"configuraci\xf3n-de-la-bbdd-de-pruebas"},"Configuraci\xf3n de la BB.DD de pruebas"),(0,t.kt)("p",null,"Para realizar las pruebas unitarias, lo ideal es separar el entorno de pruebas del de producci\xf3n, esto implica crear una base de datos de prueba. Seguidamente revisaremos punto por punto."),(0,t.kt)("h4",{id:"configuraci\xf3n-de-una-nueva-conexi\xf3n"},"Configuraci\xf3n de una nueva conexi\xf3n."),(0,t.kt)("p",null,"Para efectuar las pruebas unitarias crearemos primero una nueva conexi\xf3n en el archivo ",(0,t.kt)("strong",{parentName:"p"},"\\config\\database.php"),"."),(0,t.kt)("p",null,"Introduzca el siguiente c\xf3digo al final del array de conexiones: "),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"}," 'anuncios_prueba' => [\n            'driver' => 'mysql',\n            'host' => env('DB_HOST', '127.0.0.1'),\n            'port' => env('DB_PORT', '3306'),\n            'database' => 'anuncios_prueba',\n            'username' => env('DB_USERNAME', 'root'),\n            'password' => env('DB_PASSWORD', ''),\n            'charset' => 'utf8mb4',\n            'collation' => 'utf8mb4_unicode_ci',\n            'prefix' => '',\n            'strict' => true,\n            'engine' => null,\n        ]\n")),(0,t.kt)("h4",{id:"configuraci\xf3n-de-variables-de-entorno"},"Configuraci\xf3n de variables de entorno"),(0,t.kt)("p",null,"Cree un archivo .env.testing con el siguiente\nc\xf3digo: "),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"APP_NAME=Laravel\nAPP_ENV=testing\nAPP_KEY=base64:ioUGyWTNxz7zIh2zx4jnaSizwByAgSrseenFgVamJg8=\nAPP_DEBUG=true\nAPP_URL=http://localhost\n\nLOG_CHANNEL=stack\n\nDB_CONNECTION=anuncios_prueba\nDB_HOST=127.0.0.1\nDB_PORT=3306\nDB_DATABASE=anuncios_prueba\nDB_USERNAME=root\nDB_PASSWORD=\n\nBROADCAST_DRIVER=log\nCACHE_DRIVER=file\nQUEUE_CONNECTION=sync\nSESSION_DRIVER=file\nSESSION_LIFETIME=120\n")),(0,t.kt)("p",null,"Dependiendo de su conexi\xf3n de base de datos deber\xe1 adaptar estos valores. Tambi\xe9n deber\xe1 copiar su ",(0,t.kt)("strong",{parentName:"p"},"API_KEY")," de su archivo ",(0,t.kt)("strong",{parentName:"p"},".env")," y copiarla aqu\xed."),(0,t.kt)("p",null,"Por \xfaltimo para crear su base de datos de prueba\nejecuta el siguiente commando:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"php artisan migrate --database=anuncios_prueba --seed\n")),(0,t.kt)("p",null,"Si la base de datos no existe se le preguntara si desea crearla diga yes."),(0,t.kt)("p",null,"Despu\xe9s de esto y si no ha habido ning\xfan error puede consultar la BB.DD para ver que se ha creado correctamente."),(0,t.kt)("h3",{id:"creando-nuestro-primer-test"},"Creando nuestro primer test"),(0,t.kt)("p",null,"Para crear el test debe ejecutar ejecutar el siguiente commando:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"php artisan make:test --unit  AnuncioControllerTest\n")),(0,t.kt)("p",null,"Seguidamente dir\xedjase a la carpeta ",(0,t.kt)("strong",{parentName:"p"},"tests/Unit/AnuncioControllerTest.php")," deber\xe1 encontrar el siguiente archivo ",(0,t.kt)("strong",{parentName:"p"},"AnuncioControllerTest.php"),"."),(0,t.kt)("p",null,"Edite el archivo e introduzca el siguiente c\xf3digo:"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace Tests\\Unit\\Controllers;\n\nuse App\\Http\\Controllers\\AnuncioController;\nuse App\\Models\\Anuncio;\nuse Illuminate\\Foundation\\Testing\\RefreshDatabase;\nuse Illuminate\\Http\\UploadedFile;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Tests\\TestCase;\n\nclass AnuncioControllerTest extends TestCase\n{\n   // use RefreshDatabase;\n\n    \n    /** @test */\n    public function it_can_create_an_anuncio()\n    {\n        $this->withoutExceptionHandling();\n\n        Storage::fake('public');\n\n        $anuncioData = [\n            'user_id'=>'1',\n            'titulo' => 'Nuevo anuncio',\n            'description' => 'Descripci\xf3n del nuevo anuncio',\n            'imagen' => UploadedFile::fake()->image('anuncio.jpg'),\n            'precio' => 50.5,\n            'subcategoria_id' => 1,\n            'provincia' => '08',\n            'codprovincia' => '28',\n            'telefono'=>'3912589',\n            'estado_id'=>1,\n            'cod_postal'=>'08924'\n        ];\n\n        $controller = new AnuncioController();\n\n        $response = $controller->store($this->createRequest($anuncioData));\n\n        $anuncio = Anuncio::latest()->first();\n\n        $this->assertEquals($anuncioData['titulo'], $anuncio->titulo);\n        $this->assertEquals($anuncioData['description'], $anuncio->description);\n        $this->assertEquals($anuncioData['precio'], $anuncio->precio);\n        $this->assertEquals($anuncioData['subcategoria_id'], $anuncio->subcategoria_id);\n        $this->assertEquals($anuncioData['provincia'], $anuncio->provincia);\n         $this->assertEquals($anuncioData['cod_postal'], $anuncio->cod_postal);\n\n      //  $response->assertRedirect(route('anuncios.show', $anuncio->id));\n    }\n\n    private function createRequest(array $data): \\Illuminate\\Http\\Request\n    {\n        $request = new \\Illuminate\\Http\\Request();\n        $request->replace($data);\n        $request->setMethod('POST');\n        return $request;\n    }\n}\n")))}d.isMDXComponent=!0}}]);