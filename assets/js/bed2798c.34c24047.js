"use strict";(self.webpackChunkeloquent=self.webpackChunkeloquent||[]).push([[8075],{3905:(e,a,n)=>{n.d(a,{Zo:()=>d,kt:()=>k});var o=n(7294);function l(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function t(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?t(Object(n),!0).forEach((function(a){l(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,o,l=function(e,a){if(null==e)return{};var n,o,l={},t=Object.keys(e);for(o=0;o<t.length;o++)n=t[o],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(o=0;o<t.length;o++)n=t[o],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var i=o.createContext({}),u=function(e){var a=o.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):r(r({},a),e)),n},d=function(e){var a=u(e.components);return o.createElement(i.Provider,{value:a},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},m=o.forwardRef((function(e,a){var n=e.components,l=e.mdxType,t=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=l,k=p["".concat(i,".").concat(m)]||p[m]||c[m]||t;return n?o.createElement(k,r(r({ref:a},d),{},{components:n})):o.createElement(k,r({ref:a},d))}));function k(e,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var t=n.length,r=new Array(t);r[0]=m;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s[p]="string"==typeof e?e:l,r[1]=s;for(var u=2;u<t;u++)r[u]=n[u];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6333:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>r,default:()=>c,frontMatter:()=>t,metadata:()=>s,toc:()=>u});var o=n(7462),l=(n(7294),n(3905));const t={sidebar_position:6},r="Consultas Eloquent",s={unversionedId:"tutorial-basics/consultas",id:"tutorial-basics/consultas",title:"Consultas Eloquent",description:"\xbfQu\xe9 son las consultas en Eloquent?",source:"@site/docs/tutorial-basics/consultas.mdx",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/consultas",permalink:"/curso-laravel/docs/tutorial-basics/consultas",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/consultas.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Rellenando la BB.DD",permalink:"/curso-laravel/docs/tutorial-basics/seeders"},next:{title:"Eloquent y SQL",permalink:"/curso-laravel/docs/category/eloquent-y-sql"}},i={},u=[{value:"\xbfQu\xe9 son las consultas en Eloquent?",id:"qu\xe9-son-las-consultas-en-eloquent",level:2},{value:"C\xf3mo utilizar Eloquent para encadenar m\xe9todos y construir consultas.",id:"c\xf3mo-utilizar-eloquent-para-encadenar-m\xe9todos-y-construir-consultas",level:2},{value:"m\xe9todos",id:"m\xe9todos",level:2},{value:"all",id:"all",level:3},{value:"avg()",id:"avg",level:3},{value:"chunk",id:"chunk",level:3},{value:"count()",id:"count",level:3},{value:"create",id:"create",level:3},{value:"delete",id:"delete",level:3},{value:"distinct",id:"distinct",level:3},{value:"find",id:"find",level:3},{value:"first",id:"first",level:3},{value:"get",id:"get",level:3},{value:"groupBy",id:"groupby",level:3},{value:"has",id:"has",level:3},{value:"join",id:"join",level:3},{value:"max",id:"max",level:3},{value:"min",id:"min",level:3},{value:"orderBy",id:"orderby",level:3},{value:"pluck",id:"pluck",level:3},{value:"save",id:"save",level:3},{value:"select",id:"select",level:3},{value:"sum",id:"sum",level:3},{value:"update",id:"update",level:3},{value:"where",id:"where",level:3},{value:"Otros m\xe9todos",id:"otros-m\xe9todos",level:2},{value:"findOrFaild",id:"findorfaild",level:3},{value:"first",id:"first-1",level:3},{value:"firstOrFail",id:"firstorfail",level:3},{value:"exist",id:"exist",level:3},{value:"orWhere",id:"orwhere",level:3},{value:"whereIn",id:"wherein",level:3},{value:"whereNotIn",id:"wherenotin",level:3},{value:"whereBetween",id:"wherebetween",level:3},{value:"whereNull",id:"wherenull",level:3},{value:"whereNotNull",id:"wherenotnull",level:3},{value:"whereDate",id:"wheredate",level:3},{value:"whereMonth",id:"wheremonth",level:3},{value:"whereDay",id:"whereday",level:3},{value:"whereYear",id:"whereyear",level:3},{value:"whereHas",id:"wherehas",level:3},{value:"whereDoesntHave",id:"wheredoesnthave",level:3}],d={toc:u},p="wrapper";function c(e){let{components:a,...n}=e;return(0,l.kt)(p,(0,o.Z)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"consultas-eloquent"},"Consultas Eloquent"),(0,l.kt)("h2",{id:"qu\xe9-son-las-consultas-en-eloquent"},"\xbfQu\xe9 son las consultas en Eloquent?"),(0,l.kt)("p",null,"Las consultas en Eloquent son una forma de interactuar con la base de datos mediante la recuperaci\xf3n, creaci\xf3n, actualizaci\xf3n o eliminaci\xf3n de registros. Eloquent proporciona una serie de m\xe9todos y opciones para construir y ejecutar consultas de manera intuitiva y f\xe1cil de entender."),(0,l.kt)("p",null,"Con Eloquent, las consultas se construyen a trav\xe9s de la creaci\xf3n de instancias de la clase ",(0,l.kt)("inlineCode",{parentName:"p"},"Illuminate\\Database\\Eloquent\\Builder")," y el uso de sus m\xe9todos. Los m\xe9todos de consulta de Eloquent se encargan de construir la consulta SQL adecuada seg\xfan los par\xe1metros proporcionados."),(0,l.kt)("p",null,"Eloquent soporta una amplia variedad de operadores y cl\xe1usulas, como ",(0,l.kt)("inlineCode",{parentName:"p"},"where"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"orWhere"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"whereIn"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"whereBetween"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"orderBy"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"groupBy"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"having"),", entre otros. Adem\xe1s, es posible crear consultas complejas con m\xfaltiples condiciones y subconsultas."),(0,l.kt)("p",null,"Las consultas en Eloquent tambi\xe9n soportan relaciones entre modelos, lo que permite obtener registros relacionados utilizando m\xe9todos como ",(0,l.kt)("inlineCode",{parentName:"p"},"with"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"has"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"whereHas"),", entre otros."),(0,l.kt)("h2",{id:"c\xf3mo-utilizar-eloquent-para-encadenar-m\xe9todos-y-construir-consultas"},"C\xf3mo utilizar Eloquent para encadenar m\xe9todos y construir consultas."),(0,l.kt)("p",null,"En Eloquent, las consultas son utilizadas para recuperar datos de la base de datos. Una de las caracter\xedsticas m\xe1s poderosas de Eloquent es su lenguaje fluido, que permite encadenar m\xe9todos para construir consultas complejas de forma muy legible y mantenible."),(0,l.kt)("p",null,"Para construir una consulta en Eloquent, se empieza por llamar al m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"DB::table")," o al m\xe9todo est\xe1tico ",(0,l.kt)("inlineCode",{parentName:"p"},"Model::query")," del modelo en cuesti\xf3n, dependiendo de si se quiere construir una consulta para una tabla en particular o para un modelo espec\xedfico. A partir de ah\xed, se pueden encadenar una serie de m\xe9todos para construir la consulta deseada."),(0,l.kt)("p",null,"Algunos ejemplos de m\xe9todos que se pueden utilizar para construir consultas en Eloquent son:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"select"),": para seleccionar las columnas que se quieren recuperar."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"where"),": para filtrar los resultados seg\xfan una condici\xf3n dada."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"orWhere"),': para agregar una condici\xf3n "o".'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"whereIn")," / ",(0,l.kt)("inlineCode",{parentName:"li"},"whereNotIn"),": para filtrar seg\xfan si el valor de una columna est\xe1 en una lista de valores dada."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"orderBy"),": para ordenar los resultados por una columna dada."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"groupBy"),": para agrupar los resultados por una columna dada."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"join"),": para realizar una uni\xf3n con otra tabla."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"leftJoin"),": para realizar una uni\xf3n izquierda con otra tabla."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"count"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"max"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"min"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"sum"),": para obtener valores agregados de una columna.")),(0,l.kt)("p",null,'Por ejemplo, para construir una consulta que seleccione los usuarios cuyo correo electr\xf3nico termine en "@gmail.com" y los ordene por orden alfab\xe9tico, se puede utilizar el siguiente c\xf3digo:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$users = DB::table('users')\n            ->select('name', 'email')\n            ->where('email', 'like', '%@gmail.com')\n            ->orderBy('name')\n            ->get();\n")),(0,l.kt)("p",null,"Este c\xf3digo primero selecciona las columnas ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," y ",(0,l.kt)("inlineCode",{parentName:"p"},"email")," de la tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"users"),", luego filtra los resultados para seleccionar solo aquellos donde la columna ",(0,l.kt)("inlineCode",{parentName:"p"},"email"),' termina en "@gmail.com", y finalmente los ordena por la columna ',(0,l.kt)("inlineCode",{parentName:"p"},"name"),"."),(0,l.kt)("p",null,"El resultado de la consulta se almacena en la variable ",(0,l.kt)("inlineCode",{parentName:"p"},"$users"),", que contendr\xe1 una colecci\xf3n de objetos que representan los resultados de la consulta."),(0,l.kt)("h2",{id:"m\xe9todos"},"m\xe9todos"),(0,l.kt)("p",null,"Los m\xe9todos Eloquent son un conjunto de funciones\nproporcionadas por el ORM de Laravel, Eloquent, para interactuar\ncon la base de datos a trav\xe9s de modelos. Estos m\xe9todos permiten\nrealizar diversas operaciones en la base de datos, como recuperar\ndatos, insertar, actualizar y eliminar registros, establecer\nrelaciones entre tablas, entre otras. Los m\xe9todos Eloquent son\nllamados directamente en los modelos y se encargan de generar las\nconsultas SQL correspondientes y manejar los resultados devueltos.\nSon una de las caracter\xedsticas clave que hacen de Laravel y\nEloquent una combinaci\xf3n tan poderosa para el desarrollo de\naplicaciones web."),(0,l.kt)("h3",{id:"all"},"all"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"all")," de Eloquent es utilizado para obtener todos los registros de una tabla en la base de datos. Este m\xe9todo devuelve una colecci\xf3n de objetos de modelo, que representan a cada registro en la tabla."),(0,l.kt)("p",null,"El uso b\xe1sico del m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"all")," es el siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$users = App\\Models\\User::all();\n")),(0,l.kt)("p",null,"En este ejemplo, se obtienen todos los registros de la tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"users")," en la base de datos y se almacenan en la variable ",(0,l.kt)("inlineCode",{parentName:"p"},"$users"),". Cada registro es representado por un objeto de modelo ",(0,l.kt)("inlineCode",{parentName:"p"},"User"),"."),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"all")," tambi\xe9n acepta una lista de columnas para seleccionar solamente aquellas columnas espec\xedficas de la tabla. Por ejemplo:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$users = App\\Models\\User::all(['id', 'name']);\n")),(0,l.kt)("p",null,"En este ejemplo, se seleccionan solamente las columnas ",(0,l.kt)("inlineCode",{parentName:"p"},"id")," y ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," de la tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"users"),"."),(0,l.kt)("p",null,"Cabe mencionar que el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"all")," puede no ser adecuado para tablas con\ngrandes cantidades de registros, ya que puede consumir una gran cantidad\nde recursos al cargar todos los registros en memoria. En estos casos,\nes recomendable utilizar m\xe9todos que permitan la paginaci\xf3n o la\nlimitaci\xf3n de resultados, como ",(0,l.kt)("inlineCode",{parentName:"p"},"paginate")," o ",(0,l.kt)("inlineCode",{parentName:"p"},"take"),"."),(0,l.kt)("h3",{id:"avg"},"avg()"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"avg()")," de Eloquent se utiliza para obtener el promedio de los valores de una columna espec\xedfica en la tabla de la base de datos. Por ejemplo, si queremos obtener el promedio de la edad de todos los usuarios en una tabla de usuarios, podemos usar el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"avg()")," de la siguiente manera:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$averageAge = User::avg('age');\n")),(0,l.kt)("p",null,"En este ejemplo, ",(0,l.kt)("inlineCode",{parentName:"p"},"User")," es el modelo de Eloquent para la tabla de usuarios, y ",(0,l.kt)("inlineCode",{parentName:"p"},"age")," es el nombre de la columna que contiene la edad de cada usuario. El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"avg()")," devuelve un valor decimal que representa el promedio de la columna especificada. Si no hay registros en la tabla que coincidan con la consulta, el m\xe9todo devuelve ",(0,l.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,l.kt)("p",null,"Tambi\xe9n es posible utilizar el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"avg()")," en combinaci\xf3n con el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"groupBy()")," para obtener el promedio de una columna espec\xedfica para cada grupo en la tabla. Por ejemplo, si queremos obtener el promedio de la edad de los usuarios para cada ciudad en la tabla de usuarios, podemos usar el siguiente c\xf3digo:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$averageAgeByCity = User::groupBy('city')\n                        ->selectRaw('city, AVG(age) as average_age')\n                        ->get();\n")),(0,l.kt)("p",null,"En este ejemplo, el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"groupBy()")," agrupa los resultados por\nla columna ",(0,l.kt)("inlineCode",{parentName:"p"},"city"),", y el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"selectRaw()")," se utiliza para seleccionar\nla columna ",(0,l.kt)("inlineCode",{parentName:"p"},"city")," y el promedio de la columna ",(0,l.kt)("inlineCode",{parentName:"p"},"age")," para cada grupo.\nEl resultado es una colecci\xf3n de objetos que contienen el nombre de la\nciudad y el promedio de la edad de los usuarios en esa ciudad."),(0,l.kt)("h3",{id:"chunk"},"chunk"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"chunk")," de Eloquent permite recuperar registros de la base de datos en lotes, en lugar de recuperar todos los registros de una vez. Esto es especialmente \xfatil cuando se manejan grandes conjuntos de datos que pueden consumir mucha memoria."),(0,l.kt)("p",null,"El m\xe9todo acepta dos argumentos: el tama\xf1o del lote y una funci\xf3n de retorno de llamada que se ejecutar\xe1 para cada lote de registros recuperados. La funci\xf3n de retorno de llamada recibe como argumento una instancia de colecci\xf3n que contiene los registros recuperados."),(0,l.kt)("p",null,"Un ejemplo de uso del m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"chunk")," ser\xeda el siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// Recuperar todos los usuarios en lotes de 100\nUser::chunk(100, function ($users) {\n    foreach ($users as $user) {\n        // procesar cada usuario\n    }\n});\n")),(0,l.kt)("p",null,"Este c\xf3digo recuperar\xe1 los registros de la tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"users")," en lotes de 100 y\nejecutar\xe1 la funci\xf3n de retorno de llamada para cada lote.\nLa funci\xf3n de retorno de llamada recibir\xe1 una\ncolecci\xf3n que contiene hasta 100 registros."),(0,l.kt)("h3",{id:"count"},"count()"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"count()")," de Eloquent permite contar la cantidad de registros que hay en una tabla de la base de datos que correspondan a las condiciones especificadas en la consulta."),(0,l.kt)("p",null,"Se puede llamar al m\xe9todo sin ning\xfan par\xe1metro para obtener el total de registros de la tabla, o con uno o varios argumentos para obtener el total de registros que cumplan las condiciones especificadas."),(0,l.kt)("p",null,"Por ejemplo, si queremos obtener el total de usuarios en una tabla llamada ",(0,l.kt)("inlineCode",{parentName:"p"},"users"),", podemos usar el m\xe9todo de la siguiente manera:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$totalUsers = User::count();\n")),(0,l.kt)("p",null,"Tambi\xe9n podemos obtener el total de usuarios que cumplan ciertas condiciones, por ejemplo, que tengan el campo ",(0,l.kt)("inlineCode",{parentName:"p"},"status"),' igual a "activo":'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$totalActiveUsers = User::where('status', 'activo')->count();\n")),(0,l.kt)("p",null,"Este m\xe9todo puede ser \xfatil en diversas situaciones,\ncomo para obtener estad\xedsticas sobre la cantidad de registros que cumplen\nciertas condiciones, para realizar paginaci\xf3n, entre otros casos."),(0,l.kt)("h3",{id:"create"},"create"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"create")," de Eloquent permite crear un nuevo registro en la base de datos a partir de un array asociativo de atributos. Es decir, podemos crear un nuevo modelo y persistirlo en la base de datos en una sola operaci\xf3n. La sintaxis b\xe1sica es la siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// Creamos un nuevo modelo\n$user = User::create([\n    'name' => 'John Doe',\n    'email' => 'johndoe@example.com',\n    'password' => bcrypt('secret'),\n]);\n")),(0,l.kt)("p",null,"En este ejemplo, estamos creando un nuevo modelo de ",(0,l.kt)("inlineCode",{parentName:"p"},"User")," y especificando los atributos que queremos asignarle mediante un array asociativo. Los nombres de las claves del array deben coincidir con los nombres de las columnas de la tabla en la base de datos."),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"create")," tambi\xe9n devuelve una instancia del modelo reci\xe9n creado, lo que nos permite encadenar m\xe9todos adicionales si lo deseamos. Adem\xe1s, si existe una restricci\xf3n de clave \xfanica en la tabla para alg\xfan campo incluido en el array de atributos, Laravel lanzar\xe1 una excepci\xf3n de tipo ",(0,l.kt)("inlineCode",{parentName:"p"},"Illuminate\\Database\\QueryException")," si intentamos crear un registro que viole esa restricci\xf3n."),(0,l.kt)("p",null,"Es importante tener en cuenta que el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"create")," no valida autom\xe1ticamente los datos proporcionados. Si necesitamos validar los datos antes de crear el modelo, deber\xedamos utilizar el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"validate")," del objeto ",(0,l.kt)("inlineCode",{parentName:"p"},"Illuminate\\Validation\\Validator")," antes de llamar al m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"create"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"// Validamos los datos\n$validator = Validator::make($request->all(), [\n    'name' => 'required|string|max:255',\n    'email' => 'required|string|email|max:255|unique:users',\n    'password' => 'required|string|min:8|confirmed',\n]);\n\nif ($validator->fails()) {\n    return redirect('register')\n                ->withErrors($validator)\n                ->withInput();\n}\n\n// Creamos un nuevo modelo\n$user = User::create([\n    'name' => $request->input('name'),\n    'email' => $request->input('email'),\n    'password' => bcrypt($request->input('password')),\n]);\n")),(0,l.kt)("p",null,"En este ejemplo, estamos utilizando el objeto ",(0,l.kt)("inlineCode",{parentName:"p"},"Validator")," para validar\nlos datos del formulario antes de crear el modelo. Si la validaci\xf3n falla,\nredirigimos al usuario de vuelta al formulario con los errores\ncorrespondientes. Si la validaci\xf3n pasa, creamos un nuevo modelo de ",(0,l.kt)("inlineCode",{parentName:"p"},"User"),"\na partir de los datos proporcionados por el usuario."),(0,l.kt)("h3",{id:"delete"},"delete"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"delete")," de Eloquent se utiliza para eliminar un registro de la base de datos. Puede ser llamado en un modelo espec\xedfico, lo que eliminar\xe1 la fila correspondiente en la tabla de la base de datos."),(0,l.kt)("p",null,"Por ejemplo, supongamos que tenemos un modelo ",(0,l.kt)("inlineCode",{parentName:"p"},"User")," y queremos eliminar un usuario en particular con un ID de 1. Podemos hacerlo as\xed:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$user = User::find(1);\n$user->delete();\n")),(0,l.kt)("p",null,"Tambi\xe9n se puede llamar al m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"delete")," directamente en una consulta, lo que eliminar\xe1 todas las filas que satisfagan los criterios de la consulta."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"User::where('active', false)->delete();\n")),(0,l.kt)("p",null,'Este ejemplo eliminar\xe1 todas las filas de la tabla "users" donde el campo "active" es falso. Cabe destacar que este m\xe9todo elimina directamente las filas de la base de datos sin pasar por la papelera de reciclaje,\npor lo que se debe tener cuidado al utilizarlo.'),(0,l.kt)("h3",{id:"distinct"},"distinct"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"distinct()")," se utiliza para obtener un conjunto de resultados distintos y \xfanicos de una columna espec\xedfica en una consulta. Por defecto, las consultas de Eloquent devuelven todos los resultados que coinciden con los criterios de la consulta, lo que puede incluir filas duplicadas. Pero si se desea obtener solamente los valores \xfanicos de una columna, se puede utilizar el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"distinct()"),"."),(0,l.kt)("p",null,"Este m\xe9todo se puede encadenar despu\xe9s del m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"select()")," para indicar que se desea obtener valores \xfanicos de la columna seleccionada. Por ejemplo:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$uniqueResults = DB::table('users')->select('name')->distinct()->get();\n")),(0,l.kt)("p",null,"Este c\xf3digo devuelve una colecci\xf3n de objetos de usuario, cada uno de los cuales tiene una propiedad ",(0,l.kt)("inlineCode",{parentName:"p"},"name"),", pero sin duplicados."),(0,l.kt)("p",null,"Cabe mencionar que el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"distinct()")," no puede ser\nutilizado junto con algunos m\xe9todos de agregaci\xf3n, como\n",(0,l.kt)("inlineCode",{parentName:"p"},"count()"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"max()"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"min()"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"avg()")," y ",(0,l.kt)("inlineCode",{parentName:"p"},"sum()"),". En tales casos, se puede\nutilizar una subconsulta para obtener los resultados \xfanicos de una columna\nen lugar de usar el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"distinct()"),"."),(0,l.kt)("h3",{id:"find"},"find"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"find()")," es utilizado para recuperar un solo modelo por su clave primaria. Toma como argumento la clave primaria del modelo que se desea recuperar y devuelve una instancia del modelo correspondiente. Si no se encuentra un modelo con la clave primaria especificada, se devuelve ",(0,l.kt)("inlineCode",{parentName:"p"},"null"),". "),(0,l.kt)("p",null,"Por ejemplo, para recuperar un registro de la tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"users")," por su clave primaria ",(0,l.kt)("inlineCode",{parentName:"p"},"id"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$user = User::find(1); // devuelve el usuario con ID 1 o null si no existe\n")),(0,l.kt)("p",null,"Tambi\xe9n es posible pasar un array de claves primarias como argumento para recuperar varios modelos a la vez:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$users = User::find([1, 2, 3]); // devuelve una colecci\xf3n de usuarios con IDs 1, 2 y 3\n")),(0,l.kt)("p",null,"Es importante destacar que ",(0,l.kt)("inlineCode",{parentName:"p"},"find()")," solo busca por clave primaria,\nno se pueden utilizar otros campos de la tabla como criterios de b\xfasqueda."),(0,l.kt)("h3",{id:"first"},"first"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"first()")," es utilizado para obtener el primer registro que cumple con las condiciones especificadas en una consulta. Es similar al m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"get()"),", pero en lugar de devolver una colecci\xf3n de registros, devuelve solo el primer registro. "),(0,l.kt)("p",null,"Por ejemplo, para obtener el primer usuario registrado en la base de datos, se puede utilizar el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"first()")," de la siguiente manera:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$user = User::first();\n")),(0,l.kt)("p",null,"Si se quiere obtener el primer usuario que cumpla con ciertas condiciones, se puede encadenar el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"where()")," a la consulta:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$user = User::where('name', 'John')->first();\n")),(0,l.kt)("p",null,"Este m\xe9todo es \xfatil cuando se sabe que solo se necesita un registro espec\xedfico y no es necesario recuperar todos los registros que\ncumplen con las condiciones especificadas."),(0,l.kt)("h3",{id:"get"},"get"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"get()")," es utilizado para recuperar todos los registros de una tabla. Este m\xe9todo es utilizado para ejecutar una consulta y recuperar una colecci\xf3n de objetos ",(0,l.kt)("inlineCode",{parentName:"p"},"Illuminate\\Database\\Eloquent\\Model"),". "),(0,l.kt)("p",null,"Por defecto, ",(0,l.kt)("inlineCode",{parentName:"p"},"get()")," devuelve todos los registros de la tabla asociada al modelo. Tambi\xe9n se puede utilizar para obtener un conjunto de registros que coincidan con una condici\xf3n espec\xedfica pasada como argumento en el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"where()"),". "),(0,l.kt)("p",null,'Por ejemplo, si queremos obtener todos los usuarios que tengan un nombre espec\xedfico "John", podemos hacer lo siguiente:'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$users = App\\Models\\User::where('name', 'John')->get();\n")),(0,l.kt)("p",null,"Esto devolver\xe1 una colecci\xf3n de objetos ",(0,l.kt)("inlineCode",{parentName:"p"},"User")," que coincidan con la condici\xf3n especificada. Tambi\xe9n podemos encadenar m\xfaltiples condiciones en una consulta utilizando el lenguaje fluido:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$users = App\\Models\\User::where('name', 'John')\n                ->where('email', 'like', '%example.com')\n                ->get();\n")),(0,l.kt)("p",null,"Este ejemplo devolver\xe1 una colecci\xf3n de objetos ",(0,l.kt)("inlineCode",{parentName:"p"},"User"),' que tengan el nombre "John" y cuyo correo electr\xf3nico termine en "example.com". '),(0,l.kt)("p",null,"Una vez que se ha recuperado la colecci\xf3n de objetos,\nse puede iterar sobre ella y acceder a sus propiedades y m\xe9todos,\ncomo cualquier otro objeto de Eloquent."),(0,l.kt)("h3",{id:"groupby"},"groupBy"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"groupBy")," se utiliza para agrupar los resultados de la consulta por una columna determinada. Toma como argumento el nombre de la columna por la cual se desea agrupar los resultados."),(0,l.kt)("p",null,"Por ejemplo, si deseamos agrupar los registros de una tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"users")," por su pa\xeds de origen, podr\xedamos utilizar el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"groupBy")," de la siguiente manera:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$usersByCountry = DB::table('users')\n                    ->select('country', DB::raw('count(*) as total'))\n                    ->groupBy('country')\n                    ->get();\n")),(0,l.kt)("p",null,"En este ejemplo, la consulta selecciona la columna ",(0,l.kt)("inlineCode",{parentName:"p"},"country")," de la tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"users"),", junto con una columna calculada utilizando la funci\xf3n ",(0,l.kt)("inlineCode",{parentName:"p"},"count(*)")," de SQL que cuenta el n\xfamero total de registros agrupados por pa\xeds. Luego, se llama al m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"groupBy('country')")," para agrupar los registros por pa\xeds, y finalmente se obtienen los resultados con el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"get()"),"."),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"groupBy")," tambi\xe9n puede tomar m\xfaltiples\nargumentos para agrupar los resultados por varias columnas."),(0,l.kt)("h3",{id:"has"},"has"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"has")," se utiliza para verificar si una relaci\xf3n espec\xedfica existe para un modelo. Por ejemplo, si tenemos un modelo de ",(0,l.kt)("inlineCode",{parentName:"p"},"Usuario")," que tiene una relaci\xf3n de ",(0,l.kt)("inlineCode",{parentName:"p"},"Posts"),", podemos verificar si un usuario tiene alg\xfan post utilizando el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"has"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$user = User::find(1);\n\nif ($user->has('posts')) {\n    // El usuario tiene al menos un post\n} else {\n    // El usuario no tiene ning\xfan post\n}\n")),(0,l.kt)("p",null,"Tambi\xe9n es posible agregar restricciones a la consulta de la relaci\xf3n. Por ejemplo, para verificar si un usuario tiene al menos un post publicado, se puede utilizar:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$user = User::find(1);\n\nif ($user->has('posts', '>', 0)->where('publicado', true)->exists()) {\n    // El usuario tiene al menos un post publicado\n} else {\n    // El usuario no tiene ning\xfan post publicado\n}\n")),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"has")," tambi\xe9n puede ser utilizado en una consulta, para filtrar los resultados basados en la existencia de una relaci\xf3n. Por ejemplo, para obtener todos los usuarios que tienen al menos un post publicado:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$users = User::has('posts', '>', 0)->whereHas('posts', function ($query) {\n    $query->where('publicado', true);\n})->get();\n")),(0,l.kt)("p",null,"En este ejemplo, utilizamos el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"whereHas")," para agregar una restricci\xf3n a la consulta de la relaci\xf3n. La consulta resultante incluir\xe1 \xfanicamente\nlos usuarios que tengan al menos un post publicado."),(0,l.kt)("h3",{id:"join"},"join"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"join()")," se utiliza para realizar una uni\xf3n entre dos o m\xe1s tablas en una consulta SQL. Permite especificar la relaci\xf3n entre las tablas mediante la cl\xe1usula ",(0,l.kt)("inlineCode",{parentName:"p"},"ON"),". "),(0,l.kt)("p",null,"El m\xe9todo acepta varios par\xe1metros: "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"La primera variable es la tabla a la que se va a unir."),(0,l.kt)("li",{parentName:"ul"},"La segunda variable es la columna de la tabla base que se va a utilizar para unir la tabla especificada."),(0,l.kt)("li",{parentName:"ul"},"La tercera variable es la columna de la tabla especificada que se va a utilizar para unir la tabla base."),(0,l.kt)("li",{parentName:"ul"},"El cuarto par\xe1metro es un operador l\xf3gico como ",(0,l.kt)("inlineCode",{parentName:"li"},"AND")," o ",(0,l.kt)("inlineCode",{parentName:"li"},"OR"),".")),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"join()")," devuelve una instancia de la clase ",(0,l.kt)("inlineCode",{parentName:"p"},"Illuminate\\Database\\Query\\Builder")," que se puede utilizar para construir consultas m\xe1s complejas. "),(0,l.kt)("p",null,"Aqu\xed hay un ejemplo de c\xf3mo utilizar el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"join()")," para unir dos tablas:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$users = DB::table('users')\n            ->join('orders', 'users.id', '=', 'orders.user_id')\n            ->select('users.*', 'orders.price')\n            ->get();\n")),(0,l.kt)("p",null,"Este ejemplo une la tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"users")," con la tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"orders")," usando la columna ",(0,l.kt)("inlineCode",{parentName:"p"},"id"),"\nde la tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"users")," y la columna ",(0,l.kt)("inlineCode",{parentName:"p"},"user_id")," de la tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"orders"),".\nLa consulta devuelve todas las columnas de la tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"users")," y la columna\n",(0,l.kt)("inlineCode",{parentName:"p"},"price")," de la tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"orders"),"."),(0,l.kt)("h3",{id:"max"},"max"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"join()")," se utiliza para realizar una uni\xf3n entre dos o m\xe1s tablas en una consulta SQL. Permite especificar la relaci\xf3n entre las tablas mediante la cl\xe1usula ",(0,l.kt)("inlineCode",{parentName:"p"},"ON"),". "),(0,l.kt)("p",null,"El m\xe9todo acepta varios par\xe1metros: "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"La primera variable es la tabla a la que se va a unir."),(0,l.kt)("li",{parentName:"ul"},"La segunda variable es la columna de la tabla base que se va a utilizar para unir la tabla especificada."),(0,l.kt)("li",{parentName:"ul"},"La tercera variable es la columna de la tabla especificada que se va a utilizar para unir la tabla base."),(0,l.kt)("li",{parentName:"ul"},"El cuarto par\xe1metro es un operador l\xf3gico como ",(0,l.kt)("inlineCode",{parentName:"li"},"AND")," o ",(0,l.kt)("inlineCode",{parentName:"li"},"OR"),".")),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"join()")," devuelve una instancia de la clase ",(0,l.kt)("inlineCode",{parentName:"p"},"Illuminate\\Database\\Query\\Builder")," que se puede utilizar para construir consultas m\xe1s complejas. "),(0,l.kt)("p",null,"Aqu\xed hay un ejemplo de c\xf3mo utilizar el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"join()")," para unir dos tablas:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$users = DB::table('users')\n            ->join('orders', 'users.id', '=', 'orders.user_id')\n            ->select('users.*', 'orders.price')\n            ->get();\n")),(0,l.kt)("p",null,"Este ejemplo une la tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"users")," con la tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"orders")," usando la columna ",(0,l.kt)("inlineCode",{parentName:"p"},"id")," de la tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"users")," y la columna ",(0,l.kt)("inlineCode",{parentName:"p"},"user_id")," de la tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"orders"),". La consulta devuelve todas las columnas de la tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"users")," y\nla columna ",(0,l.kt)("inlineCode",{parentName:"p"},"price")," de la tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"orders"),"."),(0,l.kt)("h3",{id:"min"},"min"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"min")," de Eloquent es utilizado para obtener el valor m\xednimo de una columna de la tabla de la base de datos."),(0,l.kt)("p",null,"Para utilizar este m\xe9todo, se debe encadenar al objeto de consulta el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"min")," y pasarle como par\xe1metro el nombre de la columna a la que se desea aplicar el m\xe9todo:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$minPrice = DB::table('products')->min('price');\n")),(0,l.kt)("p",null,'En este ejemplo, se obtendr\xe1 el precio m\xednimo de todos los productos de la tabla "products".'),(0,l.kt)("p",null,"Tambi\xe9n se puede utilizar este m\xe9todo con el modelo Eloquent:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$minPrice = Product::min('price');\n")),(0,l.kt)("p",null,"En este caso, se obtendr\xe1 el precio m\xednimo de todos los productos representados por el modelo ",(0,l.kt)("inlineCode",{parentName:"p"},"Product"),"."),(0,l.kt)("p",null,"Es importante mencionar que este m\xe9todo s\xf3lo funciona con columnas num\xe9ricas. Si se intenta utilizar con una columna de tipo cadena,\nse obtendr\xe1 un resultado inesperado o un error."),(0,l.kt)("h3",{id:"orderby"},"orderBy"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"orderBy")," se utiliza para ordenar los resultados de una consulta seg\xfan una o m\xe1s columnas especificadas. Se pueden encadenar m\xfaltiples llamadas a este m\xe9todo para ordenar por varias columnas."),(0,l.kt)("p",null,"La sintaxis b\xe1sica del m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"orderBy")," es la siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"->orderBy('columna', 'direcci\xf3n');\n")),(0,l.kt)("p",null,"Donde ",(0,l.kt)("inlineCode",{parentName:"p"},"'columna'")," es el nombre de la columna por la que se desea ordenar, y ",(0,l.kt)("inlineCode",{parentName:"p"},"'direcci\xf3n'")," es la direcci\xf3n de la ordenaci\xf3n (opcional). La direcci\xf3n predeterminada es ascendente (",(0,l.kt)("inlineCode",{parentName:"p"},"'asc'"),"), pero se puede especificar ",(0,l.kt)("inlineCode",{parentName:"p"},"'desc'")," para ordenar descendente."),(0,l.kt)("p",null,"Tambi\xe9n se puede pasar un arreglo de columnas y direcciones de ordenaci\xf3n para ordenar por m\xfaltiples columnas. Por ejemplo:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"->orderBy([\n    'columna1' => 'asc',\n    'columna2' => 'desc',\n]);\n")),(0,l.kt)("p",null,"Este m\xe9todo es muy \xfatil para ordenar los resultados de una consulta seg\xfan diferentes criterios, como por ejemplo ordenar por fecha y hora,\no por un campo num\xe9rico de forma descendente."),(0,l.kt)("h3",{id:"pluck"},"pluck"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"pluck")," en Eloquent se utiliza para obtener un array de valores de una \xfanica columna de la tabla de la base de datos. Se proporciona el nombre de la columna de la que se desea recuperar los valores y devuelve una colecci\xf3n de esos valores."),(0,l.kt)("p",null,"La sintaxis b\xe1sica del m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"pluck")," es la siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$users = DB::table('users')->pluck('name');\n")),(0,l.kt)("p",null,"Esto recuperar\xe1 todos los valores de la columna ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," de la tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"users")," y los almacenar\xe1 en la variable ",(0,l.kt)("inlineCode",{parentName:"p"},"$users"),". Si desea recuperar los valores de otra columna, simplemente cambie el nombre de la columna en el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"pluck"),"."),(0,l.kt)("p",null,"Tambi\xe9n puede especificar un segundo argumento para indicar el nombre de la columna que se utilizar\xe1 como clave de la matriz resultante. Por ejemplo:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$users = DB::table('users')->pluck('name', 'id');\n")),(0,l.kt)("p",null,"Esto recuperar\xe1 los valores de la columna ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," y los utilizar\xe1 como valores de la matriz resultante. Los valores de la columna ",(0,l.kt)("inlineCode",{parentName:"p"},"id")," se utilizar\xe1n como claves de la matriz."),(0,l.kt)("p",null,"Tambi\xe9n es posible encadenar otros m\xe9todos de consulta a ",(0,l.kt)("inlineCode",{parentName:"p"},"pluck"),"\npara filtrar o limitar los resultados recuperados."),(0,l.kt)("h3",{id:"save"},"save"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"save()")," se utiliza para guardar un modelo en la base de datos. Si el modelo ya existe en la base de datos, se actualizar\xe1 con los nuevos valores proporcionados en el modelo, de lo contrario, se crear\xe1 un nuevo registro con los valores proporcionados."),(0,l.kt)("p",null,"Por ejemplo, si tenemos un modelo ",(0,l.kt)("inlineCode",{parentName:"p"},"User")," con los atributos ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," y ",(0,l.kt)("inlineCode",{parentName:"p"},"email"),", podemos crear un nuevo registro en la base de datos utilizando el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"save()")," de la siguiente manera:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$user = new User;\n$user->name = 'John Doe';\n$user->email = 'john@example.com';\n$user->save();\n")),(0,l.kt)("p",null,"Tambi\xe9n podemos actualizar un registro existente utilizando el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"save()"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$user = User::find(1);\n$user->name = 'Jane Doe';\n$user->email = 'jane@example.com';\n$user->save();\n")),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"save()")," autom\xe1ticamente determina si se debe\ncrear un nuevo registro o actualizar uno existente en funci\xf3n del valor\nde la clave primaria del modelo."),(0,l.kt)("h3",{id:"select"},"select"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"select()")," se utiliza para seleccionar columnas espec\xedficas de una tabla en una consulta. Toma una lista de columnas como argumento y devuelve una instancia del constructor de consultas Eloquent con la lista de columnas seleccionadas. Por ejemplo, para seleccionar las columnas 'name' y 'email' de la tabla 'users':"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$users = DB::table('users')->select('name', 'email')->get();\n")),(0,l.kt)("p",null,"Tambi\xe9n es posible seleccionar todas las columnas de una tabla utilizando el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"select('*')"),". Adem\xe1s, el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"selectRaw()")," permite seleccionar columnas con una expresi\xf3n SQL personalizada. "),(0,l.kt)("p",null,"Es importante tener en cuenta que el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"select()")," no modifica la consulta actual sino que devuelve una nueva instancia del constructor de consultas con la selecci\xf3n realizada. Por lo tanto, es necesario encadenar otros m\xe9todos de consulta, como ",(0,l.kt)("inlineCode",{parentName:"p"},"where()")," o\n",(0,l.kt)("inlineCode",{parentName:"p"},"orderBy()"),", para completar la consulta."),(0,l.kt)("h3",{id:"sum"},"sum"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"sum()")," de Eloquent permite obtener la suma de un campo espec\xedfico en los registros de una tabla. Su sintaxis es la siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$suma = MiModelo::sum('campo');\n")),(0,l.kt)("p",null,"Donde ",(0,l.kt)("inlineCode",{parentName:"p"},"MiModelo")," es el nombre del modelo de Eloquent asociado a la tabla, y ",(0,l.kt)("inlineCode",{parentName:"p"},"'campo'")," es el nombre del campo del que se desea obtener la suma."),(0,l.kt)("p",null,"Por ejemplo, si se desea obtener la suma del campo ",(0,l.kt)("inlineCode",{parentName:"p"},"cantidad")," de la tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"ventas"),", se puede\nutilizar el m\xe9todo de la siguiente manera:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$suma = Venta::sum('cantidad');\n")),(0,l.kt)("p",null,"Este m\xe9todo devuelve un valor num\xe9rico con la suma de todos los registros\nde la tabla que contengan un valor en el campo especificado."),(0,l.kt)("h3",{id:"update"},"update"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"update")," es utilizado para actualizar uno o varios registros en la base de datos a partir de un modelo o una consulta Eloquent."),(0,l.kt)("p",null,"El m\xe9todo acepta un arreglo de datos clave-valor que representan los campos y valores que se desean actualizar en la tabla correspondiente. Por ejemplo:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$affectedRows = DB::table('users')\n              ->where('id', 1)\n              ->update(['name' => 'John']);\n")),(0,l.kt)("p",null,"Este c\xf3digo actualizar\xeda el nombre del usuario con ",(0,l.kt)("inlineCode",{parentName:"p"},"id"),' igual a 1 a "John".'),(0,l.kt)("p",null,"Tambi\xe9n es posible utilizar el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"update")," directamente desde un modelo Eloquent, lo que resulta en un c\xf3digo m\xe1s legible. Por ejemplo:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$user = User::find(1);\n$user->name = 'John';\n$user->save();\n")),(0,l.kt)("p",null,"Este c\xf3digo hace exactamente lo mismo que el ejemplo anterior, pero utilizando un modelo Eloquent. Primero se busca el usuario con ",(0,l.kt)("inlineCode",{parentName:"p"},"id")," igual a 1 y se actualiza su atributo ",(0,l.kt)("inlineCode",{parentName:"p"},"name"),' a "John". Finalmente, se guarda el modelo\npara persistir los cambios en la base de datos.'),(0,l.kt)("h3",{id:"where"},"where"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"where")," se utiliza para a\xf1adir una cl\xe1usula WHERE a la consulta de Eloquent. Esta cl\xe1usula permite filtrar los resultados de la consulta en funci\xf3n de una o varias condiciones. "),(0,l.kt)("p",null,"El m\xe9todo acepta varios tipos de par\xe1metros, como una cadena con el nombre de una columna y su valor correspondiente, un array con varias condiciones, o incluso una funci\xf3n de callback que permita crear condiciones m\xe1s complejas."),(0,l.kt)("p",null,'Por ejemplo, si queremos obtener todos los usuarios cuyo nombre sea "Juan", podemos utilizar el m\xe9todo ',(0,l.kt)("inlineCode",{parentName:"p"},"where")," de la siguiente manera:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$users = User::where('name', 'Juan')->get();\n")),(0,l.kt)("p",null,'Tambi\xe9n es posible utilizar operadores l\xf3gicos para combinar varias condiciones. Por ejemplo, si queremos obtener todos los usuarios cuyo nombre sea "Juan" y su edad sea mayor que 25, podemos utilizar el m\xe9todo ',(0,l.kt)("inlineCode",{parentName:"p"},"where")," de la siguiente manera:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$users = User::where('name', 'Juan')\n             ->where('age', '>', 25)\n             ->get();\n")),(0,l.kt)("p",null,"En este ejemplo, se est\xe1n encadenando dos m\xe9todos ",(0,l.kt)("inlineCode",{parentName:"p"},"where"),", lo que indica que la consulta debe incluir usuarios que cumplan ambas condiciones. Si en su lugar queremos que se cumpla al menos una de las dos condiciones, podemos utilizar el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"orWhere")," en lugar de ",(0,l.kt)("inlineCode",{parentName:"p"},"where"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$users = User::where('name', 'Juan')\n             ->orWhere('age', '>', 25)\n             ->get();\n")),(0,l.kt)("p",null,'Este ejemplo devolver\xe1 todos los usuarios cuyo nombre sea "Juan",\nas\xed como aquellos cuya edad sea mayor que 25.'),(0,l.kt)("h2",{id:"otros-m\xe9todos"},"Otros m\xe9todos"),(0,l.kt)("h3",{id:"findorfaild"},"findOrFaild"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"findOrFail")," de Eloquent busca un modelo por su clave primaria y lanza una excepci\xf3n de tipo ",(0,l.kt)("inlineCode",{parentName:"p"},"ModelNotFoundException")," si no lo encuentra. Este m\xe9todo es \xfatil cuando se espera que el modelo exista en la base de datos y se quiere manejar la excepci\xf3n en caso de que no sea as\xed."),(0,l.kt)("p",null,"Por ejemplo, si se quiere buscar un usuario por su ID y se espera que el usuario exista, se puede usar ",(0,l.kt)("inlineCode",{parentName:"p"},"findOrFail")," de la siguiente manera:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$user = User::findOrFail($id);\n")),(0,l.kt)("p",null,"Si el usuario con el ID especificado no existe en la base de datos,\nse lanzar\xe1 una excepci\xf3n ",(0,l.kt)("inlineCode",{parentName:"p"},"ModelNotFoundException"),"."),(0,l.kt)("h3",{id:"first-1"},"first"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"first")," en Eloquent se utiliza para recuperar el primer registro que cumple con las condiciones especificadas. Es similar al m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"get"),", pero en lugar de recuperar todos los registros que cumplen con las condiciones, solamente retorna el primer registro encontrado."),(0,l.kt)("p",null,"Este m\xe9todo toma como par\xe1metro opcional una cl\xe1usula ",(0,l.kt)("inlineCode",{parentName:"p"},"where")," para especificar las condiciones de b\xfasqueda. Por ejemplo, si deseas recuperar el primer usuario en la tabla de usuarios que tenga un nombre espec\xedfico, podr\xedas hacer lo siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$user = User::where('name', 'John')->first();\n")),(0,l.kt)("p",null,"Si no se especifican condiciones de b\xfasqueda, ",(0,l.kt)("inlineCode",{parentName:"p"},"first")," retorna el primer registro de la tabla. Si no hay registros en la tabla, ",(0,l.kt)("inlineCode",{parentName:"p"},"first")," retorna ",(0,l.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,l.kt)("p",null,"Es importante destacar que si se desea lanzar una excepci\xf3n si no se encuentra ning\xfan registro que cumpla con las condiciones especificadas,\nse puede utilizar el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"firstOrFail"),"."),(0,l.kt)("h3",{id:"firstorfail"},"firstOrFail"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"firstOrFail")," es similar al m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"first")," en que devuelve el primer modelo que cumple con las condiciones de la consulta. Sin embargo, si el modelo no se encuentra, lanza una excepci\xf3n ",(0,l.kt)("inlineCode",{parentName:"p"},"ModelNotFoundException"),". "),(0,l.kt)("p",null,"Esto puede ser \xfatil si se espera que el modelo exista y se desea manejar expl\xedcitamente el caso en que no se encuentre en lugar de tener que verificar si el resultado es nulo despu\xe9s de llamar a ",(0,l.kt)("inlineCode",{parentName:"p"},"first"),"."),(0,l.kt)("p",null,"Por ejemplo, supongamos que tenemos una tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"users")," con un campo ",(0,l.kt)("inlineCode",{parentName:"p"},"email")," que debe ser \xfanico. Podemos buscar un usuario por su direcci\xf3n de correo electr\xf3nico utilizando el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"firstOrFail")," de la siguiente manera:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$user = User::where('email', $email)->firstOrFail();\n")),(0,l.kt)("p",null,"Si no hay ning\xfan usuario con la direcci\xf3n de correo electr\xf3nico especificada en la consulta,\nse lanzar\xe1 una excepci\xf3n ",(0,l.kt)("inlineCode",{parentName:"p"},"ModelNotFoundException"),"."),(0,l.kt)("h3",{id:"exist"},"exist"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"exists")," en Eloquent se utiliza para verificar si existe al menos un registro que cumple con las condiciones especificadas. Devuelve ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," si existe al menos un registro, y ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," en caso contrario."),(0,l.kt)("p",null,"Este m\xe9todo puede ser \xfatil para verificar si un registro existe antes de intentar realizar alguna acci\xf3n sobre \xe9l. Por ejemplo, si se quiere actualizar un registro espec\xedfico, se puede usar ",(0,l.kt)("inlineCode",{parentName:"p"},"exists"),"\npara verificar si existe antes de intentar actualizarlo."),(0,l.kt)("p",null,"Aqu\xed hay un ejemplo de c\xf3mo se puede usar ",(0,l.kt)("inlineCode",{parentName:"p"},"exists"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"if (User::where('email', '=', 'johndoe@example.com')->exists()) {\n    // hacer algo si existe al menos un usuario con el correo electr\xf3nico especificado\n} else {\n    // hacer algo si no existe ning\xfan usuario con el correo electr\xf3nico especificado\n}\n")),(0,l.kt)("p",null,"En este ejemplo, se verifica si existe al menos un usuario en la\ntabla ",(0,l.kt)("inlineCode",{parentName:"p"},"users")," con el\ncorreo electr\xf3nico ",(0,l.kt)("inlineCode",{parentName:"p"},"'johndoe@example.com'"),". Si existe,\nse ejecutar\xe1 el primer bloque de c\xf3digo, y si no existe,\nse ejecutar\xe1 el segundo bloque de c\xf3digo."),(0,l.kt)("h3",{id:"orwhere"},"orWhere"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"orWhere")," se utiliza en consultas de Eloquent para agregar una cl\xe1usula ",(0,l.kt)("inlineCode",{parentName:"p"},"OR")," a la consulta. Esto significa que se agregar\xe1n condiciones adicionales a la consulta, pero en lugar de ser ",(0,l.kt)("inlineCode",{parentName:"p"},"AND"),", ser\xe1n ",(0,l.kt)("inlineCode",{parentName:"p"},"OR"),"."),(0,l.kt)("p",null,"Por ejemplo, supongamos que tenemos una tabla de usuarios y queremos buscar usuarios que tengan un nombre espec\xedfico o un correo electr\xf3nico espec\xedfico. Podr\xedamos escribir una consulta usando ",(0,l.kt)("inlineCode",{parentName:"p"},"orWhere")," de la siguiente manera:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$users = User::where('name', 'John')\n             ->orWhere('email', 'john@example.com')\n             ->get();\n")),(0,l.kt)("p",null,'Esta consulta buscar\xe1 usuarios que tengan el nombre "John" o el correo electr\xf3nico "',(0,l.kt)("a",{parentName:"p",href:"mailto:john@example.com"},"john@example.com"),'". Si hubi\xe9ramos utilizado ',(0,l.kt)("inlineCode",{parentName:"p"},"where")," en lugar de ",(0,l.kt)("inlineCode",{parentName:"p"},"orWhere"),', la consulta habr\xeda buscado usuarios que tengan tanto el nombre "John" como el correo electr\xf3nico "',(0,l.kt)("a",{parentName:"p",href:"mailto:john@example.com"},"john@example.com"),'", lo cual probablemente no es lo que queremos en este caso.'),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"orWhere")," se puede encadenar con otros m\xe9todos de consulta de Eloquent, como ",(0,l.kt)("inlineCode",{parentName:"p"},"where"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"whereIn"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"whereBetween"),", etc., para construir consultas m\xe1s complejas."),(0,l.kt)("h3",{id:"wherein"},"whereIn"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"whereIn")," se utiliza para agregar una cl\xe1usula ",(0,l.kt)("inlineCode",{parentName:"p"},"WHERE IN")," a la consulta. Toma dos par\xe1metros: el nombre de la columna y un array de valores a buscar. La consulta resultante buscar\xe1 registros en los que el valor de la columna especificada est\xe9 contenido en el array de valores."),(0,l.kt)("p",null,"Por ejemplo, si queremos buscar todos los usuarios cuyo ",(0,l.kt)("inlineCode",{parentName:"p"},"id")," sea 1, 2 o 3, podemos hacer lo siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$usuarios = DB::table('users')\n                ->whereIn('id', [1, 2, 3])\n                ->get();\n")),(0,l.kt)("p",null,"Este c\xf3digo generar\xe1 la siguiente consulta SQL:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"SELECT * FROM users WHERE id IN (1, 2, 3);\n")),(0,l.kt)("p",null,"Y devolver\xe1 una colecci\xf3n con los usuarios correspondientes."),(0,l.kt)("h3",{id:"wherenotin"},"whereNotIn"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"whereNotIn")," agrega una cl\xe1usula ",(0,l.kt)("inlineCode",{parentName:"p"},"WHERE NOT IN")," a la consulta, para buscar registros donde el valor de una columna no se encuentre en un conjunto de valores especificado."),(0,l.kt)("p",null,"Por ejemplo, supongamos que tenemos una tabla de ",(0,l.kt)("inlineCode",{parentName:"p"},"usuarios")," y queremos buscar aquellos que no se encuentren en una lista de IDs espec\xedficos:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$users = DB::table('usuarios')\n                ->whereNotIn('id', [1, 2, 3])\n                ->get();\n")),(0,l.kt)("p",null,"En este caso, la consulta buscar\xe1 todos los usuarios cuyo ID no sea 1, 2 o 3."),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"whereNotIn")," acepta dos argumentos: el nombre de la columna que queremos buscar, y un array de valores que la columna no debe tener. Tambi\xe9n podemos pasar una subconsulta en lugar de un array de valores para hacer la b\xfasqueda m\xe1s compleja."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$users = DB::table('usuarios')\n                ->whereNotIn('id', function($query) {\n                    $query->select('usuario_id')\n                          ->from('registros')\n                          ->where('fecha', '>', '2022-01-01');\n                })\n                ->get();\n")),(0,l.kt)("p",null,"En este ejemplo, la consulta buscar\xe1 todos los usuarios cuyo ID no\naparezca en una subconsulta que seleccione los IDs de\nusuarios que hayan hecho un registro despu\xe9s del 1 de enero de 2022."),(0,l.kt)("h3",{id:"wherebetween"},"whereBetween"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"whereBetween")," es utilizado para agregar una cl\xe1usula ",(0,l.kt)("inlineCode",{parentName:"p"},"WHERE BETWEEN")," a la consulta de Eloquent. Esta cl\xe1usula es utilizada para buscar registros cuyo valor en una determinada columna se encuentre dentro de un rango de valores especificado."),(0,l.kt)("p",null,"La sintaxis b\xe1sica del m\xe9todo es la siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"whereBetween(string $column, array $values, string $boolean = 'and', bool $not = false)\n")),(0,l.kt)("p",null,"Donde:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$column"),": es el nombre de la columna en la que se desea buscar el rango de valores."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$values"),": es un arreglo con dos valores que representan el rango de valores a buscar."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$boolean"),": indica si se debe agregar una cl\xe1usula ",(0,l.kt)("inlineCode",{parentName:"li"},"AND")," o ",(0,l.kt)("inlineCode",{parentName:"li"},"OR")," a la consulta. Por defecto es ",(0,l.kt)("inlineCode",{parentName:"li"},"AND"),"."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"$not"),": indica si se debe negar la cl\xe1usula, es decir, buscar valores que no est\xe9n dentro del rango. Por defecto es ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,l.kt)("p",null,"Por ejemplo, si se desea buscar todos los usuarios cuya edad est\xe9 entre 18 y 25 a\xf1os, se puede utilizar el m\xe9todo de la siguiente manera:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$users = DB::table('users')\n                ->whereBetween('age', [18, 25])\n                ->get();\n")),(0,l.kt)("p",null,"Esto generar\xe1 una consulta SQL similar a la siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM users WHERE age BETWEEN 18 AND 25;\n")),(0,l.kt)("h3",{id:"wherenull"},"whereNull"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"whereNull")," permite agregar una cl\xe1usula WHERE a la consulta para buscar registros donde el valor de una determinada columna es nulo (",(0,l.kt)("inlineCode",{parentName:"p"},"NULL"),")."),(0,l.kt)("p",null,"Ejemplo de uso:"),(0,l.kt)("p",null,"Supongamos que tenemos una tabla llamada ",(0,l.kt)("inlineCode",{parentName:"p"},"users")," con una columna ",(0,l.kt)("inlineCode",{parentName:"p"},"email")," que puede ser nula en algunos casos. Si queremos buscar los usuarios que no tienen correo electr\xf3nico registrado, podemos hacerlo de la siguiente manera:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$users = DB::table('users')\n            ->whereNull('email')\n            ->get();\n")),(0,l.kt)("p",null,"Este c\xf3digo generar\xe1 la siguiente consulta SQL:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM users WHERE email IS NULL;\n")),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"whereNull")," tambi\xe9n acepta un segundo argumento opcional que se utilizar\xe1 como operador para la cl\xe1usula WHERE. Por ejemplo, si queremos buscar los usuarios cuyo correo electr\xf3nico no est\xe1 definido pero que s\xed tienen un nombre de usuario, podemos hacer lo siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$users = DB::table('users')\n            ->whereNull('email', 'AND')\n            ->whereNotNull('username')\n            ->get();\n")),(0,l.kt)("p",null,"Este c\xf3digo generar\xe1 la siguiente consulta SQL:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT * FROM users WHERE email IS NULL AND username IS NOT NULL;\n")),(0,l.kt)("h3",{id:"wherenotnull"},"whereNotNull"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"whereNotNull")," de Eloquent agrega una cl\xe1usula WHERE a la consulta para buscar los registros de la base de datos donde el valor de una columna espec\xedfica no sea nulo. Por ejemplo, si queremos obtener todos los usuarios que tienen un correo electr\xf3nico en la base de datos, podemos hacer lo siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$usuarios = Usuario::whereNotNull('email')->get();\n")),(0,l.kt)("p",null,'Esto generar\xe1 una consulta SQL que buscar\xe1 todos los registros de la tabla "usuarios" donde el valor de la columna "email" no sea nulo.'),(0,l.kt)("p",null,"Es importante tener en cuenta que este m\xe9todo solo busca registros\ndonde el valor de la columna es diferente de nulo. Si se necesita\nbuscar registros donde el valor de una columna espec\xedfica es\nigual a cero o a una cadena vac\xeda, por ejemplo, se debe utilizar\notro m\xe9todo como ",(0,l.kt)("inlineCode",{parentName:"p"},"where")," o ",(0,l.kt)("inlineCode",{parentName:"p"},"orWhere"),"."),(0,l.kt)("h3",{id:"wheredate"},"whereDate"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"whereDate")," permite agregar una cl\xe1usula WHERE a la consulta para comparar fechas. Toma dos argumentos: el nombre de la columna de fecha y la fecha a comparar en formato ",(0,l.kt)("inlineCode",{parentName:"p"},"YYYY-MM-DD"),". Por ejemplo, si deseas obtener todos los usuarios que se registraron en un d\xeda espec\xedfico,\npodr\xedas hacer lo siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$users = User::whereDate('created_at', '2022-04-24')->get();\n")),(0,l.kt)("p",null,"Esto buscar\xe1 todos los usuarios que se registraron en el 24 de abril de\n2022 y devolver\xe1 una colecci\xf3n de objetos de modelo correspondientes.\nTambi\xe9n puedes utilizar ",(0,l.kt)("inlineCode",{parentName:"p"},"whereMonth"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"whereDay")," y ",(0,l.kt)("inlineCode",{parentName:"p"},"whereYear"),"\npara comparar partes espec\xedficas de una fecha."),(0,l.kt)("h3",{id:"wheremonth"},"whereMonth"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"whereMonth")," se utiliza para agregar una cl\xe1usula ",(0,l.kt)("inlineCode",{parentName:"p"},"where")," a una consulta Eloquent para buscar registros cuyo valor de fecha correspondiente al campo especificado tenga un mes determinado."),(0,l.kt)("p",null,"La sintaxis b\xe1sica es la siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"->whereMonth('campo', $mes);\n")),(0,l.kt)("p",null,"Donde ",(0,l.kt)("inlineCode",{parentName:"p"},"'campo'")," es el nombre del campo de fecha en la tabla y ",(0,l.kt)("inlineCode",{parentName:"p"},"$mes")," es el n\xfamero del mes (1-12) que se quiere buscar."),(0,l.kt)("p",null,"Por ejemplo, si queremos buscar todos los usuarios que nacieron en marzo, podemos hacer lo siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$usuarios = DB::table('usuarios')\n                ->whereMonth('fecha_nacimiento', 3)\n                ->get();\n")),(0,l.kt)("p",null,'Este c\xf3digo buscar\xe1 todos los registros en la tabla de usuarios donde\nel campo "fecha_nacimiento" tenga un valor de mes igual a 3 (marzo).'),(0,l.kt)("h3",{id:"whereday"},"whereDay"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"whereDay")," en Eloquent permite agregar una cl\xe1usula ",(0,l.kt)("inlineCode",{parentName:"p"},"where")," a la consulta para comparar el d\xeda de un campo de fecha con un valor espec\xedfico."),(0,l.kt)("p",null,"Por ejemplo, para obtener todos los registros de la tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"pedidos")," donde el d\xeda de la fecha de ",(0,l.kt)("inlineCode",{parentName:"p"},"created_at")," sea igual a ",(0,l.kt)("inlineCode",{parentName:"p"},"23"),", se puede usar el siguiente c\xf3digo:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$pedidos = Pedido::whereDay('created_at', '=', 23)->get();\n")),(0,l.kt)("p",null,"Este m\xe9todo tambi\xe9n acepta un segundo par\xe1metro opcional que permite especificar el operador de comparaci\xf3n. Por ejemplo, para obtener todos los registros de la tabla ",(0,l.kt)("inlineCode",{parentName:"p"},"pedidos")," donde el d\xeda de la fecha de ",(0,l.kt)("inlineCode",{parentName:"p"},"created_at")," sea mayor o igual a ",(0,l.kt)("inlineCode",{parentName:"p"},"23"),", se puede usar el siguiente c\xf3digo:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$pedidos = Pedido::whereDay('created_at', '>=', 23)->get();\n")),(0,l.kt)("p",null,"Tambi\xe9n se puede encadenar varias cl\xe1usulas ",(0,l.kt)("inlineCode",{parentName:"p"},"whereDay"),"\npara agregar m\xfaltiples condiciones a la consulta."),(0,l.kt)("h3",{id:"whereyear"},"whereYear"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"whereYear")," es un m\xe9todo de consulta en Eloquent que agrega una cl\xe1usula WHERE a la consulta para comparar el a\xf1o de una columna de fecha o fecha y hora. Toma dos par\xe1metros: el primero es el nombre de la columna y el segundo es el a\xf1o que se utilizar\xe1 para comparar. Por ejemplo:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$users = DB::table('users')\n            ->whereYear('created_at', '=', 2022)\n            ->get();\n")),(0,l.kt)("p",null,"En este ejemplo, se obtienen todos los usuarios cuya columna\n",(0,l.kt)("inlineCode",{parentName:"p"},"created_at")," tiene un valor de a\xf1o igual a ",(0,l.kt)("inlineCode",{parentName:"p"},"2022"),"."),(0,l.kt)("h3",{id:"wherehas"},"whereHas"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"whereHas")," se utiliza para buscar modelos que tienen una relaci\xf3n con otro modelo. Por ejemplo, si tienes una relaci\xf3n ",(0,l.kt)("inlineCode",{parentName:"p"},"hasMany")," entre ",(0,l.kt)("inlineCode",{parentName:"p"},"Post")," y ",(0,l.kt)("inlineCode",{parentName:"p"},"Comment"),", puedes usar ",(0,l.kt)("inlineCode",{parentName:"p"},"whereHas")," para buscar todos los posts que tienen al menos un comentario. Este m\xe9todo toma dos argumentos: el nombre de la relaci\xf3n y una funci\xf3n de cierre que define las condiciones que deben cumplir los modelos relacionados."),(0,l.kt)("p",null,"Aqu\xed hay un ejemplo:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$posts = Post::whereHas('comments', function($query) {\n    $query->where('status', 'approved');\n})->get();\n")),(0,l.kt)("p",null,"Este c\xf3digo buscar\xe1 todos los ",(0,l.kt)("inlineCode",{parentName:"p"},"Post")," que tengan\nal menos un ",(0,l.kt)("inlineCode",{parentName:"p"},"Comment")," con el estado ",(0,l.kt)("inlineCode",{parentName:"p"},"approved"),"."),(0,l.kt)("h3",{id:"wheredoesnthave"},"whereDoesntHave"),(0,l.kt)("p",null,"El m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"whereDoesntHave")," se utiliza para agregar una cl\xe1usula WHERE a la consulta para buscar modelos que no tienen una relaci\xf3n dada. "),(0,l.kt)("p",null,"Por ejemplo, si tenemos una relaci\xf3n entre los modelos ",(0,l.kt)("inlineCode",{parentName:"p"},"User")," y ",(0,l.kt)("inlineCode",{parentName:"p"},"Post")," donde un usuario tiene muchos posts, podemos usar ",(0,l.kt)("inlineCode",{parentName:"p"},"whereDoesntHave")," para buscar los usuarios que no tienen ning\xfan post. La sintaxis b\xe1sica del m\xe9todo es la siguiente:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$query->whereDoesntHave('relationshipName');\n")),(0,l.kt)("p",null,"Donde ",(0,l.kt)("inlineCode",{parentName:"p"},"relationshipName")," es el nombre de la relaci\xf3n que se est\xe1 buscando. Tambi\xe9n se puede proporcionar una funci\xf3n de cierre para agregar m\xe1s condiciones a la consulta, por ejemplo:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"$query->whereDoesntHave('posts', function ($query) {\n    $query->where('status', 'published');\n});\n")),(0,l.kt)("p",null,'En este caso, se buscar\xe1n los usuarios que no tienen ning\xfan post con el estado "publicado".'),(0,l.kt)("p",null,"Es importante tener en cuenta que el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"whereDoesntHave")," s\xf3lo busca modelos que no tienen una relaci\xf3n en particular. Si queremos buscar modelos que no tienen una relaci\xf3n o que tienen una relaci\xf3n que no cumple con ciertas condiciones, se puede usar el m\xe9todo ",(0,l.kt)("inlineCode",{parentName:"p"},"doesntHave")," en su lugar."))}c.isMDXComponent=!0}}]);