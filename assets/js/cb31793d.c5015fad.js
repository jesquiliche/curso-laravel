"use strict";(self.webpackChunkeloquent=self.webpackChunkeloquent||[]).push([[199],{3905:(e,a,n)=>{n.d(a,{Zo:()=>u,kt:()=>v});var t=n(7294);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,o=function(e,a){if(null==e)return{};var n,t,o={},r=Object.keys(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)n=r[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=t.createContext({}),c=function(e){var a=t.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},u=function(e){var a=c(e.components);return t.createElement(l.Provider,{value:a},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},m=t.forwardRef((function(e,a){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,v=d["".concat(l,".").concat(m)]||d[m]||p[m]||r;return n?t.createElement(v,i(i({ref:a},u),{},{components:n})):t.createElement(v,i({ref:a},u))}));function v(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}m.displayName="MDXCreateElement"},627:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var t=n(7462),o=(n(7294),n(3905));const r={sidebar_position:7},i="Vistas SQL",s={unversionedId:"tutorial-basics/triggers",id:"tutorial-basics/triggers",title:"Vistas SQL",description:"Introducci\xf3n",source:"@site/docs/tutorial-basics/triggers.mdx",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/triggers",permalink:"/curso-laravel/docs/tutorial-basics/triggers",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/triggers.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Conclusiones",permalink:"/curso-laravel/docs/tutorial-basics/sql/conclusiones"},next:{title:"Rutas y controladores",permalink:"/curso-laravel/docs/category/rutas-y-controladores"}},l={},c=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Vista v_productos",id:"vista-v_productos",level:3},{value:"Como ser\xeda la consulta en Elocuent",id:"como-ser\xeda-la-consulta-en-elocuent",level:3},{value:"Diferencias entre un m\xe9todo y otro",id:"diferencias-entre-un-m\xe9todo-y-otro",level:3},{value:"v_ofertas",id:"v_ofertas",level:3},{value:"v_proveedores",id:"v_proveedores",level:3}],u={toc:c},d="wrapper";function p(e){let{components:a,...n}=e;return(0,o.kt)(d,(0,t.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"vistas-sql"},"Vistas SQL"),(0,o.kt)("h2",{id:"introducci\xf3n"},"Introducci\xf3n"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"La gesti\xf3n de bases de datos es una tarea fundamental en la mayor\xeda de los proyectos de software. Ya sea que est\xe9s desarrollando una aplicaci\xf3n web, un servicio de back-end o un sistema de an\xe1lisis de datos, es probable que necesites interactuar con una o varias bases de datos. La gesti\xf3n de estas bases de datos puede incluir tareas como crear tablas, insertar y actualizar datos, realizar consultas complejas y automatizar tareas a trav\xe9s de procedimientos almacenados."),(0,o.kt)("li",{parentName:"ul"},"En este contexto, las vistas y triggers son herramientas muy \xfatiles que nos permiten simplificar y optimizar nuestras consultas y operaciones. Una vista es una tabla virtual que se crea a partir de una consulta compleja y que se puede utilizar en consultas posteriores como si fuera una tabla real. Un trigger es un procedimiento almacenado que se ejecuta autom\xe1ticamente cuando se produce una acci\xf3n en una tabla, como insertar, actualizar o eliminar registros. Los triggers pueden ser muy \xfatiles para automatizar tareas como la actualizaci\xf3n de datos en otras tablas o el env\xedo de notificaciones por correo electr\xf3nico."),(0,o.kt)("li",{parentName:"ul"},"En este tutorial, vamos a aprender c\xf3mo trabajar con vistas y triggers en Eloquent, el ORM de Laravel. Eloquent es una de las herramientas m\xe1s populares para la gesti\xf3n de bases de datos en Laravel y es conocido por su facilidad de uso y su potencia. A lo largo del tutorial, te mostraremos c\xf3mo crear vistas y triggers en Eloquent y c\xf3mo utilizarlos para automatizar tareas y mejorar el rendimiento de tus consultas. Esperamos que, al final del tutorial, tengas un conocimiento s\xf3lido sobre estas herramientas y puedas aplicarlas en tus propios proyectos.")),(0,o.kt)("h3",{id:"vista-v_productos"},"Vista v_productos"),(0,o.kt)("p",null,"A veces Eloquent presenta dificultades para relalizar ciertas operaciones SQL."),(0,o.kt)("p",null,"En este ejemplo utilizaremos una vista creada por una migraci\xf3n que podras encontrar\ndentro de proyecto."),(0,o.kt)("admonition",{title:"DB:statement",type:"info"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"DB::statement")," es un m\xe9todo de la clase ",(0,o.kt)("inlineCode",{parentName:"p"},"Illuminate\\Support\\Facades\\DB")," que se utiliza para ejecutar consultas SQL directamente en la base de datos. Este m\xe9todo toma una cadena de consulta SQL como argumento y la ejecuta en la base de datos subyacente. "),(0,o.kt)("p",{parentName:"admonition"},"Este m\xe9todo es \xfatil para ejecutar comandos de SQL que no tienen una representaci\xf3n directa en la API de Eloquent, como la creaci\xf3n o eliminaci\xf3n de vistas, la creaci\xf3n de \xedndices de base de datos, la modificaci\xf3n de columnas, entre otros."),(0,o.kt)("p",{parentName:"admonition"},"Es importante tener en cuenta que ",(0,o.kt)("inlineCode",{parentName:"p"},"DB::statement")," no devuelve ning\xfan resultado. Por lo tanto, no se puede utilizar para recuperar datos de la base de datos. En su lugar, se utiliza para ejecutar consultas que modifican la estructura de la base de datos o realizan operaciones que no requieren un conjunto de resultados."),(0,o.kt)("p",{parentName:"admonition"},"Aqu\xed hay un ejemplo de c\xf3mo se utiliza ",(0,o.kt)("inlineCode",{parentName:"p"},"DB::statement")," para crear una vista en la base de datos:"),(0,o.kt)("pre",{parentName:"admonition"},(0,o.kt)("code",{parentName:"pre",className:"language-php"},"DB::statement('CREATE VIEW v_clientes AS SELECT * FROM clientes WHERE activo = 1');\n")),(0,o.kt)("p",{parentName:"admonition"},"En este ejemplo, se utiliza ",(0,o.kt)("inlineCode",{parentName:"p"},"DB::statement")," para ejecutar una consulta SQL que crea una vista llamada ",(0,o.kt)("inlineCode",{parentName:"p"},"v_clientes"),". La vista se crea a partir de la tabla ",(0,o.kt)("inlineCode",{parentName:"p"},"clientes"),", seleccionando solo las filas donde el campo ",(0,o.kt)("inlineCode",{parentName:"p"},"activo")," es igual a 1."),(0,o.kt)("p",{parentName:"admonition"},"En conclusi\xf3n, ",(0,o.kt)("inlineCode",{parentName:"p"},"DB::statement")," es una herramienta \xfatil para ejecutar consultas SQL directamente en la base de datos, lo que permite realizar operaciones avanzadas que no est\xe1n disponibles a trav\xe9s de la API de Eloquent.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"use Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        \n        DB::statement(\"CREATE OR REPLACE\n        VIEW `v_productos` AS\n        SELECT \n            `p`.`id` AS `id`,\n            `p`.`nombre` AS `nombre`,\n            `p`.`descripcion` AS `descripcion`,\n            `p`.`iva_id` AS `iva_id`,\n            `p`.`precio` AS `precio`,\n            `s`.`nombre` AS `subcategoria`,\n            `c`.`nombre` AS `categoria`,\n            `m`.`nombre` AS `marca`,\n            `p`.`imagen` AS `imagen`\n        FROM\n            (((`productos` `p`\n            LEFT JOIN `subcategorias` `s` ON ((`p`.`subcategoria_id` = `s`.`id`)))\n            JOIN `categorias` `c` ON ((`c`.`id` = `s`.`categoria_id`)))\n            JOIN `marcas` `m` ON ((`m`.`id` = `p`.`marca_id`))) ORDER BY CATEGORIA,SUBCATEGORIA;\");\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        DB::statement('DROP VIEW v_productos;');\n    }\n};\n")),(0,o.kt)("p",null,"Este c\xf3digo crea una vista llamada ",(0,o.kt)("inlineCode",{parentName:"p"},"v_productos")," que muestra una lista de productos con su respectiva subcategor\xeda, categor\xeda y marca. Para ello, se utiliza una consulta SQL con m\xfaltiples join y se ordena por categor\xeda y subcategor\xeda."),(0,o.kt)("p",null,"La primera l\xednea de la consulta, ",(0,o.kt)("inlineCode",{parentName:"p"},"CREATE OR REPLACE VIEW 'v_productos' AS"),", indica que se est\xe1 creando una vista llamada ",(0,o.kt)("inlineCode",{parentName:"p"},"v_productos"),"."),(0,o.kt)("p",null,"Dentro del ",(0,o.kt)("inlineCode",{parentName:"p"},"SELECT")," statement, se seleccionan los campos que se desean mostrar en la vista. Se usan alias para que los nombres sean m\xe1s descriptivos."),(0,o.kt)("p",null,"Luego, se utiliza el operador ",(0,o.kt)("inlineCode",{parentName:"p"},"LEFT JOIN")," para hacer una uni\xf3n izquierda entre la tabla ",(0,o.kt)("inlineCode",{parentName:"p"},"productos")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"subcategorias"),", con el fin de obtener la subcategor\xeda correspondiente de cada producto. Como algunos productos pueden no tener una subcategor\xeda asignada, se utiliza ",(0,o.kt)("inlineCode",{parentName:"p"},"LEFT JOIN")," en lugar de ",(0,o.kt)("inlineCode",{parentName:"p"},"JOIN")," para incluir todos los productos, incluso aquellos que no tienen una subcategor\xeda correspondiente."),(0,o.kt)("p",null,"Posteriormente, se utiliza ",(0,o.kt)("inlineCode",{parentName:"p"},"JOIN")," para unir la tabla ",(0,o.kt)("inlineCode",{parentName:"p"},"categorias")," a la tabla ",(0,o.kt)("inlineCode",{parentName:"p"},"subcategorias"),", de manera que se pueda obtener la categor\xeda correspondiente de cada producto."),(0,o.kt)("p",null,"Por \xfaltimo, se utiliza otro ",(0,o.kt)("inlineCode",{parentName:"p"},"JOIN")," para unir la tabla ",(0,o.kt)("inlineCode",{parentName:"p"},"marcas")," a la tabla ",(0,o.kt)("inlineCode",{parentName:"p"},"productos"),", con el fin de obtener la marca correspondiente de cada producto."),(0,o.kt)("p",null,"La vista resultante tiene un conjunto de campos que muestran la informaci\xf3n relevante de cada producto, \xe7\njunto con su subcategor\xeda, categor\xeda y marca correspondientes.\nLa vista se ordena por categor\xeda y subcategor\xeda para facilitar\nla visualizaci\xf3n de los productos."),(0,o.kt)("h3",{id:"como-ser\xeda-la-consulta-en-elocuent"},"Como ser\xeda la consulta en Elocuent"),(0,o.kt)("p",null,"Para ejecutar consultas SQL en Laravel utilizando Eloquent, se puede utilizar el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"select")," de la clase ",(0,o.kt)("inlineCode",{parentName:"p"},"DB")," de Laravel. Por ejemplo, para obtener los campos ",(0,o.kt)("inlineCode",{parentName:"p"},"id"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"nombre"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"descripcion"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"precio"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"subcategoria"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"categoria"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"marca")," e ",(0,o.kt)("inlineCode",{parentName:"p"},"imagen")," de la tabla ",(0,o.kt)("inlineCode",{parentName:"p"},"productos")," y de sus tablas relacionadas ",(0,o.kt)("inlineCode",{parentName:"p"},"subcategorias"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"categorias")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"marcas"),", se puede utilizar el siguiente c\xf3digo en Eloquent:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"use Illuminate\\Support\\Facades\\DB;\n\n$productos = DB::table('productos')\n    ->leftJoin('subcategorias', 'productos.subcategoria_id', '=', 'subcategorias.id')\n    ->join('categorias', 'subcategorias.categoria_id', '=', 'categorias.id')\n    ->join('marcas', 'productos.marca_id', '=', 'marcas.id')\n    ->select('productos.id', 'productos.nombre', 'productos.descripcion', 'productos.precio', \n             'subcategorias.nombre as subcategoria', 'categorias.nombre as categoria', \n             'marcas.nombre as marca', 'productos.imagen')\n    ->orderBy('categorias.nombre', 'asc')\n    ->orderBy('subcategorias.nombre', 'asc')\n    ->get();\n")),(0,o.kt)("p",null,"Este c\xf3digo utiliza el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"join")," para unir las tablas ",(0,o.kt)("inlineCode",{parentName:"p"},"productos"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"subcategorias"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"categorias")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"marcas")," seg\xfan las claves for\xe1neas. Luego, utiliza el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"select")," para seleccionar los campos necesarios y renombrar algunos campos de las tablas relacionadas utilizando la cl\xe1usula ",(0,o.kt)("inlineCode",{parentName:"p"},"as"),". Finalmente, utiliza el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"orderBy")," para ordenar los resultados por ",(0,o.kt)("inlineCode",{parentName:"p"},"categorias.nombre")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"subcategorias.nombre"),", y el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," para obtener los resultados."),(0,o.kt)("h3",{id:"diferencias-entre-un-m\xe9todo-y-otro"},"Diferencias entre un m\xe9todo y otro"),(0,o.kt)("p",null,"La principal diferencia entre hacerlo con Eloquent y con una vista de base de datos es que en Eloquent, no se crea una vista en la base de datos. En su lugar, se define una funci\xf3n en un modelo que devuelve los datos de la vista. Esto tiene algunas implicaciones:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"No se crea una vista en la base de datos, lo que significa que no se puede acceder directamente a la vista desde otra aplicaci\xf3n que no use Eloquent."),(0,o.kt)("li",{parentName:"ul"},"Al no ser una vista en la base de datos, no se pueden utilizar las funciones espec\xedficas de cada motor de base de datos para optimizar el rendimiento de la vista. En cambio, todo el trabajo de filtrado y selecci\xf3n de datos se realiza en la aplicaci\xf3n utilizando Eloquent."),(0,o.kt)("li",{parentName:"ul"},"Sin embargo, Eloquent ofrece una gran cantidad de caracter\xedsticas que permiten personalizar la consulta de los datos, lo que puede resultar m\xe1s flexible que trabajar con una vista de base de datos predefinida.")),(0,o.kt)("p",null,"En conclusi\xf3n, la elecci\xf3n entre utilizar una vista\nde base de datos o definir una funci\xf3n en Eloquent para\nobtener los datos depende del caso de uso espec\xedfico y de\nlas necesidades de la aplicaci\xf3n. Si se necesita una vista\nespec\xedfica para ser utilizada por varias aplicaciones o\nherramientas, entonces una vista de base de datos podr\xeda\nser la mejor opci\xf3n. Si se necesita m\xe1s flexibilidad para\npersonalizar la consulta de datos, o si se quiere evitar el\nmantenimiento adicional de la vista en la base de datos,\nentonces definir una funci\xf3n en Eloquent podr\xeda ser la mejor opci\xf3n."),(0,o.kt)("h3",{id:"v_ofertas"},"v_ofertas"),(0,o.kt)("p",null,"Este c\xf3digo es una migraci\xf3n de Laravel que crea una vista de base de datos llamada ",(0,o.kt)("inlineCode",{parentName:"p"},"v_ofertas"),". La vista utiliza la cl\xe1usula ",(0,o.kt)("inlineCode",{parentName:"p"},"SELECT")," para seleccionar los campos que se mostrar\xe1n en la vista, incluyendo campos de las tablas ",(0,o.kt)("inlineCode",{parentName:"p"},"v_productos")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"ofertas"),". La cl\xe1usula ",(0,o.kt)("inlineCode",{parentName:"p"},"JOIN")," se utiliza para unir las dos tablas, de forma que s\xf3lo se muestren los productos que tienen una oferta asociada."),(0,o.kt)("p",null,"El c\xf3digo utiliza la sintaxis de Laravel para definir la vista. En el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"up()"),", se utiliza la funci\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"DB::statement()")," para ejecutar la consulta SQL que crea la vista. En el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"down()"),", se utiliza la funci\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"DB::statement()")," de nuevo, pero esta vez para eliminar la vista."),(0,o.kt)("p",null,"Aqu\xed te dejo el c\xf3digo completo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'use Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n\n        DB::statement("CREATE OR REPLACE\n        VIEW `v_ofertas` AS\n        SELECT \n            `v`.`id` AS `id`,\n            `v`.`nombre` AS `nombre`,\n            `v`.`descripcion` AS `descripcion`,\n            `v`.`iva_id` AS `iva_id`,\n            `v`.`subcategoria` AS `subcategoria`,\n            `v`.`categoria` AS `categoria`,\n            `v`.`marca` AS `marca`,\n            `v`.`imAGEN` AS `imAGEN`,\n            `o`.`descripcion` AS `descripcio_oferta`,\n            `o`.`id` AS `id_oferta`\n        FROM\n            (`v_productos` `v`\n            JOIN `ofertas` `o` ON ((`v`.`id` = `o`.`producto_id`)));");\n    }\n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        DB::statement("DROP VIEW v_ofertas");\n    }\n};\n')),(0,o.kt)("h3",{id:"v_proveedores"},"v_proveedores"),(0,o.kt)("p",null,"\xa1Por supuesto! En este caso, se trata de una migraci\xf3n de Laravel que crea una vista de base de datos llamada ",(0,o.kt)("inlineCode",{parentName:"p"},"v_proveedores"),". La vista utiliza la cl\xe1usula ",(0,o.kt)("inlineCode",{parentName:"p"},"SELECT")," para seleccionar los campos que se mostrar\xe1n en la vista, incluyendo campos de la tabla ",(0,o.kt)("inlineCode",{parentName:"p"},"proveedores")," y de las tablas ",(0,o.kt)("inlineCode",{parentName:"p"},"poblaciones")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"provincias"),". La cl\xe1usula ",(0,o.kt)("inlineCode",{parentName:"p"},"JOIN")," se utiliza para unir las tres tablas y obtener los datos necesarios para la vista."),(0,o.kt)("p",null,"El c\xf3digo utiliza la sintaxis de Laravel para definir la vista. En el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"up()"),", se utiliza la funci\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"DB::statement()")," para ejecutar la consulta SQL que crea la vista. La consulta utiliza la cl\xe1usula ",(0,o.kt)("inlineCode",{parentName:"p"},"INNER JOIN")," para unir las tablas ",(0,o.kt)("inlineCode",{parentName:"p"},"proveedores"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"poblaciones")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"provincias"),", y la cl\xe1usula ",(0,o.kt)("inlineCode",{parentName:"p"},"SELECT")," para seleccionar los campos que se mostrar\xe1n en la vista. En el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"down()"),", se utiliza la funci\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"Schema::dropIfExists()")," para eliminar la vista."),(0,o.kt)("p",null,"Es importante tener en cuenta que la consulta SQL utilizada en esta migraci\xf3n hace referencia a tablas espec\xedficas de una base de datos. Si se desea utilizar este c\xf3digo en otro entorno, puede ser necesario cambiar los nombres de las tablas y campos para que coincidan con la estructura de la base de datos. Aqu\xed est\xe1 el c\xf3digo completo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"use Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     *\n     * @return void\n     */\n    public function up()\n    {\n        DB::statement(\"CREATE OR REPLACE VIEW v_proveedores AS SELECT pr.*,pob.nombre as poblacion,pro.nombre as provincia \n        FROM comercio.proveedores pr INNER JOIN poblaciones pob ON pr.cod_postal=pob.codigo\n        INNER JOIN provincias pro ON pro.codigo=pob.provincia_cod;\");\n    }\n    \n\n    /**\n     * Reverse the migrations.\n     *\n     * @return void\n     */\n    public function down()\n    {\n        Schema::dropIfExists('v_proveedores');\n    }\n};\n")))}p.isMDXComponent=!0}}]);