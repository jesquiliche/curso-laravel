"use strict";(self.webpackChunkeloquent=self.webpackChunkeloquent||[]).push([[8703],{3905:(e,a,n)=>{n.d(a,{Zo:()=>d,kt:()=>v});var i=n(7294);function l(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function t(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);a&&(i=i.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,i)}return n}function s(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?t(Object(n),!0).forEach((function(a){l(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function r(e,a){if(null==e)return{};var n,i,l=function(e,a){if(null==e)return{};var n,i,l={},t=Object.keys(e);for(i=0;i<t.length;i++)n=t[i],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(i=0;i<t.length;i++)n=t[i],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=i.createContext({}),c=function(e){var a=i.useContext(o),n=a;return e&&(n="function"==typeof e?e(a):s(s({},a),e)),n},d=function(e){var a=c(e.components);return i.createElement(o.Provider,{value:a},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return i.createElement(i.Fragment,{},a)}},m=i.forwardRef((function(e,a){var n=e.components,l=e.mdxType,t=e.originalType,o=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),p=c(n),m=l,v=p["".concat(o,".").concat(m)]||p[m]||u[m]||t;return n?i.createElement(v,s(s({ref:a},d),{},{components:n})):i.createElement(v,s({ref:a},d))}));function v(e,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var t=n.length,s=new Array(t);s[0]=m;var r={};for(var o in a)hasOwnProperty.call(a,o)&&(r[o]=a[o]);r.originalType=e,r[p]="string"==typeof e?e:l,s[1]=r;for(var c=2;c<t;c++)s[c]=n[c];return i.createElement.apply(null,s)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9925:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>c});var i=n(7462),l=(n(7294),n(3905));const t={sidebar_position:3},s="Directivas Blade",r={unversionedId:"tutorial-basics/Vistas/directivas",id:"tutorial-basics/Vistas/directivas",title:"Directivas Blade",description:"En cap\xedtulos anteriores hemos hecho uso de las directivas Blade, en esta cap\xedtulo entraremos con m\xe1s detalle para ver su funcionamiento y sintaxis dada su gran importancia en el motor de plantillas.",source:"@site/docs/tutorial-basics/Vistas/02-directivas.md",sourceDirName:"tutorial-basics/Vistas",slug:"/tutorial-basics/Vistas/directivas",permalink:"/curso-laravel/docs/tutorial-basics/Vistas/directivas",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/Vistas/02-directivas.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Creando nuestro primer Layout",permalink:"/curso-laravel/docs/tutorial-basics/Vistas/vistas"},next:{title:"M\xe1s sobre vistas",permalink:"/curso-laravel/docs/tutorial-basics/Vistas/vista"}},o={},c=[{value:"Ventajas de usar directivas en lugar de c\xf3digo PHP",id:"ventajas-de-usar-directivas-en-lugar-de-c\xf3digo-php",level:2},{value:"\xbfC\xf3mo se procesan?",id:"c\xf3mo-se-procesan",level:2},{value:"Sintaxis b\xe1sica de las directivas Blade",id:"sintaxis-b\xe1sica-de-las-directivas-blade",level:2},{value:"Ejemplos de las directivas Blade m\xe1s comunes",id:"ejemplos-de-las-directivas-blade-m\xe1s-comunes",level:2},{value:"Estructuras de control y condicionales",id:"estructuras-de-control-y-condicionales",level:2},{value:"Inclusi\xf3n de archivos parciales",id:"inclusi\xf3n-de-archivos-parciales",level:2},{value:"Herencia de plantillas",id:"herencia-de-plantillas",level:2},{value:"Uso de variables y datos en Blade",id:"uso-de-variables-y-datos-en-blade",level:2},{value:"Directivas de control de flujo avanzadas",id:"directivas-de-control-de-flujo-avanzadas",level:2},{value:"Personalizaci\xf3n de las directivas Blade",id:"personalizaci\xf3n-de-las-directivas-blade",level:2},{value:"Conclusiones",id:"conclusiones",level:2}],d={toc:c},p="wrapper";function u(e){let{components:a,...n}=e;return(0,l.kt)(p,(0,i.Z)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"directivas-blade"},"Directivas Blade"),(0,l.kt)("p",null,"En cap\xedtulos anteriores hemos hecho uso de las directivas Blade, en esta cap\xedtulo entraremos con m\xe1s detalle para ver su funcionamiento y sintaxis dada su gran importancia en el motor de plantillas."),(0,l.kt)("p",null,"Las directivas Blade son una caracter\xedstica fundamental del motor de plantillas de Laravel. Son una forma conveniente y expresiva de trabajar con c\xf3digo PHP en las vistas de Laravel. Las directivas Blade proporcionan una sintaxis sencilla y legible para generar contenido din\xe1mico y controlar el flujo de la l\xf3gica en las vistas."),(0,l.kt)("p",null,"El prop\xf3sito principal de las directivas Blade es separar la l\xf3gica de presentaci\xf3n del c\xf3digo PHP en las vistas. Esto permite mantener un c\xf3digo m\xe1s limpio, legible y mantenible. Las directivas Blade facilitan la creaci\xf3n de vistas elegantes y poderosas al proporcionar una serie de construcciones especializadas que simplifican tareas comunes, como iterar sobre datos, condicionar la visualizaci\xf3n de elementos, incluir fragmentos de c\xf3digo y definir estructuras de plantillas reutilizables."),(0,l.kt)("p",null,"Con las directivas Blade, puedes realizar tareas como:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Controlar el flujo de ejecuci\xf3n: Puedes usar directivas como ",(0,l.kt)("inlineCode",{parentName:"p"},"@if"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"@else"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"@elseif"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"@unless"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"@switch"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"@for"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"@foreach")," y ",(0,l.kt)("inlineCode",{parentName:"p"},"@while")," para tomar decisiones y repetir acciones en funci\xf3n de condiciones y datos espec\xedficos.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Incluir fragmentos de c\xf3digo: La directiva ",(0,l.kt)("inlineCode",{parentName:"p"},"@include")," te permite reutilizar fragmentos de c\xf3digo en m\xfaltiples vistas. Puedes dividir tu c\xf3digo en componentes m\xe1s peque\xf1os y mantener la legibilidad y la modularidad en tus vistas.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Heredar y extender plantillas: Con la directiva ",(0,l.kt)("inlineCode",{parentName:"p"},"@extends"),", puedes heredar una plantilla base y reemplazar o agregar secciones espec\xedficas en las vistas hijas utilizando ",(0,l.kt)("inlineCode",{parentName:"p"},"@section")," y ",(0,l.kt)("inlineCode",{parentName:"p"},"@yield")," o ",(0,l.kt)("inlineCode",{parentName:"p"},"@section"),".")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Trabajar con variables y datos: Blade te permite mostrar el contenido de variables usando ",(0,l.kt)("inlineCode",{parentName:"p"},"{{ $variable }}")," y realizar operaciones y filtros en las expresiones Blade. Tambi\xe9n puedes utilizar directivas condicionales como ",(0,l.kt)("inlineCode",{parentName:"p"},"@isset"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"@empty")," y ",(0,l.kt)("inlineCode",{parentName:"p"},"@unless")," para mostrar u ocultar contenido seg\xfan las condiciones de las variables.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Crear directivas personalizadas: Puedes crear tus propias directivas Blade personalizadas utilizando la funci\xf3n ",(0,l.kt)("inlineCode",{parentName:"p"},"Blade::directive"),". Esto te permite extender la funcionalidad de Blade y crear construcciones espec\xedficas para tu aplicaci\xf3n."))),(0,l.kt)("p",null,"Las directivas Blade en Laravel proporcionan una forma poderosa y elegante de trabajar con la l\xf3gica de presentaci\xf3n en las vistas. Su prop\xf3sito principal es mejorar la legibilidad, modularidad y reutilizaci\xf3n del c\xf3digo al separar la l\xf3gica de presentaci\xf3n del c\xf3digo PHP en las vistas. Con las directivas Blade, puedes crear vistas din\xe1micas y flexibles de manera eficiente y mantener un c\xf3digo limpio y estructurado en tu aplicaci\xf3n Laravel."),(0,l.kt)("h2",{id:"ventajas-de-usar-directivas-en-lugar-de-c\xf3digo-php"},"Ventajas de usar directivas en lugar de c\xf3digo PHP"),(0,l.kt)("p",null,"El uso de directivas Blade en lugar de c\xf3digo PHP puro en Laravel ofrece varias ventajas:"),(0,l.kt)("admonition",{title:"Ventajas",type:"info"},(0,l.kt)("ol",{parentName:"admonition"},(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Sintaxis m\xe1s legible: Blade utiliza una sintaxis m\xe1s simple y legible en comparaci\xf3n con el c\xf3digo PHP tradicional. Las directivas Blade utilizan s\xedmbolos especiales, como ",(0,l.kt)("inlineCode",{parentName:"p"},"@if"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"@foreach"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"@section"),", que facilitan la comprensi\xf3n del c\xf3digo y su estructura.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Separaci\xf3n clara de la l\xf3gica de presentaci\xf3n: Blade promueve una separaci\xf3n clara entre la l\xf3gica de presentaci\xf3n y la l\xf3gica de negocio. Permite que los desarrolladores se centren en escribir c\xf3digo HTML y CSS limpio, sin tener que mezclarlo con l\xf3gica de programaci\xf3n compleja.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Reutilizaci\xf3n de c\xf3digo: Blade facilita la reutilizaci\xf3n de c\xf3digo a trav\xe9s de la utilizaci\xf3n de plantillas y componentes. Puedes definir secciones reemplazables en una plantilla base y extenderla en vistas hijas, lo que te permite crear un dise\xf1o coherente y evitar la duplicaci\xf3n de c\xf3digo.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Mayor productividad: Las directivas Blade simplifican tareas comunes en el desarrollo web, como iterar sobre datos, mostrar condicionalmente elementos y trabajar con formularios. Esto permite a los desarrolladores ser m\xe1s productivos y escribir c\xf3digo de forma m\xe1s r\xe1pida y eficiente.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Integraci\xf3n con Laravel: Blade est\xe1 dise\xf1ado espec\xedficamente para trabajar con Laravel, lo que significa que aprovecha al m\xe1ximo las caracter\xedsticas del framework. Puedes utilizar directamente las funciones y m\xe9todos de Laravel en tus vistas Blade, lo que facilita el acceso a la base de datos, a la autenticaci\xf3n, a las rutas y a otros componentes del framework.")))),(0,l.kt)("h2",{id:"c\xf3mo-se-procesan"},"\xbfC\xf3mo se procesan?"),(0,l.kt)("p",null,"Las directivas Blade se procesan en dos fases durante la ejecuci\xf3n de una aplicaci\xf3n Laravel."),(0,l.kt)("p",null,"En la primera fase, el compilador de Blade toma el archivo de plantilla con las directivas y las convierte en c\xf3digo PHP. Esta fase se realiza en tiempo de desarrollo y se ejecuta solo una vez para cada archivo de plantilla. El compilador Blade genera un archivo PHP que contiene el c\xf3digo equivalente a las directivas Blade del archivo de plantilla original."),(0,l.kt)("p",null,"En la segunda fase, durante la ejecuci\xf3n de la aplicaci\xf3n Laravel, se ejecuta el c\xf3digo PHP generado en la fase de compilaci\xf3n. Este proceso es r\xe1pido y eficiente, ya que el c\xf3digo PHP ya est\xe1 optimizado y listo para ser ejecutado. La salida del c\xf3digo PHP se env\xeda al navegador del usuario como HTML."),(0,l.kt)("p",null,"En definitiva, el uso de directivas Blade en lugar de c\xf3digo PHP puro en Laravel ofrece una sintaxis m\xe1s legible, una separaci\xf3n clara de la l\xf3gica de presentaci\xf3n, la reutilizaci\xf3n de c\xf3digo, mayor productividad y una mejor integraci\xf3n con el framework. Estas ventajas contribuyen a un desarrollo m\xe1s eficiente y mantenible de aplicaciones web en Laravel."),(0,l.kt)("h2",{id:"sintaxis-b\xe1sica-de-las-directivas-blade"},"Sintaxis b\xe1sica de las directivas Blade"),(0,l.kt)("p",null,"Las directivas Blade en Laravel utilizan una sintaxis sencilla y expresiva. A continuaci\xf3n se muestra la sintaxis b\xe1sica de algunas de las directivas m\xe1s comunes:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Comentarios:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"{{-- Esto es un comentario en Blade --}}\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Estructuras de control (if, else, elseif):"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"@if($condicion)\n    {{-- C\xf3digo si se cumple la condici\xf3n --}}\n@elseif($otraCondicion)\n    {{-- C\xf3digo si se cumple la otra condici\xf3n --}}\n@else\n    {{-- C\xf3digo si no se cumple ninguna condici\xf3n --}}\n@endif\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Bucles (foreach):"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"@foreach($array as $elemento)\n    {{-- C\xf3digo para cada elemento --}}\n@endforeach\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Incluir otros archivos de plantilla:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"@include('nombre_archivo')\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Asignaci\xf3n de valores a variables:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"@php\n    $variable = valor;\n@endphp\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Impresi\xf3n de variables:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"{{ $variable }}\n"))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"Instrucciones de apertura y cierre:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"@section('nombre_seccion')\n    {{-- Contenido de la secci\xf3n --}}\n@endsection\n")))),(0,l.kt)("p",null,"Estos son solo algunos ejemplos b\xe1sicos de la sintaxis de las directivas Blade. Laravel proporciona muchas m\xe1s directivas que permiten una mayor flexibilidad y control en la construcci\xf3n de plantillas HTML din\xe1micas."),(0,l.kt)("h2",{id:"ejemplos-de-las-directivas-blade-m\xe1s-comunes"},"Ejemplos de las directivas Blade m\xe1s comunes"),(0,l.kt)("p",null,"Aqu\xed tienes algunos ejemplos de directivas Blade comunes:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Directiva ",(0,l.kt)("inlineCode",{parentName:"li"},"@if"),":")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"@if($condicion)\n    {{-- C\xf3digo si se cumple la condici\xf3n --}}\n@else\n    {{-- C\xf3digo si no se cumple la condici\xf3n --}}\n@endif\n")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Directiva ",(0,l.kt)("inlineCode",{parentName:"li"},"@foreach"),":")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"@foreach($array as $elemento)\n    {{-- C\xf3digo para cada elemento --}}\n@endforeach\n")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"Directiva ",(0,l.kt)("inlineCode",{parentName:"li"},"@while"),":")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"@while($condicion)\n    {{-- C\xf3digo mientras se cumple la condici\xf3n --}}\n@endwhile\n")),(0,l.kt)("ol",{start:4},(0,l.kt)("li",{parentName:"ol"},"Directiva ",(0,l.kt)("inlineCode",{parentName:"li"},"@for"),":")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"@for($i = 0; $i < 5; $i++)\n    {{-- C\xf3digo ejecutado en cada iteraci\xf3n --}}\n@endfor\n")),(0,l.kt)("ol",{start:5},(0,l.kt)("li",{parentName:"ol"},"Directiva ",(0,l.kt)("inlineCode",{parentName:"li"},"@switch")," y ",(0,l.kt)("inlineCode",{parentName:"li"},"@case"),":")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"@switch($valor)\n    @case('opcion1')\n        {{-- C\xf3digo si $valor es igual a 'opcion1' --}}\n        @break\n\n    @case('opcion2')\n        {{-- C\xf3digo si $valor es igual a 'opcion2' --}}\n        @break\n\n    @default\n        {{-- C\xf3digo por defecto si no se cumple ninguna condici\xf3n --}}\n@endswitch\n")),(0,l.kt)("p",null,"Estos son solo algunos ejemplos de directivas Blade comunes. Recuerda que puedes combinar estas directivas con HTML y c\xf3digo PHP para construir plantillas din\xe1micas y expresivas en Laravel."),(0,l.kt)("h2",{id:"estructuras-de-control-y-condicionales"},"Estructuras de control y condicionales"),(0,l.kt)("p",null,"En Blade, las estructuras de control y las expresiones condicionales se utilizan para controlar el flujo del c\xf3digo y tomar decisiones basadas en condiciones. Aqu\xed tienes una explicaci\xf3n de las principales estructuras de control y expresiones condicionales en Blade:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Estructura ",(0,l.kt)("inlineCode",{parentName:"li"},"@if"),"\nLa estructura ",(0,l.kt)("inlineCode",{parentName:"li"},"@if")," permite ejecutar un bloque de c\xf3digo si se cumple una condici\xf3n. Puede ir acompa\xf1ada de las directivas ",(0,l.kt)("inlineCode",{parentName:"li"},"@elseif")," y ",(0,l.kt)("inlineCode",{parentName:"li"},"@else")," para especificar condiciones adicionales y un bloque de c\xf3digo alternativo si ninguna de las condiciones anteriores se cumple.")),(0,l.kt)("p",null,"Ejemplo:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"@if($condicion)\n    // C\xf3digo si la condici\xf3n es verdadera\n@elseif($otraCondicion)\n    // C\xf3digo si la otra condici\xf3n es verdadera\n@else\n    // C\xf3digo si ninguna condici\xf3n se cumple\n@endif\n")),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Estructura ",(0,l.kt)("inlineCode",{parentName:"li"},"@switch")," y ",(0,l.kt)("inlineCode",{parentName:"li"},"@case"),"\nLa estructura ",(0,l.kt)("inlineCode",{parentName:"li"},"@switch")," se utiliza para evaluar una expresi\xf3n y ejecutar diferentes bloques de c\xf3digo seg\xfan el valor de esa expresi\xf3n. Dentro de ",(0,l.kt)("inlineCode",{parentName:"li"},"@switch"),", se utilizan las directivas ",(0,l.kt)("inlineCode",{parentName:"li"},"@case")," para definir los diferentes casos y su c\xf3digo asociado. Tambi\xe9n se puede utilizar la directiva ",(0,l.kt)("inlineCode",{parentName:"li"},"@default")," para definir un caso por defecto si ninguno de los casos anteriores coincide.")),(0,l.kt)("p",null,"Ejemplo:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"@switch($valor)\n    @case('opcion1')\n        // C\xf3digo si $valor es igual a 'opcion1'\n        @break\n\n    @case('opcion2')\n        // C\xf3digo si $valor es igual a 'opcion2'\n        @break\n\n    @default\n        // C\xf3digo por defecto si ninguna condici\xf3n se cumple\n@endswitch\n")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"Expresiones condicionales en atributos\nBlade tambi\xe9n permite utilizar expresiones condicionales en los atributos de HTML. Esto es \xfatil cuando deseas mostrar u ocultar elementos HTML basados en ciertas condiciones.")),(0,l.kt)("p",null,"Ejemplo:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"<div class=\"mi-clase {{ $condicion ? 'visible' : 'oculto' }}\">\n    \x3c!-- Contenido del div --\x3e\n</div>\n")),(0,l.kt)("p",null,"En este ejemplo, la clase ",(0,l.kt)("inlineCode",{parentName:"p"},"mi-clase")," se asignar\xe1 al div, y dependiendo de la condici\xf3n, se a\xf1adir\xe1 la clase ",(0,l.kt)("inlineCode",{parentName:"p"},"visible")," si la condici\xf3n es verdadera, o la clase ",(0,l.kt)("inlineCode",{parentName:"p"},"oculto")," si la condici\xf3n es falsa."),(0,l.kt)("p",null,"Estas son algunas de las estructuras de control y expresiones condicionales m\xe1s utilizadas en Blade. Proporcionan flexibilidad y capacidad de toma de decisiones en la construcci\xf3n de tus plantillas Blade en Laravel."),(0,l.kt)("h2",{id:"inclusi\xf3n-de-archivos-parciales"},"Inclusi\xf3n de archivos parciales"),(0,l.kt)("p",null,"En Blade, puedes incluir archivos parciales dentro de tus plantillas utilizando la directiva ",(0,l.kt)("inlineCode",{parentName:"p"},"@include"),". Esto te permite reutilizar bloques de c\xf3digo en m\xfaltiples vistas y mantener un c\xf3digo m\xe1s organizado. Aqu\xed tienes una explicaci\xf3n de c\xf3mo funciona la inclusi\xf3n de archivos parciales en Blade:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Creaci\xf3n del archivo parcial\nComienza creando un archivo parcial en el cual deseas encapsular cierto bloque de c\xf3digo. Por ejemplo, podr\xedas tener un archivo llamado ",(0,l.kt)("inlineCode",{parentName:"li"},"_menu.blade.php")," que contiene el c\xf3digo HTML de un men\xfa de navegaci\xf3n.")),(0,l.kt)("p",null,"Ejemplo del archivo ",(0,l.kt)("inlineCode",{parentName:"p"},"_menu.blade.php"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-blade"},'<nav>\n    <ul>\n        <li><a href="/">Inicio</a></li>\n        <li><a href="/productos">Productos</a></li>\n        <li><a href="/servicios">Servicios</a></li>\n    </ul>\n</nav>\n')),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Inclusi\xf3n del archivo parcial\nEn la vista principal donde deseas incluir el archivo parcial, utiliza la directiva ",(0,l.kt)("inlineCode",{parentName:"li"},"@include")," seguida del nombre del archivo parcial que deseas incluir. Puedes especificar la ruta completa del archivo o simplemente el nombre si se encuentra en el mismo directorio o en un directorio de vistas com\xfan.")),(0,l.kt)("p",null,"Ejemplo de inclusi\xf3n del archivo parcial en ",(0,l.kt)("inlineCode",{parentName:"p"},"mi_vista.blade.php"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"<html>\n<head>\n    \x3c!-- C\xf3digo del encabezado --\x3e\n</head>\n<body>\n    @include('_menu')\n    \n    <div class=\"contenido\">\n        \x3c!-- Contenido de la vista --\x3e\n    </div>\n    \n    \x3c!-- C\xf3digo del pie de p\xe1gina --\x3e\n</body>\n</html>\n")),(0,l.kt)("p",null,"En este ejemplo, el archivo parcial ",(0,l.kt)("inlineCode",{parentName:"p"},"_menu.blade.php")," se incluye en la vista ",(0,l.kt)("inlineCode",{parentName:"p"},"mi_vista.blade.php")," utilizando la directiva ",(0,l.kt)("inlineCode",{parentName:"p"},"@include('_menu')"),". El contenido del archivo parcial se insertar\xe1 en ese lugar de la vista."),(0,l.kt)("p",null,"Al incluir archivos parciales, puedes reutilizar bloques de c\xf3digo en m\xfaltiples vistas y mantener una estructura modular en tu aplicaci\xf3n. Esto facilita la actualizaci\xf3n y el mantenimiento del c\xf3digo, ya que solo necesitas realizar cambios en un solo lugar (el archivo parcial) en lugar de modificar cada vista individualmente."),(0,l.kt)("h2",{id:"herencia-de-plantillas"},"Herencia de plantillas"),(0,l.kt)("p",null,"La herencia de plantillas es una caracter\xedstica poderosa de Blade que te permite definir una plantilla base y extenderla en m\xfaltiples vistas. Esto te permite crear una estructura com\xfan para tus vistas y reutilizar c\xf3digo de manera eficiente. Aqu\xed tienes una explicaci\xf3n b\xe1sica de c\xf3mo funciona la herencia de plantillas en Blade:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Creaci\xf3n de la plantilla base\nComienza creando una plantilla base que servir\xe1 como el dise\xf1o com\xfan para tus vistas. Puedes crear un archivo llamado ",(0,l.kt)("inlineCode",{parentName:"li"},"layout.blade.php")," y definir en \xe9l la estructura HTML b\xe1sica de tu aplicaci\xf3n.")),(0,l.kt)("p",null,"Ejemplo del archivo ",(0,l.kt)("inlineCode",{parentName:"p"},"layout.blade.php"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"<html>\n<head>\n    <title>@yield('title')</title>\n    \x3c!-- Otros elementos del encabezado --\x3e\n</head>\n<body>\n    <header>\n        \x3c!-- Contenido del encabezado --\x3e\n    </header>\n    \n    <div class=\"contenido\">\n        @yield('content')\n    </div>\n    \n    <footer>\n        \x3c!-- Contenido del pie de p\xe1gina --\x3e\n    </footer>\n</body>\n</html>\n")),(0,l.kt)("p",null,"En esta plantilla base, hemos utilizado ",(0,l.kt)("inlineCode",{parentName:"p"},"@yield")," para definir secciones que ser\xe1n reemplazadas en las vistas que extienden esta plantilla."),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Extensi\xf3n de la plantilla base en una vista\nEn tus vistas individuales, puedes extender la plantilla base utilizando la directiva ",(0,l.kt)("inlineCode",{parentName:"li"},"@extends")," y especificando el nombre del archivo de la plantilla base que deseas extender. Luego, puedes definir el contenido espec\xedfico de esa vista utilizando ",(0,l.kt)("inlineCode",{parentName:"li"},"@section"),".")),(0,l.kt)("p",null,"Ejemplo de una vista que extiende la plantilla base en ",(0,l.kt)("inlineCode",{parentName:"p"},"mi_vista.blade.php"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"@extends('layout')\n\n@section('title', 'Mi Vista')\n\n@section('content')\n    <h1>Bienvenido a mi vista</h1>\n    <p>Este es el contenido espec\xedfico de la vista.</p>\n@endsection\n")),(0,l.kt)("p",null,"En este ejemplo, la vista ",(0,l.kt)("inlineCode",{parentName:"p"},"mi_vista.blade.php")," extiende la plantilla base ",(0,l.kt)("inlineCode",{parentName:"p"},"layout.blade.php")," utilizando ",(0,l.kt)("inlineCode",{parentName:"p"},"@extends('layout')"),". Luego, se define el contenido espec\xedfico de esa vista dentro de ",(0,l.kt)("inlineCode",{parentName:"p"},"@section('content')"),"."),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"Renderizaci\xf3n de la vista completa\nCuando renderizas la vista ",(0,l.kt)("inlineCode",{parentName:"li"},"mi_vista.blade.php"),", Blade combinar\xe1 el contenido espec\xedfico de la vista con la plantilla base, reemplazando las secciones definidas con ",(0,l.kt)("inlineCode",{parentName:"li"},"@yield")," con el contenido correspondiente de la vista.")),(0,l.kt)("p",null,"El resultado final ser\xe1 un archivo HTML completo que incluye tanto la estructura com\xfan de la plantilla base como el contenido espec\xedfico de la vista."),(0,l.kt)("p",null,"La herencia de plantillas en Blade te permite crear un dise\xf1o coherente para tus vistas y reutilizar c\xf3digo de manera eficiente. Adem\xe1s, puedes utilizar las secciones para definir \xe1reas flexibles en tus vistas, permiti\xe9ndote personalizar el contenido seg\xfan tus necesidades espec\xedficas en cada vista individual."),(0,l.kt)("h2",{id:"uso-de-variables-y-datos-en-blade"},"Uso de variables y datos en Blade"),(0,l.kt)("p",null,"En Blade, puedes utilizar variables y datos de manera sencilla para mostrar informaci\xf3n din\xe1mica en tus vistas. Aqu\xed tienes una explicaci\xf3n b\xe1sica de c\xf3mo puedes usar variables y datos en Blade:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"Asignaci\xf3n de variables\nPuedes asignar valores a variables en tus controladores de Laravel y luego acceder a esas variables en tus vistas de Blade. Por ejemplo, supongamos que tienes una variable ",(0,l.kt)("inlineCode",{parentName:"li"},"$nombre"),' con el valor "Juan" en tu controlador:')),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$nombre = 'Juan';\nreturn view('mi_vista', compact('nombre'));\n")),(0,l.kt)("p",null,"En tu vista, puedes acceder a la variable utilizando la sintaxis de doble llave ",(0,l.kt)("inlineCode",{parentName:"p"},"{{ }}"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"<h1>Hola, {{ $nombre }}</h1>\n")),(0,l.kt)("p",null,'Esto mostrar\xe1 "Hola, Juan" en tu vista.'),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"Uso de expresiones y funciones\nAdem\xe1s de las variables, tambi\xe9n puedes utilizar expresiones y funciones en tus vistas de Blade. Por ejemplo, supongamos que tienes una variable ",(0,l.kt)("inlineCode",{parentName:"li"},"$precio")," con el valor 1000 en tu controlador. Puedes realizar c\xe1lculos y manipulaciones con esa variable en tu vista:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"<p>El precio con impuestos es: {{ $precio * 1.10 }}</p>\n")),(0,l.kt)("p",null,'Esto mostrar\xe1 "El precio con impuestos es: 1100" en tu vista.'),(0,l.kt)("p",null,"Tambi\xe9n puedes utilizar funciones incorporadas de PHP o funciones personalizadas en tus vistas. Por ejemplo, supongamos que tienes una funci\xf3n personalizada ",(0,l.kt)("inlineCode",{parentName:"p"},"obtenerDescuento()")," que devuelve el descuento actual. Puedes llamar a esa funci\xf3n en tu vista:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"<p>Tu descuento actual es: {{ obtenerDescuento() }}</p>\n")),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"Iteraci\xf3n sobre datos\nEn Blade, puedes utilizar la directiva ",(0,l.kt)("inlineCode",{parentName:"li"},"@foreach")," para iterar sobre una colecci\xf3n de datos, como un arreglo o una colecci\xf3n de Eloquent. Por ejemplo, supongamos que tienes un arreglo ",(0,l.kt)("inlineCode",{parentName:"li"},"$usuarios")," con nombres de usuarios en tu controlador:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$usuarios = ['Juan', 'Mar\xeda', 'Carlos'];\nreturn view('mi_vista', compact('usuarios'));\n")),(0,l.kt)("p",null,"En tu vista, puedes utilizar ",(0,l.kt)("inlineCode",{parentName:"p"},"@foreach")," para recorrer el arreglo y mostrar cada nombre de usuario:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"<ul>\n    @foreach ($usuarios as $usuario)\n        <li>{{ $usuario }}</li>\n    @endforeach\n</ul>\n")),(0,l.kt)("p",null,"Esto mostrar\xe1 una lista con los nombres de usuario en tu vista."),(0,l.kt)("p",null,"En resumen, en Blade puedes utilizar variables, expresiones y funciones para mostrar informaci\xf3n din\xe1mica en tus vistas. Tambi\xe9n puedes iterar sobre datos utilizando ",(0,l.kt)("inlineCode",{parentName:"p"},"@foreach"),". Esto te permite crear vistas din\xe1micas y flexibles en tu aplicaci\xf3n Laravel."),(0,l.kt)("h2",{id:"directivas-de-control-de-flujo-avanzadas"},"Directivas de control de flujo avanzadas"),(0,l.kt)("p",null,"Adem\xe1s de las directivas de control de flujo b\xe1sicas como ",(0,l.kt)("inlineCode",{parentName:"p"},"@if")," y ",(0,l.kt)("inlineCode",{parentName:"p"},"@foreach"),", Blade tambi\xe9n ofrece directivas avanzadas para controlar el flujo de tu c\xf3digo en las vistas. Aqu\xed tienes algunas de las directivas de control de flujo avanzadas en Blade:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"@forelse\nLa directiva ",(0,l.kt)("inlineCode",{parentName:"li"},"@forelse")," se utiliza para iterar sobre una colecci\xf3n de datos, al igual que ",(0,l.kt)("inlineCode",{parentName:"li"},"@foreach"),". Sin embargo, tambi\xe9n te permite especificar un bloque de c\xf3digo que se ejecutar\xe1 si la colecci\xf3n est\xe1 vac\xeda. Aqu\xed tienes un ejemplo:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"@forelse ($usuarios as $usuario)\n    <li>{{ $usuario }}</li>\n@empty\n    <li>No hay usuarios</li>\n@endforelse\n")),(0,l.kt)("p",null,"En este ejemplo, si la colecci\xf3n ",(0,l.kt)("inlineCode",{parentName:"p"},"$usuarios"),' est\xe1 vac\xeda, se mostrar\xe1 "No hay usuarios". De lo contrario, se mostrar\xe1 cada usuario en elementos de lista.'),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"@while\nLa directiva ",(0,l.kt)("inlineCode",{parentName:"li"},"@while")," se utiliza para crear bucles while en tus vistas. Puedes especificar una condici\xf3n y el bloque de c\xf3digo se ejecutar\xe1 mientras se cumpla esa condici\xf3n. Aqu\xed tienes un ejemplo:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"@php\n    $contador = 0;\n@endphp\n\n@while ($contador < 5)\n    <p>{{ $contador }}</p>\n    @php\n        $contador++;\n    @endphp\n@endwhile\n")),(0,l.kt)("p",null,"En este ejemplo, se mostrar\xe1n los n\xfameros del 0 al 4 en p\xe1rrafos."),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"@switch y @case\nLas directivas ",(0,l.kt)("inlineCode",{parentName:"li"},"@switch")," y ",(0,l.kt)("inlineCode",{parentName:"li"},"@case")," se utilizan para crear estructuras de selecci\xf3n switch en tus vistas. Puedes comparar una variable con diferentes casos y ejecutar el c\xf3digo correspondiente al caso que coincida. Aqu\xed tienes un ejemplo:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"@switch($tipo)\n    @case('rojo')\n        <p>El tipo es rojo</p>\n        @break\n\n    @case('azul')\n        <p>El tipo es azul</p>\n        @break\n\n    @default\n        <p>Tipo desconocido</p>\n@endswitch\n")),(0,l.kt)("p",null,"En este ejemplo, el texto se mostrar\xe1 dependiendo del valor de la variable ",(0,l.kt)("inlineCode",{parentName:"p"},"$tipo"),"."),(0,l.kt)("p",null,"Estas son solo algunas de las directivas de control de flujo avanzadas que ofrece Blade. Puedes utilizar estas directivas para crear l\xf3gica condicional y bucles m\xe1s complejos en tus vistas de Laravel."),(0,l.kt)("h2",{id:"personalizaci\xf3n-de-las-directivas-blade"},"Personalizaci\xf3n de las directivas Blade"),(0,l.kt)("p",null,"Adem\xe1s de las directivas de control de flujo b\xe1sicas como ",(0,l.kt)("inlineCode",{parentName:"p"},"@if")," y ",(0,l.kt)("inlineCode",{parentName:"p"},"@foreach"),", Blade tambi\xe9n ofrece directivas avanzadas para controlar el flujo de tu c\xf3digo en las vistas. Aqu\xed tienes algunas de las directivas de control de flujo avanzadas en Blade:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"@forelse\nLa directiva ",(0,l.kt)("inlineCode",{parentName:"li"},"@forelse")," se utiliza para iterar sobre una colecci\xf3n de datos, al igual que ",(0,l.kt)("inlineCode",{parentName:"li"},"@foreach"),". Sin embargo, tambi\xe9n te permite especificar un bloque de c\xf3digo que se ejecutar\xe1 si la colecci\xf3n est\xe1 vac\xeda. Aqu\xed tienes un ejemplo:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"@forelse ($usuarios as $usuario)\n    <li>{{ $usuario }}</li>\n@empty\n    <li>No hay usuarios</li>\n@endforelse\n")),(0,l.kt)("p",null,"En este ejemplo, si la colecci\xf3n ",(0,l.kt)("inlineCode",{parentName:"p"},"$usuarios"),' est\xe1 vac\xeda, se mostrar\xe1 "No hay usuarios". De lo contrario, se mostrar\xe1 cada usuario en elementos de lista.'),(0,l.kt)("ol",{start:2},(0,l.kt)("li",{parentName:"ol"},"@while\nLa directiva ",(0,l.kt)("inlineCode",{parentName:"li"},"@while")," se utiliza para crear bucles while en tus vistas. Puedes especificar una condici\xf3n y el bloque de c\xf3digo se ejecutar\xe1 mientras se cumpla esa condici\xf3n. Aqu\xed tienes un ejemplo:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"@php\n    $contador = 0;\n@endphp\n\n@while ($contador < 5)\n    <p>{{ $contador }}</p>\n    @php\n        $contador++;\n    @endphp\n@endwhile\n")),(0,l.kt)("p",null,"En este ejemplo, se mostrar\xe1n los n\xfameros del 0 al 4 en p\xe1rrafos."),(0,l.kt)("ol",{start:3},(0,l.kt)("li",{parentName:"ol"},"@switch y @case\nLas directivas ",(0,l.kt)("inlineCode",{parentName:"li"},"@switch")," y ",(0,l.kt)("inlineCode",{parentName:"li"},"@case")," se utilizan para crear estructuras de selecci\xf3n switch en tus vistas. Puedes comparar una variable con diferentes casos y ejecutar el c\xf3digo correspondiente al caso que coincida. Aqu\xed tienes un ejemplo:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-blade"},"@switch($tipo)\n    @case('rojo')\n        <p>El tipo es rojo</p>\n        @break\n\n    @case('azul')\n        <p>El tipo es azul</p>\n        @break\n\n    @default\n        <p>Tipo desconocido</p>\n@endswitch\n")),(0,l.kt)("p",null,"En este ejemplo, el texto se mostrar\xe1 dependiendo del valor de la variable ",(0,l.kt)("inlineCode",{parentName:"p"},"$tipo"),"."),(0,l.kt)("p",null,"Estas son solo algunas de las directivas de control de flujo avanzadas que ofrece Blade. Puedes utilizar estas directivas para crear l\xf3gica condicional y bucles m\xe1s complejos en tus vistas de Laravel."),(0,l.kt)("h2",{id:"conclusiones"},"Conclusiones"),(0,l.kt)("p",null,"En conclusi\xf3n, Blade es el motor de plantillas incorporado en el framework Laravel que proporciona una sintaxis sencilla y expresiva para trabajar con vistas en PHP. Al utilizar Blade, puedes mejorar la legibilidad y la eficiencia de tus archivos de vista."),(0,l.kt)("p",null,"Las directivas Blade te permiten controlar el flujo de tu c\xf3digo de forma clara y concisa. Puedes utilizar directivas como ",(0,l.kt)("inlineCode",{parentName:"p"},"@if"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"@foreach"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"@while")," y muchas m\xe1s para realizar acciones condicionales y bucles en tus vistas."),(0,l.kt)("p",null,"Adem\xe1s, Blade ofrece caracter\xedsticas avanzadas como la inclusi\xf3n de archivos parciales, la herencia de plantillas y la manipulaci\xf3n de variables y datos. Estas caracter\xedsticas te permiten reutilizar y organizar tu c\xf3digo de manera eficiente, lo que facilita el mantenimiento y la creaci\xf3n de vistas din\xe1micas y flexibles."),(0,l.kt)("p",null,"Otra ventaja de Blade es su rendimiento. Blade compila tus vistas en c\xf3digo PHP puro antes de ser ejecutadas, lo que resulta en una ejecuci\xf3n m\xe1s r\xe1pida en comparaci\xf3n con la ejecuci\xf3n directa de c\xf3digo PHP embebido en las vistas."),(0,l.kt)("p",null,"En resumen, las directivas Blade y su sintaxis intuitiva y poderosa facilitan la creaci\xf3n de vistas din\xe1micas y estructuradas en Laravel. Blade te ayuda a mantener un c\xf3digo limpio y legible, mejora la productividad y optimiza el rendimiento de tus aplicaciones web."))}u.isMDXComponent=!0}}]);