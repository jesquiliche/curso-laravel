"use strict";(self.webpackChunkeloquent=self.webpackChunkeloquent||[]).push([[468],{3905:(e,a,n)=>{n.d(a,{Zo:()=>u,kt:()=>b});var o=n(7294);function s(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function r(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,o)}return n}function t(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?r(Object(n),!0).forEach((function(a){s(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function i(e,a){if(null==e)return{};var n,o,s=function(e,a){if(null==e)return{};var n,o,s={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],a.indexOf(n)>=0||(s[n]=e[n]);return s}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=o.createContext({}),l=function(e){var a=o.useContext(c),n=a;return e&&(n="function"==typeof e?e(a):t(t({},a),e)),n},u=function(e){var a=l(e.components);return o.createElement(c.Provider,{value:a},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},m=o.forwardRef((function(e,a){var n=e.components,s=e.mdxType,r=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=l(n),m=s,b=d["".concat(c,".").concat(m)]||d[m]||p[m]||r;return n?o.createElement(b,t(t({ref:a},u),{},{components:n})):o.createElement(b,t({ref:a},u))}));function b(e,a){var n=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var r=n.length,t=new Array(r);t[0]=m;var i={};for(var c in a)hasOwnProperty.call(a,c)&&(i[c]=a[c]);i.originalType=e,i[d]="string"==typeof e?e:s,t[1]=i;for(var l=2;l<r;l++)t[l]=n[l];return o.createElement.apply(null,t)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7142:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>t,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=n(7462),s=(n(7294),n(3905));const r={sidebar_position:5},t="Transacciones",i={unversionedId:"tutorial-basics/sql/transaciones",id:"tutorial-basics/sql/transaciones",title:"Transacciones",description:"En el contexto de las bases de datos, una transacci\xf3n es una secuencia de operaciones que se realizan como una sola unidad at\xf3mica e indivisible, es decir, o se completan todas las operaciones o no se realiza ninguna. Las transacciones son importantes porque permiten garantizar la integridad de los datos en una base de datos, especialmente en situaciones en las que varias operaciones deben realizarse como una \xfanica unidad l\xf3gica.",source:"@site/docs/tutorial-basics/07-sql/05-transaciones.md",sourceDirName:"tutorial-basics/07-sql",slug:"/tutorial-basics/sql/transaciones",permalink:"/curso-laravel/docs/tutorial-basics/sql/transaciones",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/07-sql/05-transaciones.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Consultas avanzadas",permalink:"/curso-laravel/docs/tutorial-basics/sql/consultas"},next:{title:"Conclusiones",permalink:"/curso-laravel/docs/tutorial-basics/sql/conclusiones"}},c={},l=[{value:"transacciones en SQL",id:"transacciones-en-sql",level:2},{value:"Transacciones en Eloquent",id:"transacciones-en-eloquent",level:2}],u={toc:l},d="wrapper";function p(e){let{components:a,...n}=e;return(0,s.kt)(d,(0,o.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"transacciones"},"Transacciones"),(0,s.kt)("p",null,"En el contexto de las bases de datos, una transacci\xf3n es una secuencia de operaciones que se realizan como una sola unidad at\xf3mica e indivisible, es decir, o se completan todas las operaciones o no se realiza ninguna. Las transacciones son importantes porque permiten garantizar la integridad de los datos en una base de datos, especialmente en situaciones en las que varias operaciones deben realizarse como una \xfanica unidad l\xf3gica."),(0,s.kt)("p",null,"Por ejemplo, supongamos que un usuario desea transferir fondos de una cuenta bancaria a otra cuenta. La transferencia de fondos consta de varias operaciones, como verificar la disponibilidad de fondos, deducir los fondos de una cuenta y agregar los fondos a otra cuenta. Si se produce un error en una de estas operaciones, es necesario revertir todas las operaciones anteriores y garantizar que no se realice ninguna operaci\xf3n adicional. Las transacciones permiten garantizar que se realicen todas las operaciones de manera segura y se eviten problemas como cuentas con fondos insuficientes o transferencias parciales."),(0,s.kt)("p",null,"Las transacciones son un mecanismo\nimportante para garantizar la integridad de los datos en\nuna base de datos, especialmente en situaciones que involucran m\xfaltiples operaciones que deben realizarse como una \xfanica unidad l\xf3gica."),(0,s.kt)("h2",{id:"transacciones-en-sql"},"transacciones en SQL"),(0,s.kt)("p",null,"Por supuesto, aqu\xed tienes un ejemplo de c\xf3mo utilizar transacciones en SQL:"),(0,s.kt)("p",null,'Supongamos que tenemos dos tablas en nuestra base de datos: "usuarios" y "pagos". Queremos realizar una operaci\xf3n en ambas tablas, asegur\xe1ndonos de que si algo falla en el proceso, se reviertan todos los cambios realizados en ambas tablas. Para esto, utilizamos transacciones.'),(0,s.kt)("p",null,'En SQL, las transacciones se utilizan para agrupar un conjunto de operaciones en una sola unidad l\xf3gica. Se inicia la transacci\xf3n con la sentencia "BEGIN TRANSACTION", se ejecutan las operaciones necesarias y se finaliza con la sentencia "COMMIT" si todo ha ido bien, o con la sentencia "ROLLBACK" si algo ha fallado.'),(0,s.kt)("p",null,"Por ejemplo, supongamos que queremos insertar un nuevo usuario y realizar un pago en la base de datos:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"BEGIN TRANSACTION;\n\nINSERT INTO usuarios (nombre, email) VALUES ('Juan', 'juan@gmail.com');\nINSERT INTO pagos (usuario_id, cantidad) VALUES (1, 50);\n\nCOMMIT;\n")),(0,s.kt)("p",null,'En este ejemplo, se inicia una transacci\xf3n con la sentencia "BEGIN TRANSACTION". A continuaci\xf3n, se inserta un nuevo usuario en la tabla "usuarios" y un nuevo registro de pago en la tabla "pagos". Si todo ha ido bien, se confirman los cambios con la sentencia "COMMIT". Si algo ha fallado, se deshacen todos los cambios realizados en la transacci\xf3n con la sentencia "ROLLBACK".'),(0,s.kt)("p",null,"Es importante destacar que las transacciones se utilizan\npara asegurar que todas las operaciones realizadas en una\nunidad l\xf3gica se completen correctamente o se deshagan todas juntas\nsi algo sale mal. Esto ayuda a mantener la\nintegridad de los datos y evitar problemas de inconsistencia en la\nbase de datos."),(0,s.kt)("h2",{id:"transacciones-en-eloquent"},"Transacciones en Eloquent"),(0,s.kt)("p",null,"En Eloquent tambi\xe9n es posible trabajar con transacciones. Para iniciar una transacci\xf3n, podemos utilizar el m\xe9todo ",(0,s.kt)("inlineCode",{parentName:"p"},"beginTransaction()")," del objeto ",(0,s.kt)("inlineCode",{parentName:"p"},"DB"),". Luego, dentro de la transacci\xf3n, podemos realizar varias operaciones de escritura en la base de datos, y al finalizar, podemos confirmar los cambios con el m\xe9todo ",(0,s.kt)("inlineCode",{parentName:"p"},"commit()")," o revertirlos con el m\xe9todo ",(0,s.kt)("inlineCode",{parentName:"p"},"rollback()")," si algo sale mal."),(0,s.kt)("p",null,"Aqu\xed hay un ejemplo de c\xf3mo se podr\xeda utilizar una transacci\xf3n en Eloquent:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"use Illuminate\\Support\\Facades\\DB;\nuse App\\Models\\User;\n\nDB::beginTransaction();\n\ntry {\n    // Crear un nuevo usuario\n    $user = new User;\n    $user->name = 'John Doe';\n    $user->email = 'johndoe@example.com';\n    $user->password = bcrypt('password123');\n    $user->save();\n\n    // Actualizar el correo electr\xf3nico de otro usuario existente\n    $otherUser = User::find(2);\n    $otherUser->email = 'newemail@example.com';\n    $otherUser->save();\n\n    // Commit de los cambios\n    DB::commit();\n} catch (\\Exception $e) {\n    // Si algo sale mal, hacer rollback\n    DB::rollback();\n}\n")),(0,s.kt)("p",null,"En este ejemplo, se inicia una transacci\xf3n con ",(0,s.kt)("inlineCode",{parentName:"p"},"DB::beginTransaction()")," y se crean y actualizan algunos usuarios dentro de la transacci\xf3n. Si algo sale mal (por ejemplo, una excepci\xf3n), se hace un rollback para deshacer los cambios. Si todo funciona correctamente, se confirman los cambios con ",(0,s.kt)("inlineCode",{parentName:"p"},"DB::commit()"),"."))}p.isMDXComponent=!0}}]);