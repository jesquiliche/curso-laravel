"use strict";(self.webpackChunkeloquent=self.webpackChunkeloquent||[]).push([[6307],{3905:(e,a,r)=>{r.d(a,{Zo:()=>d,kt:()=>b});var n=r(7294);function s(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function t(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?t(Object(r),!0).forEach((function(a){s(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):t(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function l(e,a){if(null==e)return{};var r,n,s=function(e,a){if(null==e)return{};var r,n,s={},t=Object.keys(e);for(n=0;n<t.length;n++)r=t[n],a.indexOf(r)>=0||(s[r]=e[r]);return s}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(n=0;n<t.length;n++)r=t[n],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var i=n.createContext({}),u=function(e){var a=n.useContext(i),r=a;return e&&(r="function"==typeof e?e(a):o(o({},a),e)),r},d=function(e){var a=u(e.components);return n.createElement(i.Provider,{value:a},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var r=e.components,s=e.mdxType,t=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=u(r),m=s,b=c["".concat(i,".").concat(m)]||c[m]||p[m]||t;return r?n.createElement(b,o(o({ref:a},d),{},{components:r})):n.createElement(b,o({ref:a},d))}));function b(e,a){var r=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var t=r.length,o=new Array(t);o[0]=m;var l={};for(var i in a)hasOwnProperty.call(a,i)&&(l[i]=a[i]);l.originalType=e,l[c]="string"==typeof e?e:s,o[1]=l;for(var u=2;u<t;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8442:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>i,contentTitle:()=>o,default:()=>p,frontMatter:()=>t,metadata:()=>l,toc:()=>u});var n=r(7462),s=(r(7294),r(3905));const t={sidebar_position:3},o="Operaciones CRUD",l={unversionedId:"tutorial-basics/sql/crud",id:"tutorial-basics/sql/crud",title:"Operaciones CRUD",description:"Operaciones CRUD con SQL",source:"@site/docs/tutorial-basics/07-sql/03-crud.mdx",sourceDirName:"tutorial-basics/07-sql",slug:"/tutorial-basics/sql/crud",permalink:"/curso-laravel/docs/tutorial-basics/sql/crud",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorial-basics/07-sql/03-crud.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Definici\xf3n de modelos y tablas",permalink:"/curso-laravel/docs/tutorial-basics/sql/tablas"},next:{title:"Consultas avanzadas",permalink:"/curso-laravel/docs/tutorial-basics/sql/consultas"}},i={},u=[{value:"Operaciones CRUD con SQL",id:"operaciones-crud-con-sql",level:2},{value:"Operaciones CRUD con Eloquent",id:"operaciones-crud-con-eloquent",level:2},{value:"Diferencias entre SQL y Eloquent",id:"diferencias-entre-sql-y-eloquent",level:2}],d={toc:u},c="wrapper";function p(e){let{components:a,...r}=e;return(0,s.kt)(c,(0,n.Z)({},d,r,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"operaciones-crud"},"Operaciones CRUD"),(0,s.kt)("h2",{id:"operaciones-crud-con-sql"},"Operaciones CRUD con SQL"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},'SELECT: para recuperar datos de una tabla, se utiliza la sentencia SELECT seguida de los nombres de las columnas que se quieren recuperar. Por ejemplo, si se quiere recuperar el nombre y la edad de todos los usuarios de una tabla llamada "usuarios", se podr\xeda utilizar la siguiente sentencia:')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"SELECT nombre, edad FROM usuarios;\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},'INSERT: para insertar datos en una tabla, se utiliza la sentencia INSERT seguida del nombre de la tabla y los valores a insertar. Por ejemplo, si se quiere insertar un nuevo usuario en la tabla "usuarios" con nombre "Juan" y edad 25, se podr\xeda utilizar la siguiente sentencia:')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"INSERT INTO usuarios (nombre, edad) VALUES ('Juan', 25);\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},'UPDATE: para actualizar datos en una tabla, se utiliza la sentencia UPDATE seguida del nombre de la tabla y los valores a actualizar. Por ejemplo, si se quiere actualizar la edad del usuario con nombre "Juan" en la tabla "usuarios" a 30 a\xf1os, se podr\xeda utilizar la siguiente sentencia:')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"UPDATE usuarios SET edad = 30 WHERE nombre = 'Juan';\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},'DELETE: para eliminar datos de una tabla, se utiliza la sentencia DELETE seguida del nombre de la tabla y la condici\xf3n para eliminar los datos. Por ejemplo, si se quiere eliminar el usuario con nombre "Juan" de la tabla "usuarios", se podr\xeda utilizar la siguiente sentencia:')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"DELETE FROM usuarios WHERE nombre = 'Juan';\n")),(0,s.kt)("p",null,"Es importante tener en cuenta que estas operaciones deben realizarse\ncon precauci\xf3n, ya que pueden tener un impacto importante en los\ndatos de la base de datos. Se recomienda siempre hacer copias de seguridad\nde los datos antes de realizar cualquier operaci\xf3n CRUD en una\nbase de datos."),(0,s.kt)("h2",{id:"operaciones-crud-con-eloquent"},"Operaciones CRUD con Eloquent"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},'all(): para recuperar todos los registros de una tabla, se utiliza el m\xe9todo all(). Por ejemplo, si se tiene un modelo de "Usuarios", se podr\xeda utilizar el siguiente c\xf3digo para recuperar todos los usuarios:')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$usuarios = App\\Models\\Usuario::all();\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},'find(): para recuperar un registro espec\xedfico de una tabla, se utiliza el m\xe9todo find() y se le pasa el ID del registro como par\xe1metro. Por ejemplo, si se tiene un modelo de "Usuarios" y se quiere recuperar el usuario con ID 1, se podr\xeda utilizar el siguiente c\xf3digo:')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$usuario = App\\Models\\Usuario::find(1);\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},'create(): para insertar un nuevo registro en una tabla, se utiliza el m\xe9todo create() y se le pasan los valores de las columnas como un arreglo asociativo. Por ejemplo, si se tiene un modelo de "Usuarios" con las columnas "nombre" y "edad", se podr\xeda utilizar el siguiente c\xf3digo para crear un nuevo usuario:')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$usuario = App\\Models\\Usuario::create([\n    'nombre' => 'Juan',\n    'edad' => 25\n]);\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},'save(): para actualizar un registro existente en una tabla, se utiliza el m\xe9todo save() en el objeto del modelo y se modifican los valores de las columnas necesarios. Por ejemplo, si se tiene un modelo de "Usuarios" con el usuario con ID 1 y se quiere actualizar su edad a 30, se podr\xeda utilizar el siguiente c\xf3digo:')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$usuario = App\\Models\\Usuario::find(1);\n$usuario->edad = 30;\n$usuario->save();\n")),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},'delete(): para eliminar un registro existente en una tabla, se utiliza el m\xe9todo delete() en el objeto del modelo. Por ejemplo, si se tiene un modelo de "Usuarios" con el usuario con ID 1 y se quiere eliminarlo, se podr\xeda utilizar el siguiente c\xf3digo:')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$usuario = App\\Models\\Usuario::find(1);\n$usuario->delete();\n")),(0,s.kt)("p",null,"Es importante tener en cuenta que estos m\xe9todos realizan las operaciones CRUD de forma segura y confiable, ya que Eloquent se encarga de generar las consultas SQL necesarias en segundo plano. Adem\xe1s, Eloquent permite trabajar con modelos y objetos, lo que hace que la manipulaci\xf3n de datos sea m\xe1s\nintuitiva y f\xe1cil de entender para muchos desarrolladores."),(0,s.kt)("h2",{id:"diferencias-entre-sql-y-eloquent"},"Diferencias entre SQL y Eloquent"),(0,s.kt)("p",null,"Las operaciones CRUD en SQL y Eloquent comparten el mismo prop\xf3sito: interactuar con la base de datos para crear, leer, actualizar y eliminar registros. Sin embargo, existen algunas diferencias en la sintaxis y complejidad entre ambas formas de realizar estas operaciones."),(0,s.kt)("p",null,"En SQL, las sentencias CRUD b\xe1sicas son:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"SELECT: para leer registros de la base de datos."),(0,s.kt)("li",{parentName:"ul"},"INSERT: para crear registros nuevos en la base de datos."),(0,s.kt)("li",{parentName:"ul"},"UPDATE: para actualizar registros existentes en la base de datos."),(0,s.kt)("li",{parentName:"ul"},"DELETE: para eliminar registros de la base de datos.")),(0,s.kt)("p",null,"La sintaxis para cada una de estas sentencias puede variar dependiendo del tipo de base de datos utilizado, pero en general se siguen patrones similares. Por ejemplo, la sintaxis para una sentencia SELECT b\xe1sica en MySQL es la siguiente:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"SELECT column1, column2, ...\nFROM table_name;\n")),(0,s.kt)("p",null,"Mientras tanto, en Eloquent, las operaciones CRUD se realizan mediante m\xe9todos en los modelos de la aplicaci\xf3n. Algunos de los m\xe9todos m\xe1s comunes son:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"all(): para obtener todos los registros de una tabla."),(0,s.kt)("li",{parentName:"ul"},"find(): para buscar un registro espec\xedfico por su identificador."),(0,s.kt)("li",{parentName:"ul"},"create(): para crear un nuevo registro en la tabla."),(0,s.kt)("li",{parentName:"ul"},"save(): para actualizar un registro existente o crear uno nuevo, dependiendo de si ya existe o no."),(0,s.kt)("li",{parentName:"ul"},"delete(): para eliminar un registro de la tabla.")),(0,s.kt)("p",null,"La sintaxis para estos m\xe9todos es espec\xedfica de Eloquent y se utiliza de la siguiente manera:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"// Obtener todos los registros de la tabla 'users'\n$users = User::all();\n\n// Buscar un usuario por su identificador\n$user = User::find(1);\n\n// Crear un nuevo usuario\n$user = new User;\n$user->name = 'John Doe';\n$user->email = 'johndoe@example.com';\n$user->save();\n\n// Actualizar un usuario existente\n$user = User::find(1);\n$user->name = 'Jane Doe';\n$user->save();\n\n// Eliminar un usuario\n$user = User::find(1);\n$user->delete();\n")),(0,s.kt)("p",null,"En t\xe9rminos de complejidad, ambas formas de realizar operaciones CRUD tienen sus propios desaf\xedos. SQL puede ser m\xe1s complejo de aprender debido a la variedad de sentencias y la sintaxis espec\xedfica para cada base de datos. Por otro lado, Eloquent puede requerir m\xe1s configuraci\xf3n y conocimiento previo del modelo de datos y de la estructura de la base de datos en la aplicaci\xf3n."),(0,s.kt)("p",null,"En resumen, aunque SQL y Eloquent tienen objetivos similares en cuanto a las operaciones CRUD, cada uno tiene sus propias similitudes y diferencias en t\xe9rminos de sintaxis y complejidad. La elecci\xf3n entre uno u otro depende de las necesidades espec\xedficas de la aplicaci\xf3n y de la experiencia y preferencias del desarrollador."))}p.isMDXComponent=!0}}]);